{
    "db": {
        "title": "db",
        "excerpt": "Performs basic database operations using credentials stored in wp-config.php.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Create a new database.\n$ wp db create\nSuccess: Database created.\n\n# Drop an existing database.\n$ wp db drop --yes\nSuccess: Database dropped.\n\n# Reset the current database.\n$ wp db reset --yes\nSuccess: Database reset.\n\n# Execute a SQL query stored in a file.\n$ wp db query < debug.sql",
        "available": "",
        "synopsis": ""
    },
    "cap": {
        "title": "cap",
        "excerpt": "Adds, removes, and lists capabilities of a user role.",
        "options": "",
        "options_extra": "<p>See references for <a href=\"https:\/\/codex.wordpress.org\/Roles_and_Capabilities\">Roles and Capabilities<\/a> and <a href=\"https:\/\/codex.wordpress.org\/Class_Reference\/WP_User\">WP User class<\/a>.<\/p>",
        "has_child": 1,
        "examples": "# Add 'spectate' capability to 'author' role.\n$ wp cap add 'author' 'spectate'\nSuccess: Added 1 capability to 'author' role.\n\n# Add all caps from 'editor' role to 'author' role.\n$ wp cap list 'editor' | xargs wp cap add 'author'\nSuccess: Added 24 capabilities to 'author' role.\n\n# Remove all caps from 'editor' role that also appear in 'author' role.\n$ wp cap list 'author' | xargs wp cap remove 'editor'\nSuccess: Removed 34 capabilities from 'editor' role.",
        "available": "",
        "synopsis": ""
    },
    "cli": {
        "title": "cli",
        "excerpt": "Reviews current WP-CLI info, checks for updates, or views defined aliases.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Display the version currently installed.\n$ wp cli version\nWP-CLI 0.24.1\n\n# Check for updates to WP-CLI.\n$ wp cli check-update\nSuccess: WP-CLI is at the latest version.\n\n# Update WP-CLI to the latest stable release.\n$ wp cli update\nYou have version 0.24.0. Would you like to update to 0.24.1? [y\/n] y\nDownloading from https:\/\/github.com\/wp-cli\/wp-cli\/releases\/download\/v0.24.1\/wp-cli-0.24.1.phar...\nNew version works. Proceeding to replace.\nSuccess: Updated WP-CLI to 0.24.1.\n\n# Clear the internal WP-CLI cache.\n$ wp cli cache clear\nSuccess: Cache cleared.",
        "available": "",
        "synopsis": ""
    },
    "core": {
        "title": "core",
        "excerpt": "Downloads, installs, updates, and manages a WordPress installation.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Download WordPress core\n$ wp core download --locale=nl_NL\nDownloading WordPress 4.5.2 (nl_NL)...\nmd5 hash verified: c5366d05b521831dd0b29dfc386e56a5\nSuccess: WordPress downloaded.\n\n# Install WordPress\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\nSuccess: WordPress installed successfully.\n\n# Display the WordPress version\n$ wp core version\n4.5.2",
        "available": "",
        "synopsis": ""
    },
    "cron": {
        "title": "cron",
        "excerpt": "Tests, runs, and deletes WP-Cron events; manages WP-Cron schedules.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Test WP Cron spawning system\n$ wp cron test\nSuccess: WP-Cron spawning is working as expected.",
        "available": "",
        "synopsis": ""
    },
    "eval": {
        "title": "eval",
        "excerpt": "Executes arbitrary PHP code.",
        "options": "<dl><dt>&lt;php-code&gt;<\/dt><dd><p>The code to execute, as a string.<\/p><\/dd><dt>[--skip-wordpress]<\/dt><dd><p>Execute code without loading WordPress.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Note: because code is executed within a method, global variables need\nto be explicitly globalized.<\/p>",
        "has_child": 0,
        "examples": "# Display WordPress content directory.\n$ wp eval 'echo WP_CONTENT_DIR;'\n\/var\/www\/wordpress\/wp-content\n\n# Generate a random number.\n$ wp eval 'echo rand();' --skip-wordpress\n479620423",
        "available": "",
        "synopsis": "wp eval <php-code> [--skip-wordpress]"
    },
    "help": {
        "title": "help",
        "excerpt": "Gets help on WP-CLI, or on a specific command.",
        "options": "<dl><dt>[&lt;command&gt;...]<\/dt><dd><p>Get help on a specific command.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# get help for `core` command\nwp help core\n\n# get help for `core download` subcommand\nwp help core download",
        "available": "",
        "synopsis": "wp help [<command>...]"
    },
    "i18n": {
        "title": "i18n",
        "excerpt": "Provides internationalization tools for WordPress projects.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Create a POT file for the WordPress plugin\/theme in the current directory\n$ wp i18n make-pot . languages\/my-plugin.pot",
        "available": "",
        "synopsis": ""
    },
    "menu": {
        "title": "menu",
        "excerpt": "Lists, creates, assigns, and deletes the active theme's navigation menus.",
        "options": "",
        "options_extra": "<p>See the <a href=\"https:\/\/developer.wordpress.org\/themes\/functionality\/navigation-menus\/\">Navigation Menus<\/a> reference in the Theme Handbook.<\/p>",
        "has_child": 1,
        "examples": "# Create a new menu\n$ wp menu create \"My Menu\"\nSuccess: Created menu 200.\n\n# List existing menus\n$ wp menu list\n+---------+----------+----------+-----------+-------+\n| term_id | name     | slug     | locations | count |\n+---------+----------+----------+-----------+-------+\n| 200     | My Menu  | my-menu  |           | 0     |\n| 177     | Top Menu | top-menu | primary   | 7     |\n+---------+----------+----------+-----------+-------+\n\n# Create a new menu link item\n$ wp menu item add-custom my-menu Apple http:\/\/apple.com --porcelain\n1922\n\n# Assign the 'my-menu' menu to the 'primary' location\n$ wp menu location assign my-menu primary\nSuccess: Assigned location primary to menu my-menu.",
        "available": "",
        "synopsis": ""
    },
    "post": {
        "title": "post",
        "excerpt": "Manages posts, content, and meta.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Create a new post.\n$ wp post create --post_type=post --post_title='A sample post'\nSuccess: Created post 123.\n\n# Update an existing post.\n$ wp post update 123 --post_status=draft\nSuccess: Updated post 123.\n\n# Delete an existing post.\n$ wp post delete 123\nSuccess: Trashed post 123.",
        "available": "",
        "synopsis": ""
    },
    "role": {
        "title": "role",
        "excerpt": "Manages user roles, including creating new roles and resetting to defaults.",
        "options": "",
        "options_extra": "<p>See references for <a href=\"https:\/\/codex.wordpress.org\/Roles_and_Capabilities\">Roles and Capabilities<\/a> and <a href=\"https:\/\/codex.wordpress.org\/Class_Reference\/WP_User\">WP User class<\/a>.<\/p>",
        "has_child": 1,
        "examples": "# List roles.\n$ wp role list --fields=role --format=csv\nrole\nadministrator\neditor\nauthor\ncontributor\nsubscriber\n\n# Check to see if a role exists.\n$ wp role exists editor\nSuccess: Role with ID 'editor' exists.\n\n# Create a new role.\n$ wp role create approver Approver\nSuccess: Role with key 'approver' created.\n\n# Delete an existing role.\n$ wp role delete approver\nSuccess: Role with key 'approver' deleted.\n\n# Reset existing roles to their default capabilities.\n$ wp role reset administrator author contributor\nSuccess: Reset 3\/3 roles.",
        "available": "",
        "synopsis": ""
    },
    "site": {
        "title": "site",
        "excerpt": "Creates, deletes, empties, moderates, and lists one or more sites on a multisite installation.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Create site\n$ wp site create --slug=example\nSuccess: Site 3 created: www.example.com\/example\/\n\n# Output a simple list of site URLs\n$ wp site list --field=url\nhttp:\/\/www.example.com\/\nhttp:\/\/www.example.com\/subdir\/\n\n# Delete site\n$ wp site delete 123\nAre you sure you want to delete the 'http:\/\/www.example.com\/example' site? [y\/n] y\nSuccess: The site at 'http:\/\/www.example.com\/example' was deleted.",
        "available": "",
        "synopsis": ""
    },
    "term": {
        "title": "term",
        "excerpt": "Manages taxonomy terms and term meta, with create, delete, and list commands.",
        "options": "",
        "options_extra": "<p>See reference for <a href=\"https:\/\/codex.wordpress.org\/Taxonomies\">taxonomies and their terms<\/a>.<\/p>",
        "has_child": 1,
        "examples": "# Create a new term.\n$ wp term create category Apple --description=\"A type of fruit\"\nSuccess: Created category 199.\n\n# Get details about a term.\n$ wp term get category 199 --format=json --fields=term_id,name,slug,count\n{\"term_id\":199,\"name\":\"Apple\",\"slug\":\"apple\",\"count\":1}\n\n# Update an existing term.\n$ wp term update category 15 --name=Apple\nSuccess: Term updated.\n\n# Get the term's URL.\n$ wp term list post_tag --include=123 --field=url\nhttp:\/\/example.com\/tag\/tips-and-tricks\n\n# Delete post category\n$ wp term delete category 15\nSuccess: Deleted category 15.\n\n# Recount posts assigned to each categories and tags\n$ wp term recount category post_tag\nSuccess: Updated category term count\nSuccess: Updated post_tag term count",
        "available": "",
        "synopsis": ""
    },
    "user": {
        "title": "user",
        "excerpt": "Manages users, along with their roles, capabilities, and meta.",
        "options": "",
        "options_extra": "<p>See references for <a href=\"https:\/\/codex.wordpress.org\/Roles_and_Capabilities\">Roles and Capabilities<\/a> and <a href=\"https:\/\/codex.wordpress.org\/Class_Reference\/WP_User\">WP User class<\/a>.<\/p>",
        "has_child": 1,
        "examples": "# List user IDs\n$ wp user list --field=ID\n1\n\n# Create a new user.\n$ wp user create bob bob@example.com --role=author\nSuccess: Created user 3.\nPassword: k9**&I4vNH(&\n\n# Update an existing user.\n$ wp user update 123 --display_name=Mary --user_pass=marypass\nSuccess: Updated user 123.\n\n# Delete user 123 and reassign posts to user 567\n$ wp user delete 123 --reassign=567\nSuccess: Removed user 123 from http:\/\/example.com.",
        "available": "",
        "synopsis": ""
    },
    "cache": {
        "title": "cache",
        "excerpt": "Adds, removes, fetches, and flushes the WP Object Cache object.",
        "options": "",
        "options_extra": "<p>By default, the WP Object Cache exists in PHP memory for the length of the\nrequest (and is emptied at the end). Use a persistent object cache drop-in\nto persist the object cache between requests.<\/p>\n<p><a href=\"https:\/\/codex.wordpress.org\/Class_Reference\/WP_Object_Cache\">Read the codex article<\/a>\nfor more detail.<\/p>",
        "has_child": 1,
        "examples": "# Set cache.\n$ wp cache set my_key my_value my_group 300\nSuccess: Set object 'my_key' in group 'my_group'.\n\n# Get cache.\n$ wp cache get my_key my_group\nmy_value",
        "available": "",
        "synopsis": ""
    },
    "embed": {
        "title": "embed",
        "excerpt": "Inspects oEmbed providers, clears embed cache, and more.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "",
        "available": "",
        "synopsis": ""
    },
    "media": {
        "title": "media",
        "excerpt": "Imports files as attachments, regenerates thumbnails, or lists registered image sizes.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Re-generate all thumbnails, without confirmation.\n$ wp media regenerate --yes\nFound 3 images to regenerate.\n1\/3 Regenerated thumbnails for \"Sydney Harbor Bridge\" (ID 760).\n2\/3 Regenerated thumbnails for \"Boardwalk\" (ID 757).\n3\/3 Regenerated thumbnails for \"Sunburst Over River\" (ID 756).\nSuccess: Regenerated 3 of 3 images.\n\n# Import a local image and set it to be the featured image for a post.\n$ wp media import ~\/Downloads\/image.png --post_id=123 --title=\"A downloaded picture\" --featured_image\nSuccess: Imported file '\/home\/person\/Downloads\/image.png' as attachment ID 1753 and attached to post 123 as featured image.\n\n# List all registered image sizes\n$ wp media image-size\n+---------------------------+-------+--------+-------+\n| name                      | width | height | crop  |\n+---------------------------+-------+--------+-------+\n| full                      |       |        | N\/A   |\n| twentyfourteen-full-width | 1038  | 576    | hard  |\n| large                     | 1024  | 1024   | soft  |\n| medium_large              | 768   | 0      | soft  |\n| medium                    | 300   | 300    | soft  |\n| thumbnail                 | 150   | 150    | hard  |\n+---------------------------+-------+--------+-------+",
        "available": "",
        "synopsis": ""
    },
    "shell": {
        "title": "shell",
        "excerpt": "Opens an interactive PHP console for running and testing PHP code.",
        "options": "<dl><dt>[--basic]<\/dt><dd><p>Force the use of WP-CLI's built-in PHP REPL, even if the Boris or PsySH PHP REPLs are available.<\/p><\/dd><\/dl>",
        "options_extra": "<p><code>wp shell<\/code> allows you to evaluate PHP statements and expressions\ninteractively, from within a WordPress environment. Type a bit of code,\nhit enter, and see the code execute right before you. Because WordPress\nis loaded, you have access to all the functions, classes and globals\nthat you can use within a WordPress plugin, for example.<\/p>",
        "has_child": 0,
        "examples": "# Call get_bloginfo() to get the name of the site.\n$ wp shell\nwp> get_bloginfo( 'name' );\n=> string(6) \"WP-CLI\"",
        "available": "",
        "synopsis": "wp shell [--basic]"
    },
    "theme": {
        "title": "theme",
        "excerpt": "Manages themes, including installs, activations, and updates.",
        "options": "",
        "options_extra": "<p>See the WordPress <a href=\"https:\/\/developer.wordpress.org\/themes\/\">Theme Handbook<\/a> developer resource for more information on themes.<\/p>",
        "has_child": 1,
        "examples": "# Install the latest version of a theme from wordpress.org and activate\n$ wp theme install twentysixteen --activate\nInstalling Twenty Sixteen (1.2)\nDownloading install package from http:\/\/downloads.wordpress.org\/theme\/twentysixteen.1.2.zip...\nUnpacking the package...\nInstalling the theme...\nTheme installed successfully.\nActivating 'twentysixteen'...\nSuccess: Switched to 'Twenty Sixteen' theme.\n\n# Get details of an installed theme\n$ wp theme get twentysixteen --fields=name,title,version\n+---------+----------------+\n| Field   | Value          |\n+---------+----------------+\n| name    | Twenty Sixteen |\n| title   | Twenty Sixteen |\n| version | 1.2            |\n+---------+----------------+\n\n# Get status of theme\n$ wp theme status twentysixteen\nTheme twentysixteen details:\nName: Twenty Sixteen\nStatus: Active\nVersion: 1.2\nAuthor: the WordPress team",
        "available": "",
        "synopsis": ""
    },
    "config": {
        "title": "config",
        "excerpt": "Generates and reads the wp-config.php file.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "",
        "available": "",
        "synopsis": ""
    },
    "db-cli": {
        "title": "db cli",
        "excerpt": "Opens a MySQL console using credentials from wp-config.php",
        "options": "<dl><dt>[--database=&lt;database&gt;]<\/dt><dd><p>Use a specific database. Defaults to DB_NAME.<\/p><\/dd><dt>[--default-character-set=&lt;character-set&gt;]<\/dt><dd><p>Use a specific character set. Defaults to DB_CHARSET when defined.<\/p><\/dd><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysql. <a href=\"https:\/\/dev.mysql.com\/doc\/en\/mysql-command-options.html\">Refer to mysql docs<\/a>.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Open MySQL console\n$ wp db cli\nmysql>",
        "available": "",
        "synopsis": "wp db cli [--database=<database>] [--default-character-set=<character-set>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"
    },
    "export": {
        "title": "export",
        "excerpt": "Exports WordPress content to a WXR file.",
        "options": "<dl><dt>[--dir=&lt;dirname&gt;]<\/dt><dd><p>Full path to directory where WXR export files should be stored. Defaults to current working directory.<\/p><\/dd><dt>[--stdout]<\/dt><dd><p>Output the whole XML using standard output (incompatible with --dir=)<\/p><\/dd><dt>[--skip_comments]<\/dt><dd><p>Don't include comments in the WXR export file.<\/p><\/dd><dt>[--max_file_size=&lt;MB&gt;]<\/dt><dd><p>A single export file should have this many megabytes. -1 for unlimited. [Default: 15]<\/p><\/dd><dt>[--filename_format=&lt;format&gt;]<\/dt><dd><p>Use a custom format for export filenames. Defaults to '{site}.wordpress.{date}.{n}.xml'.<\/p><\/dd><dt>[--include_once=&lt;before_posts&gt;]<\/dt><dd><p>Include specified export section only in the first export file. Valid options are categories, tags, nav_menu_items, custom_taxonomies_terms. Separate multiple sections with a comma. Defaults to none.<\/p><\/dd><dt>[--allow_orphan_terms]<\/dt><dd><p>Export orphaned terms with <code>parent=0<\/code>, instead of throwing an exception. ## FILTERS<\/p><\/dd><dt>[--start_date=&lt;date&gt;]<\/dt><dd><p>Export only posts published after this date, in format YYYY-MM-DD.<\/p><\/dd><dt>[--end_date=&lt;date&gt;]<\/dt><dd><p>Export only posts published before this date, in format YYYY-MM-DD.<\/p><\/dd><dt>[--post_type=&lt;post-type&gt;]<\/dt><dd><p>Export only posts with this post_type. Separate multiple post types with a comma. [Default: any]<\/p><\/dd><dt>[--post_type__not_in=&lt;post-type&gt;]<\/dt><dd><p>Export all post types except those identified. Separate multiple post types with a comma. Defaults to none.<\/p><\/dd><dt>[--post__in=&lt;pid&gt;]<\/dt><dd><p>Export all posts specified as a comma-separated or space-separated list of IDs. Post's attachments won't be exported unless --with_attachments is specified.<\/p><\/dd><dt>[--with_attachments]<\/dt><dd><p>Force including attachments in case --post__in has been specified.<\/p><\/dd><dt>[--start_id=&lt;pid&gt;]<\/dt><dd><p>Export only posts with IDs greater than or equal to this post ID.<\/p><\/dd><dt>[--max_num_posts=&lt;num&gt;]<\/dt><dd><p>Export no more than <num> posts (excluding attachments).<\/p><\/dd><dt>[--author=&lt;author&gt;]<\/dt><dd><p>Export only posts by this author. Can be either user login or user ID.<\/p><\/dd><dt>[--category=&lt;name|id&gt;]<\/dt><dd><p>Export only posts in this category.<\/p><\/dd><dt>[--post_status=&lt;status&gt;]<\/dt><dd><p>Export only posts with this status.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Generates one or more WXR files containing authors, terms, posts,\ncomments, and attachments. WXR files do not include site configuration\n(options) or the attachment files themselves.<\/p>",
        "has_child": 0,
        "examples": "# Export posts published by the user between given start and end date\n$ wp export --dir=\/tmp\/ --user=admin --post_type=post --start_date=2011-01-01 --end_date=2011-12-31\nStarting export process...\nWriting to file \/tmp\/staging.wordpress.2016-05-24.000.xml\nSuccess: All done with export.\n\n# Export posts by IDs\n$ wp export --dir=\/tmp\/ --post__in=123,124,125\nStarting export process...\nWriting to file \/tmp\/staging.wordpress.2016-05-24.000.xml\nSuccess: All done with export.\n\n# Export a random subset of content\n$ wp export --post__in=\"$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)\"\nStarting export process...\nWriting to file \/var\/www\/example.com\/public_html\/staging.wordpress.2016-05-24.000.xml\nSuccess: All done with export.",
        "available": "",
        "synopsis": "wp export [--dir=<dirname>] [--stdout] [--skip_comments] [--max_file_size=<MB>] [--filename_format=<format>] [--include_once=<before_posts>] [--allow_orphan_terms] [--start_date=<date>] [--end_date=<date>] [--post_type=<post-type>] [--post_type__not_in=<post-type>] [--post__in=<pid>] [--with_attachments] [--start_id=<pid>] [--max_num_posts=<num>] [--author=<author>] [--category=<name|id>] [--post_status=<status>]"
    },
    "import": {
        "title": "import",
        "excerpt": "Imports content from a given WXR file.",
        "options": "<dl><dt>&lt;file&gt;...<\/dt><dd><p>Path to one or more valid WXR files for importing. Directories are also accepted.<\/p><\/dd><dt>--authors=&lt;authors&gt;<\/dt><dd><p>How the author mapping should be handled. Options are 'create', 'mapping.csv', or 'skip'. The first will create any non-existent users from the WXR file. The second will read author mapping associations from a CSV, or create a CSV for editing if the file path doesn't exist. The CSV requires two columns, and a header row like &quot;old_user_login,new_user_login&quot;. The last option will skip any author mapping.<\/p><\/dd><dt>[--skip=&lt;data-type&gt;]<\/dt><dd><p>Skip importing specific data. Supported options are: 'attachment' and 'image_resize' (skip time-consuming thumbnail generation).<\/p><\/dd><\/dl>",
        "options_extra": "<p>Provides a command line interface to the WordPress Importer plugin, for\nperforming data migrations.<\/p>\n<p>Use <code>define( 'IMPORT_DEBUG', true );<\/code> for more verbosity during importing.<\/p>",
        "has_child": 0,
        "examples": "# Import content from a WXR file\n$ wp import example.wordpress.2016-06-21.xml --authors=create\nStarting the import process...\nProcessing post #1 (\"Hello world!\") (post_type: post)\n-- 1 of 1\n-- Tue, 21 Jun 2016 05:31:12 +0000\n-- Imported post as post_id #1\nSuccess: Finished importing from 'example.wordpress.2016-06-21.xml' file.",
        "available": "",
        "synopsis": "wp import <file>... --authors=<authors> [--skip=<data-type>]"
    },
    "option": {
        "title": "option",
        "excerpt": "Retrieves and sets site options, including plugin and WordPress settings.",
        "options": "",
        "options_extra": "<p>See the <a href=\"https:\/\/developer.wordpress.org\/plugins\/settings\/settings-api\/\">Plugin Settings API<\/a> and the <a href=\"https:\/\/developer.wordpress.org\/themes\/customize-api\/\">Theme Options<\/a> for more information on adding customized options.<\/p>",
        "has_child": 1,
        "examples": "# Get site URL.\n$ wp option get siteurl\nhttp:\/\/example.com\n\n# Add option.\n$ wp option add my_option foobar\nSuccess: Added 'my_option' option.\n\n# Update option.\n$ wp option update my_option '{\"foo\": \"bar\"}' --format=json\nSuccess: Updated 'my_option' option.\n\n# Delete option.\n$ wp option delete my_option\nSuccess: Deleted 'my_option' option.",
        "available": "",
        "synopsis": ""
    },
    "plugin": {
        "title": "plugin",
        "excerpt": "Manages plugins, including installs, activations, and updates.",
        "options": "",
        "options_extra": "<p>See the WordPress <a href=\"https:\/\/developer.wordpress.org\/plugins\/\">Plugin Handbook<\/a> developer resource for more information on plugins.<\/p>",
        "has_child": 1,
        "examples": "# Activate plugin\n$ wp plugin activate hello\nPlugin 'hello' activated.\nSuccess: Activated 1 of 1 plugins.\n\n# Deactivate plugin\n$ wp plugin deactivate hello\nPlugin 'hello' deactivated.\nSuccess: Deactivated 1 of 1 plugins.\n\n# Delete plugin\n$ wp plugin delete hello\nDeleted 'hello' plugin.\nSuccess: Deleted 1 of 1 plugins.\n\n# Install the latest version from wordpress.org and activate\n$ wp plugin install bbpress --activate\nInstalling bbPress (2.5.9)\nDownloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.2.5.9.zip...\nUsing cached file '\/home\/vagrant\/.wp-cli\/cache\/plugin\/bbpress-2.5.9.zip'...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nActivating 'bbpress'...\nPlugin 'bbpress' activated.\nSuccess: Installed 1 of 1 plugins.",
        "available": "",
        "synopsis": ""
    },
    "server": {
        "title": "server",
        "excerpt": "Launches PHP's built-in web server for a specific WordPress installation.",
        "options": "<dl><dt>[--host=&lt;host&gt;]<\/dt><dd><p>The hostname to bind the server to. [Default: localhost]<\/p><\/dd><dt>[--port=&lt;port&gt;]<\/dt><dd><p>The port number to bind the server to. [Default: 8080]<\/p><\/dd><dt>[--docroot=&lt;path&gt;]<\/dt><dd><p>The path to use as the document root. If the path global parameter is set, the default value is it.<\/p><\/dd><dt>[--config=&lt;file&gt;]<\/dt><dd><p>Configure the server with a specific .ini file.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Uses <code>php -S<\/code> to launch a web server serving the WordPress webroot.\n<a href=\"http:\/\/php.net\/manual\/en\/features.commandline.webserver.php\">http:\/\/php.net\/manual\/en\/features.commandline.webserver.php<\/a><\/p>\n<p>Importantly, PHP's built-in web server doesn't support <code>.htaccess<\/code> files.\nIf this is a requirement, please use a more advanced web server.<\/p>",
        "has_child": 0,
        "examples": "# Make the instance available on any address (with port 8080)\n$ wp server --host=0.0.0.0\nPHP 5.6.9 Development Server started at Tue May 24 01:27:11 2016\nListening on http:\/\/0.0.0.0:8080\nDocument root is \/\nPress Ctrl-C to quit.\n\n# Run on port 80 (for multisite)\n$ wp server --host=localhost.localdomain --port=80\nPHP 5.6.9 Development Server started at Tue May 24 01:30:06 2016\nListening on http:\/\/localhost1.localdomain1:80\nDocument root is \/\nPress Ctrl-C to quit.\n\n# Configure the server with a specific .ini file\n$ wp server --config=development.ini\nPHP 7.0.9 Development Server started at Mon Aug 22 12:09:04 2016\nListening on http:\/\/localhost:8080\nDocument root is \/\nPress Ctrl-C to quit.",
        "available": "",
        "synopsis": "wp server [--host=<host>] [--port=<port>] [--docroot=<path>] [--config=<file>]"
    },
    "widget": {
        "title": "widget",
        "excerpt": "Manages widgets, including adding and moving them within sidebars.",
        "options": "",
        "options_extra": "<p>A <a href=\"https:\/\/developer.wordpress.org\/themes\/functionality\/widgets\/\">widget<\/a> adds content and features to a widget area (also called a <a href=\"https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/\">sidebar<\/a>).<\/p>",
        "has_child": 1,
        "examples": "# List widgets on a given sidebar\n$ wp widget list sidebar-1\n+----------+------------+----------+----------------------+\n| name     | id         | position | options              |\n+----------+------------+----------+----------------------+\n| meta     | meta-6     | 1        | {\"title\":\"Meta\"}     |\n| calendar | calendar-2 | 2        | {\"title\":\"Calendar\"} |\n+----------+------------+----------+----------------------+\n\n# Add a calendar widget to the second position on the sidebar\n$ wp widget add calendar sidebar-1 2\nSuccess: Added widget to sidebar.\n\n# Update option(s) associated with a given widget\n$ wp widget update calendar-1 --title=\"Calendar\"\nSuccess: Widget updated.\n\n# Delete one or more widgets entirely\n$ wp widget delete calendar-2 archive-1\nSuccess: 2 widgets removed from sidebar.",
        "available": "",
        "synopsis": ""
    },
    "cap-add": {
        "title": "cap add",
        "excerpt": "Adds capabilities to a given role.",
        "options": "<dl><dt>&lt;role&gt;<\/dt><dd><p>Key for the role.<\/p><\/dd><dt>&lt;cap&gt;...<\/dt><dd><p>One or more capabilities to add.<\/p><\/dd><dt>[--grant]<\/dt><dd><p>Adds the capability as an explicit boolean value, instead of implicitly defaulting to <code>true<\/code>. [Default: true]<div><span>Options:<\/span><ul><li><code>true<\/code><\/li><li><code>false<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Add 'spectate' capability to 'author' role.\n$ wp cap add author spectate\nSuccess: Added 1 capability to 'author' role.",
        "available": "",
        "synopsis": "wp cap add <role> <cap>... [--grant]"
    },
    "comment": {
        "title": "comment",
        "excerpt": "Creates, updates, deletes, and moderates comments.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Create a new comment.\n$ wp comment create --comment_post_ID=15 --comment_content=\"hello blog\" --comment_author=\"wp-cli\"\nSuccess: Created comment 932.\n\n# Update an existing comment.\n$ wp comment update 123 --comment_author='That Guy'\nSuccess: Updated comment 123.\n\n# Delete an existing comment.\n$ wp comment delete 1337 --force\nSuccess: Deleted comment 1337.\n\n# Trash all spam comments.\n$ wp comment delete $(wp comment list --status=spam --format=ids)\nSuccess: Trashed comment 264.\nSuccess: Trashed comment 262.",
        "available": "",
        "synopsis": ""
    },
    "db-drop": {
        "title": "db drop",
        "excerpt": "Deletes the existing database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Answer yes to the confirmation message.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>DROP_DATABASE<\/code> SQL statement using <code>DB_HOST<\/code>, <code>DB_NAME<\/code>,\n<code>DB_USER<\/code> and <code>DB_PASSWORD<\/code> database credentials specified in\nwp-config.php.<\/p>",
        "has_child": 0,
        "examples": "$ wp db drop --yes\nSuccess: Database dropped.",
        "available": "",
        "synopsis": "wp db drop [--dbuser=<value>] [--dbpass=<value>] [--yes] [--defaults]"
    },
    "db-size": {
        "title": "db size",
        "excerpt": "Displays the database name and size.",
        "options": "<dl><dt>[--size_format=&lt;format&gt;]<\/dt><dd><p>Display the database size only, as a bare number.<div><span>Options:<\/span><ul><li><code>b<\/code><\/li><li><code>kb<\/code><\/li><li><code>mb<\/code><\/li><li><code>gb<\/code><\/li><li><code>tb<\/code><\/li><li><code>B<\/code><\/li><li><code>KB<\/code><\/li><li><code>KiB<\/code><\/li><li><code>MB<\/code><\/li><li><code>MiB<\/code><\/li><li><code>GB<\/code><\/li><li><code>GiB<\/code><\/li><li><code>TB<\/code><\/li><li><code>TiB<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--tables]<\/dt><dd><p>Display each table name and size instead of the database size.<\/p><\/dd><dt>[--human-readable]<\/dt><dd><p>Display database sizes in human readable formats.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format.<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--scope=&lt;scope&gt;]<\/dt><dd><p>Can be all, global, ms_global, blog, or old tables. Defaults to all.<\/p><\/dd><dt>[--network]<\/dt><dd><p>List all the tables in a multisite install.<\/p><\/dd><dt>[--decimals=&lt;decimals&gt;]<\/dt><dd><p>Number of digits after decimal point. Defaults to 0.<\/p><\/dd><dt>[--all-tables-with-prefix]<\/dt><dd><p>List all tables that match the table prefix even if not registered on $wpdb. Overrides --network.<\/p><\/dd><dt>[--all-tables]<\/dt><dd><p>List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.<\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Ascending or Descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;orderby&gt;]<\/dt><dd><p>Order by fields. [Default: name]<div><span>Options:<\/span><ul><li><code>name<\/code><\/li><li><code>size<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Display the database name and size for <code>DB_NAME<\/code> specified in wp-config.php.\nThe size defaults to a human-readable number.<\/p>\n<p>Available size formats include:<\/p>\n<ul>\n<li>b (bytes)<\/li>\n<li>kb (kilobytes)<\/li>\n<li>mb (megabytes)<\/li>\n<li>gb (gigabytes)<\/li>\n<li>tb (terabytes)<\/li>\n<li>B   (ISO Byte setting, with no conversion)<\/li>\n<li>KB  (ISO Kilobyte setting, with 1 KB  = 1,000 B)<\/li>\n<li>KiB (ISO Kibibyte setting, with 1 KiB = 1,024 B)<\/li>\n<li>MB  (ISO Megabyte setting, with 1 MB  = 1,000 KB)<\/li>\n<li>MiB (ISO Mebibyte setting, with 1 MiB = 1,024 KiB)<\/li>\n<li>GB  (ISO Gigabyte setting, with 1 GB  = 1,000 MB)<\/li>\n<li>GiB (ISO Gibibyte setting, with 1 GiB = 1,024 MiB)<\/li>\n<li>TB  (ISO Terabyte setting, with 1 TB  = 1,000 GB)<\/li>\n<li>TiB (ISO Tebibyte setting, with 1 TiB = 1,024 GiB)<\/li>\n<\/ul>",
        "has_child": 0,
        "examples": "$ wp db size\n+-------------------+------+\n| Name              | Size |\n+-------------------+------+\n| wordpress_default | 6 MB |\n+-------------------+------+\n\n$ wp db size --tables\n+-----------------------+-------+\n| Name                  | Size  |\n+-----------------------+-------+\n| wp_users              | 64 KB |\n| wp_usermeta           | 48 KB |\n| wp_posts              | 80 KB |\n| wp_comments           | 96 KB |\n| wp_links              | 32 KB |\n| wp_options            | 32 KB |\n| wp_postmeta           | 48 KB |\n| wp_terms              | 48 KB |\n| wp_term_taxonomy      | 48 KB |\n| wp_term_relationships | 32 KB |\n| wp_termmeta           | 48 KB |\n| wp_commentmeta        | 48 KB |\n+-----------------------+-------+\n\n$ wp db size --size_format=b\n5865472\n\n$ wp db size --size_format=kb\n5728\n\n$ wp db size --size_format=mb\n6",
        "available": "",
        "synopsis": "wp db size [--size_format=<format>] [--tables] [--human-readable] [--format=<format>] [--scope=<scope>] [--network] [--decimals=<decimals>] [--all-tables-with-prefix] [--all-tables] [--order=<order>] [--orderby=<orderby>]"
    },
    "network": {
        "title": "network",
        "excerpt": "Perform network-wide operations.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Get a list of super-admins\n$ wp network meta get 1 site_admins\narray (\n0 => 'supervisor',\n)",
        "available": "",
        "synopsis": ""
    },
    "package": {
        "title": "package",
        "excerpt": "Lists, installs, and removes WP-CLI packages.",
        "options": "",
        "options_extra": "<p>WP-CLI packages are community-maintained projects built on WP-CLI. They can\ncontain WP-CLI commands, but they can also just extend WP-CLI in some way.<\/p>\n<p>Learn how to create your own command from the\n<a href=\"https:\/\/make.wordpress.org\/cli\/handbook\/commands-cookbook\/\">Commands Cookbook<\/a><\/p>",
        "has_child": 1,
        "examples": "# List installed packages\n$ wp package list\n+-----------------------+------------------------------------------+---------+----------+\n| name                  | description                              | authors | version  |\n+-----------------------+------------------------------------------+---------+----------+\n| wp-cli\/server-command | Start a development server for WordPress |         | dev-main |\n+-----------------------+------------------------------------------+---------+----------+\n\n# Install the latest development version of the package\n$ wp package install wp-cli\/server-command\nInstalling package wp-cli\/server-command (dev-main)\nUpdating \/home\/person\/.wp-cli\/packages\/composer.json to require the package...\nUsing Composer to install the package...\n---\nLoading composer repositories with package information\nUpdating dependencies\nResolving dependencies through SAT\nDependency resolution completed in 0.005 seconds\nAnalyzed 732 packages to resolve dependencies\nAnalyzed 1034 rules to resolve dependencies\n- Installing package\nWriting lock file\nGenerating autoload files\n---\nSuccess: Package installed.\n\n# Uninstall package\n$ wp package uninstall wp-cli\/server-command\nRemoving require statement from \/home\/person\/.wp-cli\/packages\/composer.json\nDeleting package directory \/home\/person\/.wp-cli\/packages\/vendor\/wp-cli\/server-command\nRegenerating Composer autoload.\nSuccess: Uninstalled package.",
        "available": "",
        "synopsis": ""
    },
    "rewrite": {
        "title": "rewrite",
        "excerpt": "Lists or flushes the site's rewrite rules, updates the permalink structure.",
        "options": "",
        "options_extra": "<p>See the WordPress <a href=\"https:\/\/codex.wordpress.org\/Rewrite_API\">Rewrite API<\/a> and\n<a href=\"https:\/\/codex.wordpress.org\/Class_Reference\/WP_Rewrite\">WP Rewrite<\/a> class reference.<\/p>",
        "has_child": 1,
        "examples": "# Flush rewrite rules\n$ wp rewrite flush\nSuccess: Rewrite rules flushed.\n\n# Update permalink structure\n$ wp rewrite structure '\/%year%\/%monthnum%\/%postname%'\nSuccess: Rewrite structure set.\n\n# List rewrite rules\n$ wp rewrite list --format=csv\nmatch,query,source\n^wp-json\/?$,index.php?rest_route=\/,other\n^wp-json\/(.*)?,index.php?rest_route=\/$matches[1],other\ncategory\/(.+?)\/feed\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\ncategory\/(.+?)\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\ncategory\/(.+?)\/embed\/?$,index.php?category_name=$matches[1]&embed=true,category",
        "available": "",
        "synopsis": ""
    },
    "sidebar": {
        "title": "sidebar",
        "excerpt": "Lists registered sidebars.",
        "options": "",
        "options_extra": "<p>A <a href=\"https:\/\/developer.wordpress.org\/themes\/functionality\/sidebars\/\">sidebar<\/a> is any widgetized area of your theme.<\/p>",
        "has_child": 1,
        "examples": "# List sidebars\n$ wp sidebar list --fields=name,id --format=csv\nname,id\n\"Widget Area\",sidebar-1\n\"Inactive Widgets\",wp_inactive_widgets",
        "available": "",
        "synopsis": ""
    },
    "cap-list": {
        "title": "cap list",
        "excerpt": "Lists capabilities for a given role.",
        "options": "<dl><dt>&lt;role&gt;<\/dt><dd><p>Key for the role.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: list]<div><span>Options:<\/span><ul><li><code>list<\/code><\/li><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--show-grant]<\/dt><dd><p>Display all capabilities defined for a role including grant. [Default: false]<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Display alphabetical list of Contributor capabilities.\n$ wp cap list 'contributor' | sort\ndelete_posts\nedit_posts\nlevel_0\nlevel_1\nread",
        "available": "",
        "synopsis": "wp cap list <role> [--format=<format>] [--show-grant]"
    },
    "cli-info": {
        "title": "cli info",
        "excerpt": "Prints various details about the WP-CLI environment.",
        "options": "<dl><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: list]<div><span>Options:<\/span><ul><li><code>list<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Helpful for diagnostic purposes, this command shares:<\/p>\n<ul>\n<li>OS information.<\/li>\n<li>Shell information.<\/li>\n<li>PHP binary used.<\/li>\n<li>PHP binary version.<\/li>\n<li>php.ini configuration file used (which is typically different than web).<\/li>\n<li>WP-CLI root dir: where WP-CLI is installed (if non-Phar install).<\/li>\n<li>WP-CLI global config: where the global config YAML file is located.<\/li>\n<li>WP-CLI project config: where the project config YAML file is located.<\/li>\n<li>WP-CLI version: currently installed version.<\/li>\n<\/ul>\n<p>See <a href=\"https:\/\/wp-cli.org\/config\/\">config docs<\/a> for more details on global\nand project config YAML files.<\/p>",
        "has_child": 0,
        "examples": "# Display various data about the CLI environment.\n$ wp cli info\nOS:  Linux 4.10.0-42-generic #46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64\nShell:   \/usr\/bin\/zsh\nPHP binary:  \/usr\/bin\/php\nPHP version: 7.1.12-1+ubuntu16.04.1+deb.sury.org+1\nphp.ini used:    \/etc\/php\/7.1\/cli\/php.ini\nWP-CLI root dir:    phar:\/\/wp-cli.phar\nWP-CLI packages dir:    \/home\/person\/.wp-cli\/packages\/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 1.5.0",
        "available": "",
        "synopsis": "wp cli info [--format=<format>]"
    },
    "db-check": {
        "title": "db check",
        "excerpt": "Checks the current status of the database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysqlcheck. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysqlcheck. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysqlcheck. <a href=\"https:\/\/dev.mysql.com\/doc\/en\/mysqlcheck.html\">Refer to mysqlcheck docs<\/a>.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>mysqlcheck<\/code> utility with <code>--check<\/code> using <code>DB_HOST<\/code>,\n<code>DB_NAME<\/code>, <code>DB_USER<\/code> and <code>DB_PASSWORD<\/code> database credentials\nspecified in wp-config.php.<\/p>\n<p><a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/check-table.html\">See docs<\/a>\nfor more details on the <code>CHECK TABLE<\/code> statement.<\/p>\n<p>This command does not check whether WordPress is installed;\nto do that run <code>wp core is-installed<\/code>.<\/p>",
        "has_child": 0,
        "examples": "$ wp db check\nSuccess: Database checked.",
        "available": "",
        "synopsis": "wp db check [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"
    },
    "db-clean": {
        "title": "db clean",
        "excerpt": "Removes all tables with `$table_prefix` from the database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Answer yes to the confirmation message.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>DROP_TABLE<\/code> for each table that has a <code>$table_prefix<\/code> as specified\nin wp-config.php.<\/p>",
        "has_child": 0,
        "examples": "# Delete all tables that match the current site prefix.\n$ wp db clean --yes\nSuccess: Tables dropped.",
        "available": "",
        "synopsis": "wp db clean [--dbuser=<value>] [--dbpass=<value>] [--yes] [--defaults]"
    },
    "db-query": {
        "title": "db query",
        "excerpt": "Executes a SQL query against the database.",
        "options": "<dl><dt>[&lt;sql&gt;]<\/dt><dd><p>A SQL query. If not passed, will try to read from STDIN.<\/p><\/dd><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysql. <a href=\"https:\/\/dev.mysql.com\/doc\/en\/mysql-command-options.html\">Refer to mysql docs<\/a>.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Executes an arbitrary SQL query using <code>DB_HOST<\/code>, <code>DB_NAME<\/code>, <code>DB_USER<\/code>\nand <code>DB_PASSWORD<\/code> database credentials specified in wp-config.php.<\/p>\n<p>Use the <code>--skip-column-names<\/code> MySQL argument to exclude the headers\nfrom a SELECT query. Pipe the output to remove the ASCII table\nentirely.<\/p>",
        "has_child": 0,
        "examples": "# Execute a query stored in a file\n$ wp db query < debug.sql\n\n# Query for a specific value in the database (pipe the result to remove the ASCII table borders)\n$ wp db query 'SELECT option_value FROM wp_options WHERE option_name=\"home\"' --skip-column-names\n+---------------------+\n| https:\/\/example.com |\n+---------------------+\n\n# Check all tables in the database\n$ wp db query \"CHECK TABLE $(wp db tables | paste -s -d, -);\"\n+---------------------------------------+-------+----------+----------+\n| Table                                 | Op    | Msg_type | Msg_text |\n+---------------------------------------+-------+----------+----------+\n| wordpress_dbase.wp_users              | check | status   | OK       |\n| wordpress_dbase.wp_usermeta           | check | status   | OK       |\n| wordpress_dbase.wp_posts              | check | status   | OK       |\n| wordpress_dbase.wp_comments           | check | status   | OK       |\n| wordpress_dbase.wp_links              | check | status   | OK       |\n| wordpress_dbase.wp_options            | check | status   | OK       |\n| wordpress_dbase.wp_postmeta           | check | status   | OK       |\n| wordpress_dbase.wp_terms              | check | status   | OK       |\n| wordpress_dbase.wp_term_taxonomy      | check | status   | OK       |\n| wordpress_dbase.wp_term_relationships | check | status   | OK       |\n| wordpress_dbase.wp_termmeta           | check | status   | OK       |\n| wordpress_dbase.wp_commentmeta        | check | status   | OK       |\n+---------------------------------------+-------+----------+----------+\n\n# Pass extra arguments through to MySQL\n$ wp db query 'SELECT * FROM wp_options WHERE option_name=\"home\"' --skip-column-names\n+---+------+------------------------------+-----+\n| 2 | home | http:\/\/wordpress-develop.dev | yes |\n+---+------+------------------------------+-----+",
        "available": "",
        "synopsis": "wp db query [<sql>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"
    },
    "db-reset": {
        "title": "db reset",
        "excerpt": "Removes all tables from the database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Answer yes to the confirmation message.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>DROP_DATABASE<\/code> and <code>CREATE_DATABASE<\/code> SQL statements using\n<code>DB_HOST<\/code>, <code>DB_NAME<\/code>, <code>DB_USER<\/code> and <code>DB_PASSWORD<\/code> database credentials\nspecified in wp-config.php.<\/p>",
        "has_child": 0,
        "examples": "$ wp db reset --yes\nSuccess: Database reset.",
        "available": "",
        "synopsis": "wp db reset [--dbuser=<value>] [--dbpass=<value>] [--yes] [--defaults]"
    },
    "language": {
        "title": "language",
        "excerpt": "Installs, activates, and manages language packs.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Install the Dutch core language pack.\n$ wp language core install nl_NL\nSuccess: Language installed.\n\n# Activate the Dutch core language pack.\n$ wp language core activate nl_NL\nSuccess: Language activated.\n\n# Install the Dutch language pack for Twenty Seventeen.\n$ wp language theme install twentyseventeen nl_NL\nSuccess: Language installed.\n\n# Install the Dutch language pack for Akismet.\n$ wp language plugin install akismet nl_NL\nSuccess: Language installed.",
        "available": "",
        "synopsis": ""
    },
    "post-get": {
        "title": "post get",
        "excerpt": "Gets details about a post.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the post to get.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole post, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Save the post content to a file\n$ wp post get 123 --field=content > file.txt",
        "available": "",
        "synopsis": "wp post get <id> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "scaffold": {
        "title": "scaffold",
        "excerpt": "Generates code for post types, taxonomies, plugins, child themes, etc.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Generate a new plugin with unit tests\n$ wp scaffold plugin sample-plugin\nSuccess: Created plugin files.\nSuccess: Created test files.\n\n# Generate theme based on _s\n$ wp scaffold _s sample-theme --theme_name=\"Sample Theme\" --author=\"John Doe\"\nSuccess: Created theme 'Sample Theme'.\n\n# Generate code for post type registration in given theme\n$ wp scaffold post-type movie --label=Movie --theme=simple-life\nSuccess: Created \/var\/www\/example.com\/public_html\/wp-content\/themes\/simple-life\/post-types\/movie.php",
        "available": "",
        "synopsis": ""
    },
    "taxonomy": {
        "title": "taxonomy",
        "excerpt": "Retrieves information about registered taxonomies.",
        "options": "",
        "options_extra": "<p>See references for <a href=\"https:\/\/developer.wordpress.org\/themes\/basics\/categories-tags-custom-taxonomies\/\">built-in taxonomies<\/a> and <a href=\"https:\/\/developer.wordpress.org\/plugins\/taxonomies\/working-with-custom-taxonomies\/\">custom taxonomies<\/a>.<\/p>",
        "has_child": 1,
        "examples": "# List all taxonomies with 'post' object type.\n$ wp taxonomy list --object_type=post --fields=name,public\n+-------------+--------+\n| name        | public |\n+-------------+--------+\n| category    | 1      |\n| post_tag    | 1      |\n| post_format | 1      |\n+-------------+--------+\n\n# Get capabilities of 'post_tag' taxonomy.\n$ wp taxonomy get post_tag --field=cap\n{\"manage_terms\":\"manage_categories\",\"edit_terms\":\"manage_categories\",\"delete_terms\":\"manage_categories\",\"assign_terms\":\"edit_posts\"}",
        "available": "",
        "synopsis": ""
    },
    "term-get": {
        "title": "term get",
        "excerpt": "Gets details about a term.",
        "options": "<dl><dt>&lt;taxonomy&gt;<\/dt><dd><p>Taxonomy of the term to get<\/p><\/dd><dt>&lt;term&gt;<\/dt><dd><p>ID or slug of the term to get<\/p><\/dd><dt>[--by=&lt;field&gt;]<\/dt><dd><p>Explicitly handle the term value as a slug or id. [Default: id]<div><span>Options:<\/span><ul><li><code>slug<\/code><\/li><li><code>id<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole term, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get details about a category with id 199.\n$ wp term get category 199 --format=json\n{\"term_id\":199,\"name\":\"Apple\",\"slug\":\"apple\",\"term_group\":0,\"term_taxonomy_id\":199,\"taxonomy\":\"category\",\"description\":\"A type of fruit\",\"parent\":0,\"count\":0,\"filter\":\"raw\"}\n\n# Get details about a category with slug apple.\n$ wp term get category apple --by=slug --format=json\n{\"term_id\":199,\"name\":\"Apple\",\"slug\":\"apple\",\"term_group\":0,\"term_taxonomy_id\":199,\"taxonomy\":\"category\",\"description\":\"A type of fruit\",\"parent\":0,\"count\":0,\"filter\":\"raw\"}",
        "available": "",
        "synopsis": "wp term get <taxonomy> <term> [--by=<field>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "user-get": {
        "title": "user get",
        "excerpt": "Gets details about a user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole user, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Get a specific subset of the user's fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get user\n$ wp user get 12 --field=login\nsupervisor\n\n# Get user and export to JSON file\n$ wp user get bob --format=json > bob.json",
        "available": "",
        "synopsis": "wp user get <user> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "cache-add": {
        "title": "cache add",
        "excerpt": "Adds a value to the object cache.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>Value to add to the key.<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><dt>[&lt;expiration&gt;]<\/dt><dd><p>Define how long to keep the value, in seconds. <code>0<\/code> means as long as possible. [Default: 0]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if a value already exists for the key, which means the value can't\nbe added.<\/p>",
        "has_child": 0,
        "examples": "# Add cache.\n$ wp cache add my_key my_group my_value 300\nSuccess: Added object 'my_key' in group 'my_value'.",
        "available": "",
        "synopsis": "wp cache add <key> <value> [<group>] [<expiration>]"
    },
    "cache-get": {
        "title": "cache get",
        "excerpt": "Gets a value from the object cache.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the value doesn't exist.<\/p>",
        "has_child": 0,
        "examples": "# Get cache.\n$ wp cache get my_key my_group\nmy_value",
        "available": "",
        "synopsis": "wp cache get <key> [<group>]"
    },
    "cache-set": {
        "title": "cache set",
        "excerpt": "Sets a value to the object cache, regardless of whether it already exists.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>Value to set on the key.<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><dt>[&lt;expiration&gt;]<\/dt><dd><p>Define how long to keep the value, in seconds. <code>0<\/code> means as long as possible. [Default: 0]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the value can't be set.<\/p>",
        "has_child": 0,
        "examples": "# Set cache.\n$ wp cache set my_key my_value my_group 300\nSuccess: Set object 'my_key' in group 'my_group'.",
        "available": "",
        "synopsis": "wp cache set <key> <value> [<group>] [<expiration>]"
    },
    "cli-alias": {
        "title": "cli alias",
        "excerpt": "Retrieves, sets and updates aliases for WordPress Installations.",
        "options": "",
        "options_extra": "<p>Aliases are shorthand references to WordPress installs. For instance,\n<code>@dev<\/code> could refer to a development install and <code>@prod<\/code> could refer to a production install.\nThis command gives you and option to add, update and delete, the registered aliases you have available.<\/p>",
        "has_child": 1,
        "examples": "# List alias information.\n$ wp cli alias list\nlist\n---\n@all: Run command against every registered alias.\n@local:\nuser: wpcli\npath: \/Users\/wpcli\/sites\/testsite\n\n# Get alias information.\n$ wp cli alias get @dev\nssh: dev@somedeve.env:12345\/home\/dev\/\n\n# Add alias.\n$ wp cli alias add @prod --set-ssh=login@host --set-path=\/path\/to\/wordpress\/install\/ --set-user=wpcli\nSuccess: Added '@prod' alias.\n\n# Update alias.\n$ wp cli alias update @prod --set-user=newuser --set-path=\/new\/path\/to\/wordpress\/install\/\nSuccess: Updated 'prod' alias.\n\n# Delete alias.\n$ wp cli alias delete @prod\nSuccess: Deleted '@prod' alias.",
        "available": "",
        "synopsis": ""
    },
    "cli-cache": {
        "title": "cli cache",
        "excerpt": "Manages the internal WP-CLI cache,.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Remove all cached files.\n$ wp cli cache clear\nSuccess: Cache cleared.\n\n# Remove all cached files except for the newest version of each one.\n$ wp cli cache prune\nSuccess: Cache pruned.",
        "available": "",
        "synopsis": ""
    },
    "cron-test": {
        "title": "cron test",
        "excerpt": "Tests the WP Cron spawning system and reports back its status.",
        "options": "",
        "options_extra": "<p>This command tests the spawning system by performing the following steps:<\/p>\n<ul>\n<li>Checks to see if the <code>DISABLE_WP_CRON<\/code> constant is set; errors if true\nbecause WP-Cron is disabled.<\/li>\n<li>Checks to see if the <code>ALTERNATE_WP_CRON<\/code> constant is set; warns if true.<\/li>\n<li>Attempts to spawn WP-Cron over HTTP; warns if non 200 response code is\nreturned.<\/li>\n<\/ul>",
        "has_child": 0,
        "examples": "# Cron test runs successfully.\n$ wp cron test\nSuccess: WP-Cron spawning is working as expected.",
        "available": "",
        "synopsis": ""
    },
    "db-create": {
        "title": "db create",
        "excerpt": "Creates a new database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>CREATE_DATABASE<\/code> SQL statement using <code>DB_HOST<\/code>, <code>DB_NAME<\/code>,\n<code>DB_USER<\/code> and <code>DB_PASSWORD<\/code> database credentials specified in\nwp-config.php.<\/p>",
        "has_child": 0,
        "examples": "$ wp db create\nSuccess: Database created.",
        "available": "",
        "synopsis": "wp db create [--dbuser=<value>] [--dbpass=<value>] [--defaults]"
    },
    "db-export": {
        "title": "db export",
        "excerpt": "Exports the database to a file or to STDOUT.",
        "options": "<dl><dt>[&lt;file&gt;]<\/dt><dd><p>The name of the SQL file to export. If '-', then outputs to STDOUT. If omitted, it will be '{dbname}-{Y-m-d}-{random-hash}.sql'.<\/p><\/dd><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysqldump. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysqldump. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysqldump. <a href=\"https:\/\/dev.mysql.com\/doc\/en\/mysqldump.html#mysqldump-option-summary\">Refer to mysqldump docs<\/a>.<\/p><\/dd><dt>[--tables=&lt;tables&gt;]<\/dt><dd><p>The comma separated list of specific tables to export. Excluding this parameter will export all tables in the database.<\/p><\/dd><dt>[--exclude_tables=&lt;tables&gt;]<\/dt><dd><p>The comma separated list of specific tables that should be skipped from exporting. Excluding this parameter will export all tables in the database.<\/p><\/dd><dt>[--include-tablespaces]<\/dt><dd><p>Skips adding the default --no-tablespaces option to mysqldump.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output filename for the exported database.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>mysqldump<\/code> utility using <code>DB_HOST<\/code>, <code>DB_NAME<\/code>, <code>DB_USER<\/code> and\n<code>DB_PASSWORD<\/code> database credentials specified in wp-config.php. Accepts any valid <code>mysqldump<\/code> flags.<\/p>",
        "has_child": 0,
        "examples": "# Export database with drop query included\n$ wp db export --add-drop-table\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Export certain tables\n$ wp db export --tables=wp_options,wp_users\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Export all tables matching a wildcard\n$ wp db export --tables=$(wp db tables 'wp_user*' --format=csv)\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Export all tables matching prefix\n$ wp db export --tables=$(wp db tables --all-tables-with-prefix --format=csv)\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Export certain posts without create table statements\n$ wp db export --no-create-info=true --tables=wp_posts --where=\"ID in (100,101,102)\"\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Export relating meta for certain posts without create table statements\n$ wp db export --no-create-info=true --tables=wp_postmeta --where=\"post_id in (100,101,102)\"\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Skip certain tables from the exported database\n$ wp db export --exclude_tables=wp_options,wp_users\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Skip all tables matching a wildcard from the exported database\n$ wp db export --exclude_tables=$(wp db tables 'wp_user*' --format=csv)\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Skip all tables matching prefix from the exported database\n$ wp db export --exclude_tables=$(wp db tables --all-tables-with-prefix --format=csv)\nSuccess: Exported to 'wordpress_dbase-db72bb5.sql'.\n\n# Export database to STDOUT.\n$ wp db export -\n-- MySQL dump 10.13  Distrib 5.7.19, for osx10.12 (x86_64)\n--\n-- Host: localhost    Database: wpdev\n-- ------------------------------------------------------\n-- Server version    5.7.19\n...",
        "available": "",
        "synopsis": "wp db export [<file>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--tables=<tables>] [--exclude_tables=<tables>] [--include-tablespaces] [--porcelain] [--defaults]"
    },
    "db-import": {
        "title": "db import",
        "excerpt": "Imports a database from a file or from STDIN.",
        "options": "<dl><dt>[&lt;file&gt;]<\/dt><dd><p>The name of the SQL file to import. If '-', then reads from STDIN. If omitted, it will look for '{dbname}.sql'.<\/p><\/dd><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysql. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysql. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysql. <a href=\"https:\/\/dev.mysql.com\/doc\/refman\/8.0\/en\/mysql-command-options.html\">Refer to mysql binary docs<\/a>.<\/p><\/dd><dt>[--skip-optimization]<\/dt><dd><p>When using an SQL file, do not include speed optimization such as disabling auto-commit and key checks.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs SQL queries using <code>DB_HOST<\/code>, <code>DB_NAME<\/code>, <code>DB_USER<\/code> and\n<code>DB_PASSWORD<\/code> database credentials specified in wp-config.php. This\ndoes not create database by itself and only performs whatever tasks are\ndefined in the SQL.<\/p>",
        "has_child": 0,
        "examples": "# Import MySQL from a file.\n$ wp db import wordpress_dbase.sql\nSuccess: Imported from 'wordpress_dbase.sql'.",
        "available": "",
        "synopsis": "wp db import [<file>] [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--skip-optimization] [--defaults]"
    },
    "db-prefix": {
        "title": "db prefix",
        "excerpt": "Displays the database table prefix.",
        "options": "",
        "options_extra": "<p>Display the database table prefix, as defined by the database handler's interpretation of the current site.<\/p>",
        "has_child": 0,
        "examples": "$ wp db prefix\nwp_",
        "available": "",
        "synopsis": ""
    },
    "db-repair": {
        "title": "db repair",
        "excerpt": "Repairs the database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysqlcheck. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysqlcheck. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysqlcheck. <a href=\"https:\/\/dev.mysql.com\/doc\/en\/mysqlcheck.html\">Refer to mysqlcheck docs<\/a>.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>mysqlcheck<\/code> utility with <code>--repair=true<\/code> using <code>DB_HOST<\/code>,\n<code>DB_NAME<\/code>, <code>DB_USER<\/code> and <code>DB_PASSWORD<\/code> database credentials\nspecified in wp-config.php.<\/p>\n<p><a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/repair-table.html\">See docs<\/a> for\nmore details on the <code>REPAIR TABLE<\/code> statement.<\/p>",
        "has_child": 0,
        "examples": "$ wp db repair\nSuccess: Database repaired.",
        "available": "",
        "synopsis": "wp db repair [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"
    },
    "db-search": {
        "title": "db search",
        "excerpt": "Finds a string in the database.",
        "options": "<dl><dt>&lt;search&gt;<\/dt><dd><p>String to search for. The search is case-insensitive by default.<\/p><\/dd><dt>[&lt;tables&gt;...]<\/dt><dd><p>One or more tables to search through for the string.<\/p><\/dd><dt>[--network]<\/dt><dd><p>Search through all the tables registered to $wpdb in a multisite install.<\/p><\/dd><dt>[--all-tables-with-prefix]<\/dt><dd><p>Search through all tables that match the registered table prefix, even if not registered on $wpdb. On one hand, sometimes plugins use tables without registering them to $wpdb. On another hand, this could return tables you don't expect. Overrides --network.<\/p><\/dd><dt>[--all-tables]<\/dt><dd><p>Search through ALL tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --network and --all-tables-with-prefix.<\/p><\/dd><dt>[--before_context=&lt;num&gt;]<\/dt><dd><p>Number of characters to display before the match. [Default: 40]<\/p><\/dd><dt>[--after_context=&lt;num&gt;]<\/dt><dd><p>Number of characters to display after the match. [Default: 40]<\/p><\/dd><dt>[--regex]<\/dt><dd><p>Runs the search as a regular expression (without delimiters). The search becomes case-sensitive (i.e. no PCRE flags are added). Delimiters must be escaped if they occur in the expression. Because the search is run on individual columns, you can use the <code>^<\/code> and <code>$<\/code> tokens to mark the start and end of a match, respectively.<\/p><\/dd><dt>[--regex-flags=&lt;regex-flags&gt;]<\/dt><dd><p>Pass PCRE modifiers to the regex search (e.g. 'i' for case-insensitivity).<\/p><\/dd><dt>[--regex-delimiter=&lt;regex-delimiter&gt;]<\/dt><dd><p>The delimiter to use for the regex. It must be escaped if it appears in the search string. The default value is the result of <code>chr(1)<\/code>.<\/p><\/dd><dt>[--table_column_once]<\/dt><dd><p>Output the 'table:column' line once before all matching row lines in the table column rather than before each matching row.<\/p><\/dd><dt>[--one_line]<\/dt><dd><p>Place the 'table:column' output on the same line as the row id and match ('table:column:id:match'). Overrides --table_column_once.<\/p><\/dd><dt>[--matches_only]<\/dt><dd><p>Only output the string matches (including context). No 'table:column's or row ids are outputted.<\/p><\/dd><dt>[--stats]<\/dt><dd><p>Output stats on the number of matches found, time taken, tables\/columns\/rows searched, tables skipped.<\/p><\/dd><dt>[--table_column_color=&lt;color_code&gt;]<\/dt><dd><p>Percent color code to use for the 'table:column' output. For a list of available percent color codes, see below. Default '%G' (bright green).<\/p><\/dd><dt>[--id_color=&lt;color_code&gt;]<\/dt><dd><p>Percent color code to use for the row id output. For a list of available percent color codes, see below. Default '%Y' (bright yellow).<\/p><\/dd><dt>[--match_color=&lt;color_code&gt;]<\/dt><dd><table>\n<thead>\n<tr>\n<th>Percent color code to use for the match (unless both before and after context are 0, when no color code is used). For a list of available percent color codes, see below. Default '%3%k' (black on a mustard background). The percent color codes available are:<\/th>\n<th>Code<\/th>\n<th>Color<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>%y<\/td>\n<td>Yellow (dark) (mustard)<\/td>\n<\/tr>\n<tr>\n<td>%g<\/td>\n<td>Green (dark)<\/td>\n<\/tr>\n<tr>\n<td>%b<\/td>\n<td>Blue (dark)<\/td>\n<\/tr>\n<tr>\n<td>%r<\/td>\n<td>Red (dark)<\/td>\n<\/tr>\n<tr>\n<td>%m<\/td>\n<td>Magenta (dark)<\/td>\n<\/tr>\n<tr>\n<td>%c<\/td>\n<td>Cyan (dark)<\/td>\n<\/tr>\n<tr>\n<td>%w<\/td>\n<td>White (dark) (light gray)<\/td>\n<\/tr>\n<tr>\n<td>%k<\/td>\n<td>Black<\/td>\n<\/tr>\n<tr>\n<td>%Y<\/td>\n<td>Yellow (bright)<\/td>\n<\/tr>\n<tr>\n<td>%G<\/td>\n<td>Green (bright)<\/td>\n<\/tr>\n<tr>\n<td>%B<\/td>\n<td>Blue (bright)<\/td>\n<\/tr>\n<tr>\n<td>%R<\/td>\n<td>Red (bright)<\/td>\n<\/tr>\n<tr>\n<td>%M<\/td>\n<td>Magenta (bright)<\/td>\n<\/tr>\n<tr>\n<td>%C<\/td>\n<td>Cyan (bright)<\/td>\n<\/tr>\n<tr>\n<td>%W<\/td>\n<td>White<\/td>\n<\/tr>\n<tr>\n<td>%K<\/td>\n<td>Black (bright) (dark gray)<\/td>\n<\/tr>\n<tr>\n<td>%3<\/td>\n<td>Yellow background (dark) (mustard)<\/td>\n<\/tr>\n<tr>\n<td>%2<\/td>\n<td>Green background (dark)<\/td>\n<\/tr>\n<tr>\n<td>%4<\/td>\n<td>Blue background (dark)<\/td>\n<\/tr>\n<tr>\n<td>%1<\/td>\n<td>Red background (dark)<\/td>\n<\/tr>\n<tr>\n<td>%5<\/td>\n<td>Magenta background (dark)<\/td>\n<\/tr>\n<tr>\n<td>%6<\/td>\n<td>Cyan background (dark)<\/td>\n<\/tr>\n<tr>\n<td>%7<\/td>\n<td>White background (dark) (light gray)<\/td>\n<\/tr>\n<tr>\n<td>%0<\/td>\n<td>Black background<\/td>\n<\/tr>\n<tr>\n<td>%8<\/td>\n<td>Reverse<\/td>\n<\/tr>\n<tr>\n<td>%U<\/td>\n<td>Underline<\/td>\n<\/tr>\n<tr>\n<td>%F<\/td>\n<td>Blink (unlikely to work) They can be concatenated. For instance, the default match color of black on a mustard (dark yellow) background <code>%3%k<\/code> can be made black on a bright yellow background with <code>%Y%0%8<\/code>.<\/td>\n<\/tr>\n<\/tbody>\n<\/table><\/dd><\/dl>",
        "options_extra": "<p>Searches through all of the text columns in a selection of database tables for a given string, Outputs colorized references to the string.<\/p>\n<p>Defaults to searching through all tables registered to $wpdb. On multisite, this default is limited to the tables for the current site.<\/p>",
        "has_child": 0,
        "examples": "# Search through the database for the 'wordpress-develop' string\n$ wp db search wordpress-develop\nwp_options:option_value\n1:http:\/\/wordpress-develop.dev\nwp_options:option_value\n1:https:\/\/example.com\/foo\n...\n\n# Search through a multisite database on the subsite 'foo' for the 'example.com' string\n$ wp db search example.com --url=example.com\/foo\nwp_2_comments:comment_author_url\n1:https:\/\/example.com\/\nwp_2_options:option_value\n...\n\n# Search through the database for the 'https?:\/\/' regular expression, printing stats.\n$ wp db search 'https?:\/\/' --regex --stats\nwp_comments:comment_author_url\n1:https:\/\/wordpress.org\/\n...\nSuccess: Found 99146 matches in 10.752s (10.559s searching). Searched 12 tables, 53 columns, 1358907 rows. 1 table skipped: wp_term_relationships.\n\n# SQL search database table 'wp_options' where 'option_name' match 'foo'\nwp db query 'SELECT * FROM wp_options WHERE option_name like \"%foo%\"' --skip-column-names\n+----+--------------+--------------------------------+-----+\n| 98 | foo_options  | a:1:{s:12:\"_multiwidget\";i:1;} | yes |\n| 99 | foo_settings | a:0:{}                         | yes |\n+----+--------------+--------------------------------+-----+\n\n# SQL search and delete records from database table 'wp_options' where 'option_name' match 'foo'\nwp db query \"DELETE from wp_options where option_id in ($(wp db query \"SELECT GROUP_CONCAT(option_id SEPARATOR ',') from wp_options where option_name like '%foo%';\" --silent --skip-column-names))\"",
        "available": "",
        "synopsis": "wp db search <search> [<tables>...] [--network] [--all-tables-with-prefix] [--all-tables] [--before_context=<num>] [--after_context=<num>] [--regex] [--regex-flags=<regex-flags>] [--regex-delimiter=<regex-delimiter>] [--table_column_once] [--one_line] [--matches_only] [--stats] [--table_column_color=<color_code>] [--id_color=<color_code>] [--match_color=<color_code>]"
    },
    "db-tables": {
        "title": "db tables",
        "excerpt": "Lists the database tables.",
        "options": "<dl><dt>[&lt;table&gt;...]<\/dt><dd><p>List tables based on wildcard search, e.g. 'wp_*_options' or 'wp_post?'.<\/p><\/dd><dt>[--scope=&lt;scope&gt;]<\/dt><dd><p>Can be all, global, ms_global, blog, or old tables. Defaults to all.<\/p><\/dd><dt>[--network]<\/dt><dd><p>List all the tables in a multisite install.<\/p><\/dd><dt>[--all-tables-with-prefix]<\/dt><dd><p>List all tables that match the table prefix even if not registered on $wpdb. Overrides --network.<\/p><\/dd><dt>[--all-tables]<\/dt><dd><p>List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: list]<div><span>Options:<\/span><ul><li><code>list<\/code><\/li><li><code>csv<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Defaults to all tables registered to the $wpdb database handler.<\/p>",
        "has_child": 0,
        "examples": "# List tables for a single site, without shared tables like 'wp_users'\n$ wp db tables --scope=blog --url=sub.example.com\nwp_3_posts\nwp_3_comments\nwp_3_options\nwp_3_postmeta\nwp_3_terms\nwp_3_term_taxonomy\nwp_3_term_relationships\nwp_3_termmeta\nwp_3_commentmeta\n\n# Export only tables for a single site\n$ wp db export --tables=$(wp db tables --url=sub.example.com --format=csv)\nSuccess: Exported to wordpress_dbase.sql",
        "available": "",
        "synopsis": "wp db tables [<table>...] [--scope=<scope>] [--network] [--all-tables-with-prefix] [--all-tables] [--format=<format>]"
    },
    "eval-file": {
        "title": "eval-file",
        "excerpt": "Loads and executes a PHP file.",
        "options": "<dl><dt>&lt;file&gt;<\/dt><dd><p>The path to the PHP file to execute.  Use '-' to run code from STDIN.<\/p><\/dd><dt>[&lt;arg&gt;...]<\/dt><dd><p>One or more positional arguments to pass to the file. They are placed in the $args variable.<\/p><\/dd><dt>[--skip-wordpress]<\/dt><dd><p>Load and execute file without loading WordPress.<\/p><\/dd><dt>[--use-include]<\/dt><dd><p>Process the provided file via include instead of evaluating its contents.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Note: because code is executed within a method, global variables need\nto be explicitly globalized.<\/p>",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp eval-file <file> [<arg>...] [--skip-wordpress] [--use-include]"
    },
    "menu-item": {
        "title": "menu item",
        "excerpt": "List, add, and delete items associated with a menu.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Add an existing post to an existing menu\n$ wp menu item add-post sidebar-menu 33 --title=\"Custom Test Post\"\nSuccess: Menu item added.\n\n# Create a new menu link item\n$ wp menu item add-custom sidebar-menu Apple http:\/\/apple.com\nSuccess: Menu item added.\n\n# Delete menu item\n$ wp menu item delete 45\nSuccess: Deleted 1 of 1 menu items.",
        "available": "",
        "synopsis": ""
    },
    "menu-list": {
        "title": "menu list",
        "excerpt": "Gets a list of menus.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>ids<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu list\n+---------+----------+----------+-----------+-------+\n| term_id | name     | slug     | locations | count |\n+---------+----------+----------+-----------+-------+\n| 200     | My Menu  | my-menu  |           | 0     |\n| 177     | Top Menu | top-menu | primary   | 7     |\n+---------+----------+----------+-----------+-------+",
        "available": "<p>These fields will be displayed by default for each menu:<\/p>\n<ul>\n<li>term_id<\/li>\n<li>name<\/li>\n<li>slug<\/li>\n<li>count<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>term_group<\/li>\n<li>term_taxonomy_id<\/li>\n<li>taxonomy<\/li>\n<li>description<\/li>\n<li>parent<\/li>\n<li>locations<\/li>\n<\/ul>",
        "synopsis": "wp menu list [--fields=<fields>] [--format=<format>]"
    },
    "post-edit": {
        "title": "post edit",
        "excerpt": "Launches system editor to edit post content.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the post to edit.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Launch system editor to edit post\n$ wp post edit 123",
        "available": "",
        "synopsis": "wp post edit <id>"
    },
    "post-list": {
        "title": "post list",
        "excerpt": "Gets a list of posts.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>One or more args to pass to WP_Query.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each post.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Display posts based on all arguments supported by <a href=\"https:\/\/developer.wordpress.org\/reference\/classes\/wp_query\/\">WP_Query()<\/a>.\nOnly shows post types marked as post by default.<\/p>",
        "has_child": 0,
        "examples": "# List post\n$ wp post list --field=ID\n568\n829\n1329\n1695\n\n# List posts in JSON\n$ wp post list --post_type=post --posts_per_page=5 --format=json\n[{\"ID\":1,\"post_title\":\"Hello world!\",\"post_name\":\"hello-world\",\"post_date\":\"2015-06-20 09:00:10\",\"post_status\":\"publish\"},{\"ID\":1178,\"post_title\":\"Markup: HTML Tags and Formatting\",\"post_name\":\"markup-html-tags-and-formatting\",\"post_date\":\"2013-01-11 20:22:19\",\"post_status\":\"draft\"}]\n\n# List all pages\n$ wp post list --post_type=page --fields=post_title,post_status\n+-------------+-------------+\n| post_title  | post_status |\n+-------------+-------------+\n| Sample Page | publish     |\n+-------------+-------------+\n\n# List ids of all pages and posts\n$ wp post list --post_type=page,post --format=ids\n15 25 34 37 198\n\n# List given posts\n$ wp post list --post__in=1,3\n+----+--------------+-------------+---------------------+-------------+\n| ID | post_title   | post_name   | post_date           | post_status |\n+----+--------------+-------------+---------------------+-------------+\n| 3  | Lorem Ipsum  | lorem-ipsum | 2016-06-01 14:34:36 | publish     |\n| 1  | Hello world! | hello-world | 2016-06-01 14:31:12 | publish     |\n+----+--------------+-------------+---------------------+-------------+\n\n# List given post by a specific author\n$ wp post list --author=2\n+----+-------------------+-------------------+---------------------+-------------+\n| ID | post_title        | post_name         | post_date           | post_status |\n+----+-------------------+-------------------+---------------------+-------------+\n| 14 | New documentation | new-documentation | 2021-06-18 21:05:11 | publish     |\n+----+-------------------+-------------------+---------------------+-------------+",
        "available": "<p>These fields will be displayed by default for each post:<\/p>\n<ul>\n<li>ID<\/li>\n<li>post_title<\/li>\n<li>post_name<\/li>\n<li>post_date<\/li>\n<li>post_status<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>post_author<\/li>\n<li>post_date_gmt<\/li>\n<li>post_content<\/li>\n<li>post_excerpt<\/li>\n<li>comment_status<\/li>\n<li>ping_status<\/li>\n<li>post_password<\/li>\n<li>to_ping<\/li>\n<li>pinged<\/li>\n<li>post_modified<\/li>\n<li>post_modified_gmt<\/li>\n<li>post_content_filtered<\/li>\n<li>post_parent<\/li>\n<li>guid<\/li>\n<li>menu_order<\/li>\n<li>post_type<\/li>\n<li>post_mime_type<\/li>\n<li>comment_count<\/li>\n<li>filter<\/li>\n<li>url<\/li>\n<\/ul>",
        "synopsis": "wp post list [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "post-meta": {
        "title": "post meta",
        "excerpt": "Adds, updates, deletes, and lists post custom fields.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set post meta\n$ wp post meta set 123 _wp_page_template about.php\nSuccess: Updated custom field '_wp_page_template'.\n\n# Get post meta\n$ wp post meta get 123 _wp_page_template\nabout.php\n\n# Update post meta\n$ wp post meta update 123 _wp_page_template contact.php\nSuccess: Updated custom field '_wp_page_template'.\n\n# Delete post meta\n$ wp post meta delete 123 _wp_page_template\nSuccess: Deleted custom field.",
        "available": "",
        "synopsis": ""
    },
    "post-term": {
        "title": "post term",
        "excerpt": "Adds, updates, removes, and lists post terms.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set category post term `test` to the post ID 123\n$ wp post term set 123 test category\nSuccess: Set term.\n\n# Set category post terms `test` and `apple` to the post ID 123\n$ wp post term set 123 test apple category\nSuccess: Set terms.\n\n# List category post terms for the post ID 123\n$ wp post term list 123 category --fields=term_id,slug\n+---------+-------+\n| term_id | slug  |\n+---------+-------+\n| 2       | apple |\n| 3       | test  |\n+----------+------+\n\n# Remove category post terms `test` and `apple` for the post ID 123\n$ wp post term remove 123 category test apple\nSuccess: Removed terms.",
        "available": "",
        "synopsis": ""
    },
    "post-type": {
        "title": "post-type",
        "excerpt": "Retrieves details on the site's registered post types.",
        "options": "",
        "options_extra": "<p>Get information on WordPress' built-in and the site's <a href=\"https:\/\/developer.wordpress.org\/plugins\/post-types\/\">custom post types<\/a>.<\/p>",
        "has_child": 1,
        "examples": "# Get details about a post type\n$ wp post-type get page --fields=name,label,hierarchical --format=json\n{\"name\":\"page\",\"label\":\"Pages\",\"hierarchical\":true}\n\n# List post types with 'post' capability type\n$ wp post-type list --capability_type=post --fields=name,public\n+---------------+--------+\n| name          | public |\n+---------------+--------+\n| post          | 1      |\n| attachment    | 1      |\n| revision      |        |\n| nav_menu_item |        |\n+---------------+--------+",
        "available": "",
        "synopsis": ""
    },
    "role-list": {
        "title": "role list",
        "excerpt": "Lists all roles.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List roles.\n$ wp role list --fields=role --format=csv\nrole\nadministrator\neditor\nauthor\ncontributor\nsubscriber",
        "available": "<p>These fields will be displayed by default for each role:<\/p>\n<ul>\n<li>name<\/li>\n<li>role<\/li>\n<\/ul>\n<p>There are no optional fields.<\/p>",
        "synopsis": "wp role list [--fields=<fields>] [--field=<field>] [--format=<format>]"
    },
    "site-list": {
        "title": "site list",
        "excerpt": "Lists all sites in a multisite installation.",
        "options": "<dl><dt>[--network=&lt;id&gt;]<\/dt><dd><p>The network to which the sites belong.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter by one or more fields (see &quot;Available Fields&quot; section). However, 'url' isn't an available filter, as it comes from 'home' in wp_options.<\/p><\/dd><dt>[--site__in=&lt;value&gt;]<\/dt><dd><p>Only list the sites with these blog_id values (comma-separated).<\/p><\/dd><dt>[--site_user=&lt;value&gt;]<\/dt><dd><p>Only list the sites with this user.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each site.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Comma-separated list of fields to show.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Output a simple list of site URLs\n$ wp site list --field=url\nhttp:\/\/www.example.com\/\nhttp:\/\/www.example.com\/subdir\/",
        "available": "<p>These fields will be displayed by default for each site:<\/p>\n<ul>\n<li>blog_id<\/li>\n<li>url<\/li>\n<li>last_updated<\/li>\n<li>registered<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>site_id<\/li>\n<li>domain<\/li>\n<li>path<\/li>\n<li>public<\/li>\n<li>archived<\/li>\n<li>mature<\/li>\n<li>spam<\/li>\n<li>deleted<\/li>\n<li>lang_id<\/li>\n<\/ul>",
        "synopsis": "wp site list [--network=<id>] [--<field>=<value>] [--site__in=<value>] [--site_user=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "site-meta": {
        "title": "site meta",
        "excerpt": "Adds, updates, deletes, and lists site custom fields.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set site meta\n$ wp site meta set 123 bio \"Mary is a WordPress developer.\"\nSuccess: Updated custom field 'bio'.\n\n# Get site meta\n$ wp site meta get 123 bio\nMary is a WordPress developer.\n\n# Update site meta\n$ wp site meta update 123 bio \"Mary is an awesome WordPress developer.\"\nSuccess: Updated custom field 'bio'.\n\n# Delete site meta\n$ wp site meta delete 123 bio\nSuccess: Deleted custom field.",
        "available": "",
        "synopsis": ""
    },
    "site-spam": {
        "title": "site spam",
        "excerpt": "Marks one or more sites as spam.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to be marked as spam. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be marked as spam. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site spam 123\nSuccess: Site 123 marked as spam.",
        "available": "",
        "synopsis": "wp site spam [<id>...] [--slug=<slug>]"
    },
    "term-list": {
        "title": "term list",
        "excerpt": "Lists terms in a taxonomy.",
        "options": "<dl><dt>&lt;taxonomy&gt;...<\/dt><dd><p>List terms of one or more taxonomies<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter by one or more fields (see get_terms() $args parameter for a list of fields).<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each term.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List post categories\n$ wp term list category --format=csv\nterm_id,term_taxonomy_id,name,slug,description,parent,count\n2,2,aciform,aciform,,0,1\n3,3,antiquarianism,antiquarianism,,0,1\n4,4,arrangement,arrangement,,0,1\n5,5,asmodeus,asmodeus,,0,1\n\n# List post tags\n$ wp term list post_tag --fields=name,slug\n+-----------+-------------+\n| name      | slug        |\n+-----------+-------------+\n| 8BIT      | 8bit        |\n| alignment | alignment-2 |\n| Articles  | articles    |\n| aside     | aside       |\n+-----------+-------------+",
        "available": "<p>These fields will be displayed by default for each term:<\/p>\n<ul>\n<li>term_id<\/li>\n<li>term_taxonomy_id<\/li>\n<li>name<\/li>\n<li>slug<\/li>\n<li>description<\/li>\n<li>parent<\/li>\n<li>count<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>url<\/li>\n<\/ul>",
        "synopsis": "wp term list <taxonomy>... [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "term-meta": {
        "title": "term meta",
        "excerpt": "Adds, updates, deletes, and lists term custom fields.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set term meta\n$ wp term meta set 123 bio \"Mary is a WordPress developer.\"\nSuccess: Updated custom field 'bio'.\n\n# Get term meta\n$ wp term meta get 123 bio\nMary is a WordPress developer.\n\n# Update term meta\n$ wp term meta update 123 bio \"Mary is an awesome WordPress developer.\"\nSuccess: Updated custom field 'bio'.\n\n# Delete term meta\n$ wp term meta delete 123 bio\nSuccess: Deleted custom field.",
        "available": "",
        "synopsis": ""
    },
    "theme-get": {
        "title": "theme get",
        "excerpt": "Gets details about a theme.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>The theme to get.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole theme, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp theme get twentysixteen --fields=name,title,version\n+---------+----------------+\n| Field   | Value          |\n+---------+----------------+\n| name    | Twenty Sixteen |\n| title   | Twenty Sixteen |\n| version | 1.2            |\n+---------+----------------+",
        "available": "",
        "synopsis": "wp theme get <theme> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "theme-mod": {
        "title": "theme mod",
        "excerpt": "Sets, gets, and removes theme mods.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set the 'background_color' theme mod to '000000'.\n$ wp theme mod set background_color 000000\nSuccess: Theme mod background_color set to 000000\n\n# Get single theme mod in JSON format.\n$ wp theme mod get background_color --format=json\n[{\"key\":\"background_color\",\"value\":\"dd3333\"}]\n\n# Remove all theme mods.\n$ wp theme mod remove --all\nSuccess: Theme mods removed.",
        "available": "",
        "synopsis": ""
    },
    "transient": {
        "title": "transient",
        "excerpt": "Adds, gets, and deletes entries in the WordPress Transient Cache.",
        "options": "",
        "options_extra": "<p>By default, the transient cache uses the WordPress database to persist values\nbetween requests. On a single site installation, values are stored in the\n<code>wp_options<\/code> table. On a multisite installation, values are stored in the\n<code>wp_options<\/code> or the <code>wp_sitemeta<\/code> table, depending on use of the <code>--network<\/code>\nflag.<\/p>\n<p>When a persistent object cache drop-in is installed (e.g. Redis or Memcached),\nthe transient cache skips the database and simply wraps the WP Object Cache.<\/p>",
        "has_child": 1,
        "examples": "# Set transient.\n$ wp transient set sample_key \"test data\" 3600\nSuccess: Transient added.\n\n# Get transient.\n$ wp transient get sample_key\ntest data\n\n# Delete transient.\n$ wp transient delete sample_key\nSuccess: Transient deleted.\n\n# Delete expired transients.\n$ wp transient delete --expired\nSuccess: 12 expired transients deleted from the database.\n\n# Delete all transients.\n$ wp transient delete --all\nSuccess: 14 transients deleted from the database.",
        "available": "",
        "synopsis": ""
    },
    "user-list": {
        "title": "user list",
        "excerpt": "Lists users.",
        "options": "<dl><dt>[--role=&lt;role&gt;]<\/dt><dd><p>Only display users with a certain role.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Control output by one or more arguments of WP_User_Query().<\/p><\/dd><dt>[--network]<\/dt><dd><p>List all users in the network for multisite.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each user.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Display WordPress users based on all arguments supported by\n<a href=\"https:\/\/developer.wordpress.org\/reference\/classes\/wp_user_query\/prepare_query\/\">WP_User_Query()<\/a>.<\/p>",
        "has_child": 0,
        "examples": "# List user IDs\n$ wp user list --field=ID\n1\n\n# List users with administrator role\n$ wp user list --role=administrator --format=csv\nID,user_login,display_name,user_email,user_registered,roles\n1,supervisor,supervisor,supervisor@gmail.com,\"2016-06-03 04:37:00\",administrator\n\n# List users with only given fields\n$ wp user list --fields=display_name,user_email --format=json\n[{\"display_name\":\"supervisor\",\"user_email\":\"supervisor@gmail.com\"}]\n\n# List users ordered by the 'last_activity' meta value.\n$ wp user list --meta_key=last_activity --orderby=meta_value_num",
        "available": "<p>These fields will be displayed by default for each user:<\/p>\n<ul>\n<li>ID<\/li>\n<li>user_login<\/li>\n<li>display_name<\/li>\n<li>user_email<\/li>\n<li>user_registered<\/li>\n<li>roles<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>user_pass<\/li>\n<li>user_nicename<\/li>\n<li>user_url<\/li>\n<li>user_activation_key<\/li>\n<li>user_status<\/li>\n<li>spam<\/li>\n<li>deleted<\/li>\n<li>caps<\/li>\n<li>cap_key<\/li>\n<li>allcaps<\/li>\n<li>filter<\/li>\n<li>url<\/li>\n<\/ul>",
        "synopsis": "wp user list [--role=<role>] [--<field>=<value>] [--network] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "user-meta": {
        "title": "user meta",
        "excerpt": "Adds, updates, deletes, and lists user custom fields.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Add user meta\n$ wp user meta add 123 bio \"Mary is an WordPress developer.\"\nSuccess: Added custom field.\n\n# List user meta\n$ wp user meta list 123 --keys=nickname,description,wp_capabilities\n+---------+-----------------+--------------------------------+\n| user_id | meta_key        | meta_value                     |\n+---------+-----------------+--------------------------------+\n| 123     | nickname        | supervisor                     |\n| 123     | description     | Mary is a WordPress developer. |\n| 123     | wp_capabilities | {\"administrator\":true}         |\n+---------+-----------------+--------------------------------+\n\n# Update user meta\n$ wp user meta update 123 bio \"Mary is an awesome WordPress developer.\"\nSuccess: Updated custom field 'bio'.\n\n# Delete user meta\n$ wp user meta delete 123 bio\nSuccess: Deleted custom field.",
        "available": "",
        "synopsis": ""
    },
    "user-spam": {
        "title": "user spam",
        "excerpt": "Marks one or more users as spam on multisite.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>One or more IDs of users to mark as spam.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Mark user as spam.\n$ wp user spam 123\nUser 123 marked as spam.\nSuccess: Spammed 1 of 1 users.",
        "available": "",
        "synopsis": "wp user spam <id>..."
    },
    "user-term": {
        "title": "user term",
        "excerpt": "Adds, updates, removes, and lists user terms.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set user terms\n$ wp user term set 123 test category\nSuccess: Set terms.",
        "available": "",
        "synopsis": ""
    },
    "cache-decr": {
        "title": "cache decr",
        "excerpt": "Decrements a value in the object cache.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>[&lt;offset&gt;]<\/dt><dd><p>The amount by which to decrement the item's value. [Default: 1]<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the value can't be decremented.<\/p>",
        "has_child": 0,
        "examples": "# Decrease cache value.\n$ wp cache decr my_key 2 my_group\n48",
        "available": "",
        "synopsis": "wp cache decr <key> [<offset>] [<group>]"
    },
    "cache-incr": {
        "title": "cache incr",
        "excerpt": "Increments a value in the object cache.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>[&lt;offset&gt;]<\/dt><dd><p>The amount by which to increment the item's value. [Default: 1]<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the value can't be incremented.<\/p>",
        "has_child": 0,
        "examples": "# Increase cache value.\n$ wp cache incr my_key 2 my_group\n50",
        "available": "",
        "synopsis": "wp cache incr <key> [<offset>] [<group>]"
    },
    "cache-type": {
        "title": "cache type",
        "excerpt": "Attempts to determine which object cache is being used.",
        "options": "",
        "options_extra": "<p>Note that the guesses made by this function are based on the\nWP_Object_Cache classes that define the 3rd party object cache extension.\nChanges to those classes could render problems with this function's\nability to determine which object cache is being used.<\/p>",
        "has_child": 0,
        "examples": "# Check cache type.\n$ wp cache type\nDefault",
        "available": "",
        "synopsis": ""
    },
    "cap-remove": {
        "title": "cap remove",
        "excerpt": "Removes capabilities from a given role.",
        "options": "<dl><dt>&lt;role&gt;<\/dt><dd><p>Key for the role.<\/p><\/dd><dt>&lt;cap&gt;...<\/dt><dd><p>One or more capabilities to remove.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Remove 'spectate' capability from 'author' role.\n$ wp cap remove author spectate\nSuccess: Removed 1 capability from 'author' role.",
        "available": "",
        "synopsis": "wp cap remove <role> <cap>..."
    },
    "cli-update": {
        "title": "cli update",
        "excerpt": "Updates WP-CLI to the latest release.",
        "options": "<dl><dt>[--patch]<\/dt><dd><p>Only perform patch updates.<\/p><\/dd><dt>[--minor]<\/dt><dd><p>Only perform minor updates.<\/p><\/dd><dt>[--major]<\/dt><dd><p>Only perform major updates.<\/p><\/dd><dt>[--stable]<\/dt><dd><p>Update to the latest stable release. Skips update check.<\/p><\/dd><dt>[--nightly]<\/dt><dd><p>Update to the latest built version of the master branch. Potentially unstable.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Do not prompt for confirmation.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Default behavior is to check the releases API for the newest stable\nversion, and prompt if one is available.<\/p>\n<p>Use <code>--stable<\/code> to install or reinstall the latest stable version.<\/p>\n<p>Use <code>--nightly<\/code> to install the latest built version of the master branch.\nWhile not recommended for production, nightly contains the latest and\ngreatest, and should be stable enough for development and staging\nenvironments.<\/p>\n<p>Only works for the Phar installation mechanism.<\/p>",
        "has_child": 0,
        "examples": "# Update CLI.\n$ wp cli update\nYou have version 0.24.0. Would you like to update to 0.24.1? [y\/n] y\nDownloading from https:\/\/github.com\/wp-cli\/wp-cli\/releases\/download\/v0.24.1\/wp-cli-0.24.1.phar...\nNew version works. Proceeding to replace.\nSuccess: Updated WP-CLI to 0.24.1.",
        "available": "",
        "synopsis": "wp cli update [--patch] [--minor] [--major] [--stable] [--nightly] [--yes] [--insecure]"
    },
    "config-get": {
        "title": "config get",
        "excerpt": "Gets the value of a specific constant or variable defined in wp-config.php file.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name of the wp-config.php constant or variable.<\/p><\/dd><dt>[--type=&lt;type&gt;]<\/dt><dd><p>Type of config value to retrieve. Defaults to 'all'. [Default: all]<div><span>Options:<\/span><ul><li><code>constant<\/code><\/li><li><code>variable<\/code><\/li><li><code>all<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. Dotenv is limited to non-object values. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>dotenv<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be read. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get the table_prefix as defined in wp-config.php file.\n$ wp config get table_prefix\nwp_",
        "available": "",
        "synopsis": "wp config get <name> [--type=<type>] [--format=<format>] [--config-file=<path>]"
    },
    "config-has": {
        "title": "config has",
        "excerpt": "Checks whether a specific constant or variable exists in the wp-config.php file.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name of the wp-config.php constant or variable.<\/p><\/dd><dt>[--type=&lt;type&gt;]<\/dt><dd><p>Type of the config value to set. Defaults to 'all'. [Default: all]<div><span>Options:<\/span><ul><li><code>constant<\/code><\/li><li><code>variable<\/code><\/li><li><code>all<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be checked. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Check whether the DB_PASSWORD constant exists in the wp-config.php file.\n$ wp config has DB_PASSWORD",
        "available": "",
        "synopsis": "wp config has <name> [--type=<type>] [--config-file=<path>]"
    },
    "config-set": {
        "title": "config set",
        "excerpt": "Sets the value of a specific constant or variable defined in wp-config.php file.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name of the wp-config.php constant or variable.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>Value to set the wp-config.php constant or variable to.<\/p><\/dd><dt>[--add]<\/dt><dd><p>Add the value if it doesn't exist yet. This is the default behavior, override with --no-add.<\/p><\/dd><dt>[--raw]<\/dt><dd><p>Place the value into the wp-config.php file as is, instead of as a quoted string.<\/p><\/dd><dt>[--anchor=&lt;anchor&gt;]<\/dt><dd><p>Anchor string where additions of new values are anchored around. Defaults to &quot;\/* That's all, stop editing!&quot;. The special case &quot;EOF&quot; string uses the end of the file as the anchor.<\/p><\/dd><dt>[--placement=&lt;placement&gt;]<\/dt><dd><p>Where to place the new values in relation to the anchor string. [Default: 'before']<div><span>Options:<\/span><ul><li><code>before<\/code><\/li><li><code>after<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--separator=&lt;separator&gt;]<\/dt><dd><p>Separator string to put between an added value and its anchor string. The following escape sequences will be recognized and properly interpreted: '\\n' =&gt; newline, '\\r' =&gt; carriage return, '\\t' =&gt; tab. Defaults to a single EOL (&quot;\\n&quot; on *nix and &quot;\\r\\n&quot; on Windows).<\/p><\/dd><dt>[--type=&lt;type&gt;]<\/dt><dd><p>Type of the config value to set. Defaults to 'all'. [Default: all]<div><span>Options:<\/span><ul><li><code>constant<\/code><\/li><li><code>variable<\/code><\/li><li><code>all<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be modified. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Set the WP_DEBUG constant to true.\n$ wp config set WP_DEBUG true --raw",
        "available": "",
        "synopsis": "wp config set <name> <value> [--add] [--raw] [--anchor=<anchor>] [--placement=<placement>] [--separator=<separator>] [--type=<type>] [--config-file=<path>]"
    },
    "cron-event": {
        "title": "cron event",
        "excerpt": "Schedules, runs, and deletes WP-Cron events.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Schedule a new cron event\n$ wp cron event schedule cron_test\nSuccess: Scheduled event with hook 'cron_test' for 2016-05-31 10:19:16 GMT.\n\n# Run all cron events due right now\n$ wp cron event run --due-now\nSuccess: Executed a total of 2 cron events.\n\n# Delete all scheduled cron events for the given hook\n$ wp cron event delete cron_test\nSuccess: Deleted 2 instances of the cron event 'cron_test'.\n\n# List scheduled cron events in JSON\n$ wp cron event list --fields=hook,next_run --format=json\n[{\"hook\":\"wp_version_check\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_plugins\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_themes\",\"next_run\":\"2016-05-31 10:15:14\"}]",
        "available": "",
        "synopsis": ""
    },
    "db-columns": {
        "title": "db columns",
        "excerpt": "Displays information about a given table.",
        "options": "<dl><dt>&lt;table&gt;<\/dt><dd><p>Name of the database table.<\/p><\/dd><dt>[--format]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp db columns wp_posts\n+-----------------------+---------------------+------+-----+---------------------+----------------+\n|         Field         |        Type         | Null | Key |       Default       |     Extra      |\n+-----------------------+---------------------+------+-----+---------------------+----------------+\n| ID                    | bigint(20) unsigned | NO   | PRI |                     | auto_increment |\n| post_author           | bigint(20) unsigned | NO   | MUL | 0                   |                |\n| post_date             | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n| post_date_gmt         | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n| post_content          | longtext            | NO   |     |                     |                |\n| post_title            | text                | NO   |     |                     |                |\n| post_excerpt          | text                | NO   |     |                     |                |\n| post_status           | varchar(20)         | NO   |     | publish             |                |\n| comment_status        | varchar(20)         | NO   |     | open                |                |\n| ping_status           | varchar(20)         | NO   |     | open                |                |\n| post_password         | varchar(255)        | NO   |     |                     |                |\n| post_name             | varchar(200)        | NO   | MUL |                     |                |\n| to_ping               | text                | NO   |     |                     |                |\n| pinged                | text                | NO   |     |                     |                |\n| post_modified         | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n| post_modified_gmt     | datetime            | NO   |     | 0000-00-00 00:00:00 |                |\n| post_content_filtered | longtext            | NO   |     |                     |                |\n| post_parent           | bigint(20) unsigned | NO   | MUL | 0                   |                |\n| guid                  | varchar(255)        | NO   |     |                     |                |\n| menu_order            | int(11)             | NO   |     | 0                   |                |\n| post_type             | varchar(20)         | NO   | MUL | post                |                |\n| post_mime_type        | varchar(100)        | NO   |     |                     |                |\n| comment_count         | bigint(20)          | NO   |     | 0                   |                |\n+-----------------------+---------------------+------+-----+---------------------+----------------+",
        "available": "",
        "synopsis": "wp db columns <table> [--format]"
    },
    "option-add": {
        "title": "option add",
        "excerpt": "Adds a new option value.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The name of the option to add.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the option to add. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--autoload=&lt;autoload&gt;]<\/dt><dd><p>Should this option be automatically loaded.<div><span>Options:<\/span><ul><li><code>'yes'<\/code><\/li><li><code>'no'<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the option already exists.<\/p>",
        "has_child": 0,
        "examples": "# Create an option by reading a JSON file.\n$ wp option add my_option --format=json < config.json\nSuccess: Added 'my_option' option.",
        "available": "",
        "synopsis": "wp option add <key> [<value>] [--format=<format>] [--autoload=<autoload>]"
    },
    "option-get": {
        "title": "option get",
        "excerpt": "Gets the value for an option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the option.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get option.\n$ wp option get home\nhttp:\/\/example.com\n\n# Get blog description.\n$ wp option get blogdescription\nA random blog description\n\n# Get blog name\n$ wp option get blogname\nA random blog name\n\n# Get admin email.\n$ wp option get admin_email\nsomeone@example.com\n\n# Get option in JSON format.\n$ wp option get active_plugins --format=json\n{\"0\":\"dynamically-dynamic-sidebar\\\/dynamically-dynamic-sidebar.php\",\"1\":\"monster-widget\\\/monster-widget.php\",\"2\":\"show-current-template\\\/show-current-template.php\",\"3\":\"theme-check\\\/theme-check.php\",\"5\":\"wordpress-importer\\\/wordpress-importer.php\"}",
        "available": "",
        "synopsis": "wp option get <key> [--format=<format>]"
    },
    "plugin-get": {
        "title": "plugin get",
        "excerpt": "Gets details about an installed plugin.",
        "options": "<dl><dt>&lt;plugin&gt;<\/dt><dd><p>The plugin to get.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole plugin, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp plugin get bbpress --format=json\n{\"name\":\"bbpress\",\"title\":\"bbPress\",\"author\":\"The bbPress Contributors\",\"version\":\"2.6-alpha\",\"description\":\"bbPress is forum software with a twist from the creators of WordPress.\",\"status\":\"active\"}",
        "available": "",
        "synopsis": "wp plugin get <plugin> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "role-reset": {
        "title": "role reset",
        "excerpt": "Resets any default role to default capabilities.",
        "options": "<dl><dt>[&lt;role-key&gt;...]<\/dt><dd><p>The internal name of one or more roles to reset.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all default roles will be reset.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Uses WordPress' <code>populate_roles()<\/code> function to put one or more\nroles back into the state they were at in the a fresh\nWordPress install. Removes any capabilities that were added,\nand restores any capabilities that were removed. Custom roles\nare not affected.<\/p>",
        "has_child": 0,
        "examples": "# Reset three roles.\n$ wp role reset administrator author contributor\nRestored 1 capability to and removed 0 capabilities from 'administrator' role.\nNo changes necessary for 'author' role.\nNo changes necessary for 'contributor' role.\nSuccess: 1 of 3 roles reset.\n\n# Reset a custom role.\n$ wp role reset custom_role\nCustom role 'custom_role' not affected.\nError: Must specify a default role to reset.\n\n# Reset all default roles.\n$ wp role reset --all\nSuccess: All default roles reset.",
        "available": "",
        "synopsis": "wp role reset [<role-key>...] [--all]"
    },
    "site-empty": {
        "title": "site empty",
        "excerpt": "Empties a site of its content (posts, comments, terms, and meta).",
        "options": "<dl><dt>[--uploads]<\/dt><dd><p>Also delete <em>all<\/em> files in the site's uploads directory.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Proceed to empty the site without a confirmation prompt.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Truncates posts, comments, and terms tables to empty a site of its\ncontent. Doesn't affect site configuration (options) or users.<\/p>\n<p>If running a persistent object cache, make sure to flush the cache\nafter emptying the site, as the cache values will be invalid otherwise.<\/p>\n<p>To also empty custom database tables, you'll need to hook into command\nexecution:<\/p>\n<pre><code>WP_CLI::add_hook( 'after_invoke:site empty', function(){\n    global $wpdb;\n    foreach( array( 'p2p', 'p2pmeta' ) as $table ) {\n        $table = $wpdb-&gt;$table;\n        $wpdb-&gt;query( \"TRUNCATE $table\" );\n    }\n});<\/code><\/pre>",
        "has_child": 0,
        "examples": "$ wp site empty\nAre you sure you want to empty the site at http:\/\/www.example.com of all posts, links, comments, and terms? [y\/n] y\nSuccess: The site at 'http:\/\/www.example.com' was emptied.",
        "available": "",
        "synopsis": "wp site empty [--uploads] [--yes]"
    },
    "theme-list": {
        "title": "theme list",
        "excerpt": "Gets a list of themes.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter results based on the value of a field.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each theme.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--status=&lt;status&gt;]<\/dt><dd><p>Filter the output by theme status.<div><span>Options:<\/span><ul><li><code>active<\/code><\/li><li><code>parent<\/code><\/li><li><code>inactive<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--skip-update-check]<\/dt><dd><p>If set, the theme update check will be skipped.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List themes\n$ wp theme list --status=inactive --format=csv\nname,status,update,version,update_version\ntwentyfourteen,inactive,none,1.7,\ntwentysixteen,inactive,available,1.1,",
        "available": "<p>These fields will be displayed by default for each theme:<\/p>\n<ul>\n<li>name<\/li>\n<li>status<\/li>\n<li>update<\/li>\n<li>version<\/li>\n<li>update_version<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>update_package<\/li>\n<li>update_id<\/li>\n<li>title<\/li>\n<li>description<\/li>\n<li>auto_update<\/li>\n<\/ul>",
        "synopsis": "wp theme list [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>] [--status=<status>] [--skip-update-check]"
    },
    "theme-path": {
        "title": "theme path",
        "excerpt": "Gets the path to a theme or to the theme directory.",
        "options": "<dl><dt>[&lt;theme&gt;]<\/dt><dd><p>The theme to get the path to. Path includes &quot;style.css&quot; file. If not set, will return the path to the themes directory.<\/p><\/dd><dt>[--dir]<\/dt><dd><p>If set, get the path to the closest parent directory, instead of the theme's &quot;style.css&quot; file.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get theme path\n$ wp theme path\n\/var\/www\/example.com\/public_html\/wp-content\/themes\n\n# Change directory to theme path\n$ cd $(wp theme path)",
        "available": "",
        "synopsis": "wp theme path [<theme>] [--dir]"
    },
    "widget-add": {
        "title": "widget add",
        "excerpt": "Adds a widget to a sidebar.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Widget name.<\/p><\/dd><dt>&lt;sidebar-id&gt;<\/dt><dd><p>ID for the corresponding sidebar.<\/p><\/dd><dt>[&lt;position&gt;]<\/dt><dd><p>Widget's current position within the sidebar. Defaults to last<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Widget option to add, with its new value<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a new widget entry in the database, and associates it with the\nsidebar.<\/p>",
        "has_child": 0,
        "examples": "# Add a new calendar widget to sidebar-1 with title \"Calendar\"\n$ wp widget add calendar sidebar-1 2 --title=\"Calendar\"\nSuccess: Added widget to sidebar.",
        "available": "",
        "synopsis": "wp widget add <name> <sidebar-id> [<position>] [--<field>=<value>]"
    },
    "cache-flush": {
        "title": "cache flush",
        "excerpt": "Flushes the object cache.",
        "options": "",
        "options_extra": "<p>For WordPress multisite instances using a persistent object cache,\nflushing the object cache will typically flush the cache for all sites.\nBeware of the performance impact when flushing the object cache in\nproduction.<\/p>\n<p>Errors if the object cache can't be flushed.<\/p>",
        "has_child": 0,
        "examples": "# Flush cache.\n$ wp cache flush\nSuccess: The cache was flushed.",
        "available": "",
        "synopsis": ""
    },
    "cli-version": {
        "title": "cli version",
        "excerpt": "Prints WP-CLI version.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Display CLI version.\n$ wp cli version\nWP-CLI 0.24.1",
        "available": "",
        "synopsis": ""
    },
    "comment-get": {
        "title": "comment get",
        "excerpt": "Gets the data of a single comment.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The comment to get.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole comment, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get comment.\n$ wp comment get 21 --field=content\nThanks for all the comments, everyone!",
        "available": "",
        "synopsis": "wp comment get <id> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "config-edit": {
        "title": "config edit",
        "excerpt": "Launches system editor to edit the wp-config.php file.",
        "options": "<dl><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be edited. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Launch system editor to edit wp-config.php file\n$ wp config edit\n\n# Edit wp-config.php file in a specific editor\n$ EDITOR=vim wp config edit",
        "available": "",
        "synopsis": "wp config edit [--config-file=<path>]"
    },
    "config-list": {
        "title": "config list",
        "excerpt": "Lists variables, constants, and file includes defined in wp-config.php file.",
        "options": "<dl><dt>[&lt;filter&gt;...]<\/dt><dd><p>Name or partial name to filter the list by.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. Dotenv is limited to non-object values. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>dotenv<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--strict]<\/dt><dd><p>Enforce strict matching when a filter is provided.<\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be read. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List constants and variables defined in wp-config.php file.\n$ wp config list\n+------------------+------------------------------------------------------------------+----------+\n| key              | value                                                            | type     |\n+------------------+------------------------------------------------------------------+----------+\n| table_prefix     | wp_                                                              | variable |\n| DB_NAME          | wp_cli_test                                                      | constant |\n| DB_USER          | root                                                             | constant |\n| DB_PASSWORD      | root                                                             | constant |\n| AUTH_KEY         | r6+@shP1yO&$)1gdu.hl[\/j;7Zrvmt~o;#WxSsa0mlQOi24j2cR,7i+QM\/#7S:o^ | constant |\n| SECURE_AUTH_KEY  | iO-z!_m--YH$Tx2tf\/&V,YW*13Z_HiRLqi)d?$o-tMdY+82pK$`T.NYW~iTLW;xp | constant |\n+------------------+------------------------------------------------------------------+----------+\n\n# List only database user and password from wp-config.php file.\n$ wp config list DB_USER DB_PASSWORD --strict\n+------------------+-------+----------+\n| key              | value | type     |\n+------------------+-------+----------+\n| DB_USER          | root  | constant |\n| DB_PASSWORD      | root  | constant |\n+------------------+-------+----------+\n\n# List all salts from wp-config.php file.\n$ wp config list _SALT\n+------------------+------------------------------------------------------------------+----------+\n| key              | value                                                            | type     |\n+------------------+------------------------------------------------------------------+----------+\n| AUTH_SALT        | n:]Xditk+_7>Qi=>BmtZHiH-6\/Ecrvl(V5ceeGP:{>?;BT^=[B3-0>,~F5z$(+Q$ | constant |\n| SECURE_AUTH_SALT | ?Z\/p|XhDw3w}?c.z%|+BAr|(Iv*H%%U+Du&kKR y?cJOYyRVRBeB[2zF-`(>+LCC | constant |\n| LOGGED_IN_SALT   | +$@(1{b~Z~s}Cs>8Y]6[m6~TnoCDpE>O%e75u}&6kUH!>q:7uM4lxbB6[1pa_X,q | constant |\n| NONCE_SALT       | _x+F li|QL?0OSQns1_JZ{|Ix3Jleox-71km\/gifnyz8kmo=w-;@AE8W,(fP<N}2 | constant |\n+------------------+------------------------------------------------------------------+----------+",
        "available": "",
        "synopsis": "wp config list [<filter>...] [--fields=<fields>] [--format=<format>] [--strict] [--config-file=<path>]"
    },
    "config-path": {
        "title": "config path",
        "excerpt": "Gets the path to wp-config.php file.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get wp-config.php file path\n$ wp config path\n\/home\/person\/htdocs\/project\/wp-config.php",
        "available": "",
        "synopsis": ""
    },
    "core-update": {
        "title": "core update",
        "excerpt": "Updates WordPress to a newer version.",
        "options": "<dl><dt>[&lt;zip&gt;]<\/dt><dd><p>Path to zip file to use, instead of downloading from wordpress.org.<\/p><\/dd><dt>[--minor]<\/dt><dd><p>Only perform updates for minor releases (e.g. update from WP 4.3 to 4.3.3 instead of 4.4.2).<\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>Update to a specific version, instead of to the latest version. Alternatively accepts 'nightly'.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Update even when installed WP version is greater than the requested version.<\/p><\/dd><dt>[--locale=&lt;locale&gt;]<\/dt><dd><p>Select which language you want to download.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Defaults to updating WordPress to the latest version.<\/p>\n<p>If you see &quot;Error: Another update is currently in progress.&quot;, you may\nneed to run <code>wp option delete core_updater.lock<\/code> after verifying another\nupdate isn't actually running.<\/p>",
        "has_child": 0,
        "examples": "# Update WordPress\n$ wp core update\nUpdating to version 4.5.2 (en_US)...\nDownloading update from https:\/\/downloads.wordpress.org\/release\/wordpress-4.5.2-no-content.zip...\nUnpacking the update...\nCleaning up files...\nNo files found that need cleaning up\nSuccess: WordPress updated successfully.\n\n# Update WordPress to latest version of 3.8 release\n$ wp core update --version=3.8 ..\/latest.zip\nUpdating to version 3.8 ()...\nUnpacking the update...\nCleaning up files...\nFile removed: wp-admin\/js\/tags-box.js\n...\nFile removed: wp-admin\/js\/updates.min.\n377 files cleaned up\nSuccess: WordPress updated successfully.\n\n# Update WordPress to 3.1 forcefully\n$ wp core update --version=3.1 --force\nUpdating to version 3.1 (en_US)...\nDownloading update from https:\/\/wordpress.org\/wordpress-3.1.zip...\nUnpacking the update...\nWarning: Checksums not available for WordPress 3.1\/en_US. Please cleanup files manually.\nSuccess: WordPress updated successfully.",
        "available": "",
        "synopsis": "wp core update [<zip>] [--minor] [--version=<version>] [--force] [--locale=<locale>] [--insecure]"
    },
    "db-optimize": {
        "title": "db optimize",
        "excerpt": "Optimizes the database.",
        "options": "<dl><dt>[--dbuser=&lt;value&gt;]<\/dt><dd><p>Username to pass to mysqlcheck. Defaults to DB_USER.<\/p><\/dd><dt>[--dbpass=&lt;value&gt;]<\/dt><dd><p>Password to pass to mysqlcheck. Defaults to DB_PASSWORD.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Extra arguments to pass to mysqlcheck. <a href=\"https:\/\/dev.mysql.com\/doc\/en\/mysqlcheck.html\">Refer to mysqlcheck docs<\/a>.<\/p><\/dd><dt>[--defaults]<\/dt><dd><p>Loads the environment's MySQL option files. Default behavior is to skip loading them to avoid failures due to misconfiguration.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Runs <code>mysqlcheck<\/code> utility with <code>--optimize=true<\/code> using <code>DB_HOST<\/code>,\n<code>DB_NAME<\/code>, <code>DB_USER<\/code> and <code>DB_PASSWORD<\/code> database credentials\nspecified in wp-config.php.<\/p>\n<p><a href=\"http:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/optimize-table.html\">See docs<\/a>\nfor more details on the <code>OPTIMIZE TABLE<\/code> statement.<\/p>",
        "has_child": 0,
        "examples": "$ wp db optimize\nSuccess: Database optimized.",
        "available": "",
        "synopsis": "wp db optimize [--dbuser=<value>] [--dbpass=<value>] [--<field>=<value>] [--defaults]"
    },
    "embed-cache": {
        "title": "embed cache",
        "excerpt": "Finds, triggers, and deletes oEmbed caches.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "",
        "available": "",
        "synopsis": ""
    },
    "embed-fetch": {
        "title": "embed fetch",
        "excerpt": "Attempts to convert a URL into embed HTML.",
        "options": "<dl><dt>&lt;url&gt;<\/dt><dd><p>URL to retrieve oEmbed data for.<\/p><\/dd><dt>[--width=&lt;width&gt;]<\/dt><dd><p>Width of the embed in pixels.<\/p><\/dd><dt>[--height=&lt;height&gt;]<\/dt><dd><p>Height of the embed in pixels.<\/p><\/dd><dt>[--post-id=&lt;id&gt;]<\/dt><dd><p>Cache oEmbed response for a given post.<\/p><\/dd><dt>[--discover]<\/dt><dd><p>Enable oEmbed discovery. Defaults to true.<\/p><\/dd><dt>[--skip-cache]<\/dt><dd><p>Ignore already cached oEmbed responses. Has no effect if using the 'raw' option, which doesn't use the cache.<\/p><\/dd><dt>[--skip-sanitization]<\/dt><dd><p>Remove the filter that WordPress from 4.4 onwards uses to sanitize oEmbed responses. Has no effect if using the 'raw' option, which by-passes sanitization.<\/p><\/dd><dt>[--do-shortcode]<\/dt><dd><p>If the URL is handled by a registered embed handler and returns a shortcode, do shortcode and return result. Has no effect if using the 'raw' option, which by-passes handlers.<\/p><\/dd><dt>[--limit-response-size=&lt;size&gt;]<\/dt><dd><p>Limit the size of the resulting HTML when using discovery. Default 150 KB (the standard WordPress limit). Not compatible with 'no-discover'.<\/p><\/dd><dt>[--raw]<\/dt><dd><p>Return the raw oEmbed response instead of the resulting HTML. Ignores the cache and does not sanitize responses or use registered embed handlers.<\/p><\/dd><dt>[--raw-format=&lt;json|xml&gt;]<\/dt><dd><p>Render raw oEmbed data in a particular format. Defaults to json. Can only be specified in conjunction with the 'raw' option.<div><span>Options:<\/span><ul><li><code>json<\/code><\/li><li><code>xml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>In non-raw mode, starts by checking the URL against the regex of the registered embed handlers.\nIf none of the regex matches and it's enabled, then the URL will be given to the WP_oEmbed class.<\/p>\n<p>In raw mode, checks the providers directly and returns the data.<\/p>",
        "has_child": 0,
        "examples": "# Get embed HTML for a given URL.\n$ wp embed fetch https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\n<iframe width=\"525\" height=\"295\" src=\"https:\/\/www.youtube.com\/embed\/dQw4w9WgXcQ?feature=oembed\" ...\n\n# Get raw oEmbed data for a given URL.\n$ wp embed fetch https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ --raw\n{\"author_url\":\"https:\\\/\\\/www.youtube.com\\\/user\\\/RickAstleyVEVO\",\"width\":525,\"version\":\"1.0\", ...",
        "available": "",
        "synopsis": "wp embed fetch <url> [--width=<width>] [--height=<height>] [--post-id=<id>] [--discover] [--skip-cache] [--skip-sanitization] [--do-shortcode] [--limit-response-size=<size>] [--raw] [--raw-format=<json|xml>]"
    },
    "menu-create": {
        "title": "menu create",
        "excerpt": "Creates a new menu.",
        "options": "<dl><dt>&lt;menu-name&gt;<\/dt><dd><p>A descriptive name for the menu.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new menu id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu create \"My Menu\"\nSuccess: Created menu 200.",
        "available": "",
        "synopsis": "wp menu create <menu-name> [--porcelain]"
    },
    "menu-delete": {
        "title": "menu delete",
        "excerpt": "Deletes one or more menus.",
        "options": "<dl><dt>&lt;menu&gt;...<\/dt><dd><p>The name, slug, or term ID for the menu(s).<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu delete \"My Menu\"\nDeleted menu 'My Menu'.\nSuccess: Deleted 1 of 1 menus.",
        "available": "",
        "synopsis": "wp menu delete <menu>..."
    },
    "option-list": {
        "title": "option list",
        "excerpt": "Lists options and their values.",
        "options": "<dl><dt>[--search=&lt;pattern&gt;]<\/dt><dd><p>Use wildcards ( * and ? ) to match option name.<\/p><\/dd><dt>[--exclude=&lt;pattern&gt;]<\/dt><dd><p>Pattern to exclude. Use wildcards ( * and ? ) to match option name.<\/p><\/dd><dt>[--autoload=&lt;value&gt;]<\/dt><dd><p>Match only autoload options when value is on, and only not-autoload option when off.<\/p><\/dd><dt>[--transients]<\/dt><dd><p>List only transients. Use <code>--no-transients<\/code> to ignore all transients.<\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize option values in output.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. total_bytes displays the total size of matching options in bytes. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><li><code>total_bytes<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: option_id]<div><span>Options:<\/span><ul><li><code>option_id<\/code><\/li><li><code>option_name<\/code><\/li><li><code>option_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get the total size of all autoload options.\n$ wp option list --autoload=on --format=total_bytes\n33198\n\n# Find biggest transients.\n$ wp option list --search=\"*_transient_*\" --fields=option_name,size_bytes | sort -n -k 2 | tail\noption_name size_bytes\n_site_transient_timeout_theme_roots 10\n_site_transient_theme_roots 76\n_site_transient_update_themes   181\n_site_transient_update_core 808\n_site_transient_update_plugins  6645\n\n# List all options beginning with \"i2f_\".\n$ wp option list --search=\"i2f_*\"\n+-------------+--------------+\n| option_name | option_value |\n+-------------+--------------+\n| i2f_version | 0.1.0        |\n+-------------+--------------+\n\n# Delete all options beginning with \"theme_mods_\".\n$ wp option list --search=\"theme_mods_*\" --field=option_name | xargs -I % wp option delete %\nSuccess: Deleted 'theme_mods_twentysixteen' option.\nSuccess: Deleted 'theme_mods_twentyfifteen' option.\nSuccess: Deleted 'theme_mods_twentyfourteen' option.",
        "available": "<p>This field will be displayed by default for each matching option:<\/p>\n<ul>\n<li>option_name<\/li>\n<li>option_value<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>autoload<\/li>\n<li>size_bytes<\/li>\n<\/ul>",
        "synopsis": "wp option list [--search=<pattern>] [--exclude=<pattern>] [--autoload=<value>] [--transients] [--unserialize] [--field=<field>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>]"
    },
    "plugin-list": {
        "title": "plugin list",
        "excerpt": "Gets a list of plugins.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter results based on the value of a field.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each plugin.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--status=&lt;status&gt;]<\/dt><dd><p>Filter the output by plugin status.<div><span>Options:<\/span><ul><li><code>active<\/code><\/li><li><code>activenetwork<\/code><\/li><li><code>dropin<\/code><\/li><li><code>inactive<\/code><\/li><li><code>mustuse<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--skip-update-check]<\/dt><dd><p>If set, the plugin update check will be skipped.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Displays a list of the plugins installed on the site with activation\nstatus, whether or not there's an update available, etc.<\/p>\n<p>Use <code>--status=dropin<\/code> to list installed dropins (e.g. <code>object-cache.php<\/code>).<\/p>",
        "has_child": 0,
        "examples": "# List active plugins on the site.\n$ wp plugin list --status=active --format=json\n[{\"name\":\"dynamic-hostname\",\"status\":\"active\",\"update\":\"none\",\"version\":\"0.4.2\",\"update_version\": \"\"},{\"name\":\"tinymce-templates\",\"status\":\"active\",\"update\":\"none\",\"version\":\"4.4.3\",\"update_version\": \"\"},{\"name\":\"wp-multibyte-patch\",\"status\":\"active\",\"update\":\"none\",\"version\":\"2.4\",\"update_version\": \"\"},{\"name\":\"wp-total-hacks\",\"status\":\"active\",\"update\":\"none\",\"version\":\"2.0.1\",\"update_version\": \"\"}]\n\n# List plugins on each site in a network.\n$ wp site list --field=url | xargs -I % wp plugin list --url=%\n+---------+----------------+--------+---------+----------------+\n| name    | status         | update | version | update_version |\n+---------+----------------+--------+---------+----------------+\n| akismet | active-network | none   | 3.1.11  |                |\n| hello   | inactive       | none   | 1.6     | 1.7.2          |\n+---------+----------------+--------+---------+----------------+\n+---------+----------------+--------+---------+----------------+\n| name    | status         | update | version | update_version |\n+---------+----------------+--------+---------+----------------+\n| akismet | active-network | none   | 3.1.11  |                |\n| hello   | inactive       | none   | 1.6     | 1.7.2          |\n+---------+----------------+--------+---------+----------------+\n\n# Check whether plugins are still active on WordPress.org\n$ wp plugin list --format=csv --fields=name,wporg_status,wporg_last_updated\n+--------------------+--------------+--------------------+\n| name               | wporg_status | wporg_last_updated |\n+--------------------+--------------+--------------------+\n| akismet            | active       | 2023-12-11         |\n| user-switching     | active       | 2023-11-17         |\n| wordpress-importer | active       | 2023-04-28         |\n| local              |              |                    |\n+--------------------+--------------+--------------------+",
        "available": "<p>These fields will be displayed by default for each plugin:<\/p>\n<ul>\n<li>name<\/li>\n<li>status<\/li>\n<li>update<\/li>\n<li>version<\/li>\n<li>update_version<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>update_package<\/li>\n<li>update_id<\/li>\n<li>title<\/li>\n<li>description<\/li>\n<li>file<\/li>\n<li>auto_update<\/li>\n<li>author<\/li>\n<li>wporg_status<\/li>\n<li>wporg_last_updated<\/li>\n<\/ul>",
        "synopsis": "wp plugin list [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>] [--status=<status>] [--skip-update-check]"
    },
    "plugin-path": {
        "title": "plugin path",
        "excerpt": "Gets the path to a plugin or to the plugin directory.",
        "options": "<dl><dt>[&lt;plugin&gt;]<\/dt><dd><p>The plugin to get the path to. If not set, will return the path to the plugins directory.<\/p><\/dd><dt>[--dir]<\/dt><dd><p>If set, get the path to the closest parent directory, instead of the plugin file.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ cd $(wp plugin path) && pwd\n\/var\/www\/wordpress\/wp-content\/plugins",
        "available": "",
        "synopsis": "wp plugin path [<plugin>] [--dir]"
    },
    "post-create": {
        "title": "post create",
        "excerpt": "Creates a new post.",
        "options": "<dl><dt>[--post_author=&lt;post_author&gt;]<\/dt><dd><p>The ID of the user who added the post. Default is the current user ID.<\/p><\/dd><dt>[--post_date=&lt;post_date&gt;]<\/dt><dd><p>The date of the post. Default is the current time.<\/p><\/dd><dt>[--post_date_gmt=&lt;post_date_gmt&gt;]<\/dt><dd><p>The date of the post in the GMT timezone. Default is the value of $post_date.<\/p><\/dd><dt>[--post_content=&lt;post_content&gt;]<\/dt><dd><p>The post content. Default empty.<\/p><\/dd><dt>[--post_content_filtered=&lt;post_content_filtered&gt;]<\/dt><dd><p>The filtered post content. Default empty.<\/p><\/dd><dt>[--post_title=&lt;post_title&gt;]<\/dt><dd><p>The post title. Default empty.<\/p><\/dd><dt>[--post_excerpt=&lt;post_excerpt&gt;]<\/dt><dd><p>The post excerpt. Default empty.<\/p><\/dd><dt>[--post_status=&lt;post_status&gt;]<\/dt><dd><p>The post status. Default 'draft'.<\/p><\/dd><dt>[--post_type=&lt;post_type&gt;]<\/dt><dd><p>The post type. Default 'post'.<\/p><\/dd><dt>[--comment_status=&lt;comment_status&gt;]<\/dt><dd><p>Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.<\/p><\/dd><dt>[--ping_status=&lt;ping_status&gt;]<\/dt><dd><p>Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.<\/p><\/dd><dt>[--post_password=&lt;post_password&gt;]<\/dt><dd><p>The password to access the post. Default empty.<\/p><\/dd><dt>[--post_name=&lt;post_name&gt;]<\/dt><dd><p>The post name. Default is the sanitized post title when creating a new post.<\/p><\/dd><dt>[--from-post=&lt;post_id&gt;]<\/dt><dd><p>Post id of a post to be duplicated.<\/p><\/dd><dt>[--to_ping=&lt;to_ping&gt;]<\/dt><dd><p>Space or carriage return-separated list of URLs to ping. Default empty.<\/p><\/dd><dt>[--pinged=&lt;pinged&gt;]<\/dt><dd><p>Space or carriage return-separated list of URLs that have been pinged. Default empty.<\/p><\/dd><dt>[--post_modified=&lt;post_modified&gt;]<\/dt><dd><p>The date when the post was last modified. Default is the current time.<\/p><\/dd><dt>[--post_modified_gmt=&lt;post_modified_gmt&gt;]<\/dt><dd><p>The date when the post was last modified in the GMT timezone. Default is the current time.<\/p><\/dd><dt>[--post_parent=&lt;post_parent&gt;]<\/dt><dd><p>Set this for the post it belongs to, if any. Default 0.<\/p><\/dd><dt>[--menu_order=&lt;menu_order&gt;]<\/dt><dd><p>The order the post should be displayed in. Default 0.<\/p><\/dd><dt>[--post_mime_type=&lt;post_mime_type&gt;]<\/dt><dd><p>The mime type of the post. Default empty.<\/p><\/dd><dt>[--guid=&lt;guid&gt;]<\/dt><dd><p>Global Unique ID for referencing the post. Default empty.<\/p><\/dd><dt>[--post_category=&lt;post_category&gt;]<\/dt><dd><p>Array of category names, slugs, or IDs. Defaults to value of the 'default_category' option.<\/p><\/dd><dt>[--tags_input=&lt;tags_input&gt;]<\/dt><dd><p>Array of tag names, slugs, or IDs. Default empty.<\/p><\/dd><dt>[--tax_input=&lt;tax_input&gt;]<\/dt><dd><p>Array of taxonomy terms keyed by their taxonomy name. Default empty.<\/p><\/dd><dt>[--meta_input=&lt;meta_input&gt;]<\/dt><dd><p>Array in JSON format of post meta values keyed by their post meta key. Default empty.<\/p><\/dd><dt>[&lt;file&gt;]<\/dt><dd><p>Read post content from <file>. If this value is present, the     <code>--post_content<\/code> argument will be ignored. Passing <code>-<\/code> as the filename will cause post content to\nbe read from STDIN.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Associative args for the new post. See wp_insert_post().<\/p><\/dd><dt>[--edit]<\/dt><dd><p>Immediately open system's editor to write or edit post content. If content is read from a file, from STDIN, or from the <code>--post_content<\/code>\nargument, that text will be loaded into the editor.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new post id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create post and schedule for future\n$ wp post create --post_type=post --post_title='A future post' --post_status=future --post_date='2030-12-01 07:00:00'\nSuccess: Created post 1921.\n\n# Create post with content from given file\n$ wp post create .\/post-content.txt --post_category=201,345 --post_title='Post from file'\nSuccess: Created post 1922.\n\n# Create a post with multiple meta values.\n$ wp post create --post_title='A post' --post_content='Just a small post.' --meta_input='{\"key1\":\"value1\",\"key2\":\"value2\"}'\nSuccess: Created post 1923.\n\n# Create a duplicate post from existing posts.\n$ wp post create --from-post=123 --post_title='Different Title'\nSuccess: Created post 2350.",
        "available": "",
        "synopsis": "wp post create [--post_author=<post_author>] [--post_date=<post_date>] [--post_date_gmt=<post_date_gmt>] [--post_content=<post_content>] [--post_content_filtered=<post_content_filtered>] [--post_title=<post_title>] [--post_excerpt=<post_excerpt>] [--post_status=<post_status>] [--post_type=<post_type>] [--comment_status=<comment_status>] [--ping_status=<ping_status>] [--post_password=<post_password>] [--post_name=<post_name>] [--from-post=<post_id>] [--to_ping=<to_ping>] [--pinged=<pinged>] [--post_modified=<post_modified>] [--post_modified_gmt=<post_modified_gmt>] [--post_parent=<post_parent>] [--menu_order=<menu_order>] [--post_mime_type=<post_mime_type>] [--guid=<guid>] [--post_category=<post_category>] [--tags_input=<tags_input>] [--tax_input=<tax_input>] [--meta_input=<meta_input>] [<file>] [--<field>=<value>] [--edit] [--porcelain]"
    },
    "post-delete": {
        "title": "post delete",
        "excerpt": "Deletes an existing post.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>One or more IDs of posts to delete.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Skip the trash bin.<\/p><\/dd><dt>[--defer-term-counting]<\/dt><dd><p>Recalculate term count in batch, for a performance boost.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete post skipping trash\n$ wp post delete 123 --force\nSuccess: Deleted post 123.\n\n# Delete multiple posts\n$ wp post delete 123 456 789\nSuccess: Trashed post 123.\nSuccess: Trashed post 456.\nSuccess: Trashed post 789.\n\n# Delete all pages\n$ wp post delete $(wp post list --post_type='page' --format=ids)\nSuccess: Trashed post 1164.\nSuccess: Trashed post 1186.\n\n# Delete all posts in the trash\n$ wp post delete $(wp post list --post_status=trash --format=ids)\nSuccess: Deleted post 1268.\nSuccess: Deleted post 1294.",
        "available": "",
        "synopsis": "wp post delete <id>... [--force] [--defer-term-counting]"
    },
    "post-exists": {
        "title": "post exists",
        "excerpt": "Verifies whether a post exists.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the post to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Displays a success message if the post does exist.<\/p>",
        "has_child": 0,
        "examples": "# The post exists.\n$ wp post exists 1337\nSuccess: Post with ID 1337 exists.\n$ echo $?\n0\n\n# The post does not exist.\n$ wp post exists 10000\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp post exists <id>"
    },
    "post-update": {
        "title": "post update",
        "excerpt": "Updates one or more existing posts.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>One or more IDs of posts to update.<\/p><\/dd><dt>[--post_author=&lt;post_author&gt;]<\/dt><dd><p>The ID of the user who added the post. Default is the current user ID.<\/p><\/dd><dt>[--post_date=&lt;post_date&gt;]<\/dt><dd><p>The date of the post. Default is the current time.<\/p><\/dd><dt>[--post_date_gmt=&lt;post_date_gmt&gt;]<\/dt><dd><p>The date of the post in the GMT timezone. Default is the value of $post_date.<\/p><\/dd><dt>[--post_content=&lt;post_content&gt;]<\/dt><dd><p>The post content. Default empty.<\/p><\/dd><dt>[--post_content_filtered=&lt;post_content_filtered&gt;]<\/dt><dd><p>The filtered post content. Default empty.<\/p><\/dd><dt>[--post_title=&lt;post_title&gt;]<\/dt><dd><p>The post title. Default empty.<\/p><\/dd><dt>[--post_excerpt=&lt;post_excerpt&gt;]<\/dt><dd><p>The post excerpt. Default empty.<\/p><\/dd><dt>[--post_status=&lt;post_status&gt;]<\/dt><dd><p>The post status. Default 'draft'.<\/p><\/dd><dt>[--post_type=&lt;post_type&gt;]<\/dt><dd><p>The post type. Default 'post'.<\/p><\/dd><dt>[--comment_status=&lt;comment_status&gt;]<\/dt><dd><p>Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.<\/p><\/dd><dt>[--ping_status=&lt;ping_status&gt;]<\/dt><dd><p>Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.<\/p><\/dd><dt>[--post_password=&lt;post_password&gt;]<\/dt><dd><p>The password to access the post. Default empty.<\/p><\/dd><dt>[--post_name=&lt;post_name&gt;]<\/dt><dd><p>The post name. Default is the sanitized post title when creating a new post.<\/p><\/dd><dt>[--to_ping=&lt;to_ping&gt;]<\/dt><dd><p>Space or carriage return-separated list of URLs to ping. Default empty.<\/p><\/dd><dt>[--pinged=&lt;pinged&gt;]<\/dt><dd><p>Space or carriage return-separated list of URLs that have been pinged. Default empty.<\/p><\/dd><dt>[--post_modified=&lt;post_modified&gt;]<\/dt><dd><p>The date when the post was last modified. Default is the current time.<\/p><\/dd><dt>[--post_modified_gmt=&lt;post_modified_gmt&gt;]<\/dt><dd><p>The date when the post was last modified in the GMT timezone. Default is the current time.<\/p><\/dd><dt>[--post_parent=&lt;post_parent&gt;]<\/dt><dd><p>Set this for the post it belongs to, if any. Default 0.<\/p><\/dd><dt>[--menu_order=&lt;menu_order&gt;]<\/dt><dd><p>The order the post should be displayed in. Default 0.<\/p><\/dd><dt>[--post_mime_type=&lt;post_mime_type&gt;]<\/dt><dd><p>The mime type of the post. Default empty.<\/p><\/dd><dt>[--guid=&lt;guid&gt;]<\/dt><dd><p>Global Unique ID for referencing the post. Default empty.<\/p><\/dd><dt>[--post_category=&lt;post_category&gt;]<\/dt><dd><p>Array of category names, slugs, or IDs. Defaults to value of the 'default_category' option.<\/p><\/dd><dt>[--tags_input=&lt;tags_input&gt;]<\/dt><dd><p>Array of tag names, slugs, or IDs. Default empty.<\/p><\/dd><dt>[--tax_input=&lt;tax_input&gt;]<\/dt><dd><p>Array of taxonomy terms keyed by their taxonomy name. Default empty.<\/p><\/dd><dt>[--meta_input=&lt;meta_input&gt;]<\/dt><dd><p>Array in JSON format of post meta values keyed by their post meta key. Default empty.<\/p><\/dd><dt>[&lt;file&gt;]<\/dt><dd><p>Read post content from <file>. If this value is present, the     <code>--post_content<\/code> argument will be ignored. Passing <code>-<\/code> as the filename will cause post content to\nbe read from STDIN.<\/p><\/dd><dt>--&lt;field&gt;=&lt;value&gt;<\/dt><dd><p>One or more fields to update. See wp_insert_post().<\/p><\/dd><dt>[--defer-term-counting]<\/dt><dd><p>Recalculate term count in batch, for a performance boost.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp post update 123 --post_name=something --post_status=draft\nSuccess: Updated post 123.\n\n# Update a post with multiple meta values.\n$ wp post update 123 --meta_input='{\"key1\":\"value1\",\"key2\":\"value2\"}'\nSuccess: Updated post 123.\n\n# Update multiple posts at once.\n$ wp post update 123 456 --post_author=789\nSuccess: Updated post 123.\nSuccess: Updated post 456.\n\n# Update all posts of a given post type at once.\n$ wp post update $(wp post list --post_type=page --format=ids) --post_author=123\nSuccess: Updated post 123.\nSuccess: Updated post 456.",
        "available": "",
        "synopsis": "wp post update <id>... [--post_author=<post_author>] [--post_date=<post_date>] [--post_date_gmt=<post_date_gmt>] [--post_content=<post_content>] [--post_content_filtered=<post_content_filtered>] [--post_title=<post_title>] [--post_excerpt=<post_excerpt>] [--post_status=<post_status>] [--post_type=<post_type>] [--comment_status=<comment_status>] [--ping_status=<ping_status>] [--post_password=<post_password>] [--post_name=<post_name>] [--to_ping=<to_ping>] [--pinged=<pinged>] [--post_modified=<post_modified>] [--post_modified_gmt=<post_modified_gmt>] [--post_parent=<post_parent>] [--menu_order=<menu_order>] [--post_mime_type=<post_mime_type>] [--guid=<guid>] [--post_category=<post_category>] [--tags_input=<tags_input>] [--tax_input=<tax_input>] [--meta_input=<meta_input>] [<file>] --<field>=<value> [--defer-term-counting]"
    },
    "role-create": {
        "title": "role create",
        "excerpt": "Creates a new role.",
        "options": "<dl><dt>&lt;role-key&gt;<\/dt><dd><p>The internal name of the role.<\/p><\/dd><dt>&lt;role-name&gt;<\/dt><dd><p>The publicly visible name of the role.<\/p><\/dd><dt>[--clone=&lt;role&gt;]<\/dt><dd><p>Clone capabilities from an existing role.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create role for Approver.\n$ wp role create approver Approver\nSuccess: Role with key 'approver' created.\n\n# Create role for Product Administrator.\n$ wp role create productadmin \"Product Administrator\"\nSuccess: Role with key 'productadmin' created.",
        "available": "",
        "synopsis": "wp role create <role-key> <role-name> [--clone=<role>]"
    },
    "role-delete": {
        "title": "role delete",
        "excerpt": "Deletes an existing role.",
        "options": "<dl><dt>&lt;role-key&gt;<\/dt><dd><p>The internal name of the role.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete approver role.\n$ wp role delete approver\nSuccess: Role with key 'approver' deleted.\n\n# Delete productadmin role.\nwp role delete productadmin\nSuccess: Role with key 'productadmin' deleted.",
        "available": "",
        "synopsis": "wp role delete <role-key>"
    },
    "role-exists": {
        "title": "role exists",
        "excerpt": "Checks if a role exists.",
        "options": "<dl><dt>&lt;role-key&gt;<\/dt><dd><p>The internal name of the role.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Exits with return code 0 if the role exists, 1 if it does not.<\/p>",
        "has_child": 0,
        "examples": "# Check if a role exists.\n$ wp role exists editor\nSuccess: Role with ID 'editor' exists.",
        "available": "",
        "synopsis": "wp role exists <role-key>"
    },
    "site-create": {
        "title": "site create",
        "excerpt": "Creates a site in a multisite installation.",
        "options": "<dl><dt>--slug=&lt;slug&gt;<\/dt><dd><p>Path for the new site. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><dt>[--title=&lt;title&gt;]<\/dt><dd><p>Title of the new site. Default: prettified slug.<\/p><\/dd><dt>[--email=&lt;email&gt;]<\/dt><dd><p>Email for admin user. User will be created if none exists. Assignment to super admin if not included.<\/p><\/dd><dt>[--network_id=&lt;network-id&gt;]<\/dt><dd><p>Network to associate new site with. Defaults to current network (typically 1).<\/p><\/dd><dt>[--private]<\/dt><dd><p>If set, the new site will be non-public (not indexed)<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>If set, only the site id will be output on success.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site create --slug=example\nSuccess: Site 3 created: http:\/\/www.example.com\/example\/",
        "available": "",
        "synopsis": "wp site create --slug=<slug> [--title=<title>] [--email=<email>] [--network_id=<network-id>] [--private] [--porcelain]"
    },
    "site-delete": {
        "title": "site delete",
        "excerpt": "Deletes a site in a multisite installation.",
        "options": "<dl><dt>[&lt;site-id&gt;]<\/dt><dd><p>The id of the site to delete. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be deleted. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Answer yes to the confirmation message.<\/p><\/dd><dt>[--keep-tables]<\/dt><dd><p>Delete the blog from the list, but don't drop its tables.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site delete 123\nAre you sure you want to delete the http:\/\/www.example.com\/example site? [y\/n] y\nSuccess: The site at 'http:\/\/www.example.com\/example' was deleted.",
        "available": "",
        "synopsis": "wp site delete [<site-id>] [--slug=<slug>] [--yes] [--keep-tables]"
    },
    "site-mature": {
        "title": "site mature",
        "excerpt": "Sets one or more sites as mature.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to set as mature. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be set as mature. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site mature 123\nSuccess: Site 123 marked as mature.\n\n$ wp site mature --slug=demo\nSuccess: Site 123 marked as mature.",
        "available": "",
        "synopsis": "wp site mature [<id>...] [--slug=<slug>]"
    },
    "site-option": {
        "title": "site option",
        "excerpt": "Adds, updates, deletes, and lists site options in a multisite installation.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Get site registration\n$ wp site option get registration\nnone\n\n# Add site option\n$ wp site option add my_option foobar\nSuccess: Added 'my_option' site option.\n\n# Update site option\n$ wp site option update my_option '{\"foo\": \"bar\"}' --format=json\nSuccess: Updated 'my_option' site option.\n\n# Delete site option\n$ wp site option delete my_option\nSuccess: Deleted 'my_option' site option.",
        "available": "",
        "synopsis": ""
    },
    "site-public": {
        "title": "site public",
        "excerpt": "Sets one or more sites as public.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to set as public. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be set as public. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site public 123\nSuccess: Site 123 marked as public.\n\n$ wp site public --slug=demo\nSuccess: Site 123 marked as public.",
        "available": "",
        "synopsis": "wp site public [<id>...] [--slug=<slug>]"
    },
    "site-unspam": {
        "title": "site unspam",
        "excerpt": "Removes one or more sites from spam.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to remove from spam. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be removed from spam. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site unspam 123\nSuccess: Site 123 removed from spam.",
        "available": "",
        "synopsis": "wp site unspam [<id>...] [--slug=<slug>]"
    },
    "super-admin": {
        "title": "super-admin",
        "excerpt": "Lists, adds, or removes super admin users on a multisite installation.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# List user with super-admin capabilities\n$ wp super-admin list\nsupervisor\nadministrator\n\n# Grant super-admin privileges to the user.\n$ wp super-admin add superadmin2\nSuccess: Granted super-admin capabilities.\n\n# Revoke super-admin privileges to the user.\n$ wp super-admin remove superadmin2\nSuccess: Revoked super-admin capabilities.",
        "available": "",
        "synopsis": ""
    },
    "term-create": {
        "title": "term create",
        "excerpt": "Creates a new term.",
        "options": "<dl><dt>&lt;taxonomy&gt;<\/dt><dd><p>Taxonomy for the new term.<\/p><\/dd><dt>&lt;term&gt;<\/dt><dd><p>A name for the new term.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>A unique slug for the new term. Defaults to sanitized version of name.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>A description for the new term.<\/p><\/dd><dt>[--parent=&lt;term-id&gt;]<\/dt><dd><p>A parent for the new term.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new term id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create a new category \"Apple\" with a description.\n$ wp term create category Apple --description=\"A type of fruit\"\nSuccess: Created category 199.",
        "available": "",
        "synopsis": "wp term create <taxonomy> <term> [--slug=<slug>] [--description=<description>] [--parent=<term-id>] [--porcelain]"
    },
    "term-delete": {
        "title": "term delete",
        "excerpt": "Deletes an existing term.",
        "options": "<dl><dt>&lt;taxonomy&gt;<\/dt><dd><p>Taxonomy of the term to delete.<\/p><\/dd><dt>&lt;term&gt;...<\/dt><dd><p>One or more IDs or slugs of terms to delete.<\/p><\/dd><dt>[--by=&lt;field&gt;]<\/dt><dd><p>Explicitly handle the term value as a slug or id. [Default: id]<div><span>Options:<\/span><ul><li><code>slug<\/code><\/li><li><code>id<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the term doesn't exist, or there was a problem in deleting it.<\/p>",
        "has_child": 0,
        "examples": "# Delete post category by id\n$ wp term delete category 15\nDeleted category 15.\nSuccess: Deleted 1 of 1 terms.\n\n# Delete post category by slug\n$ wp term delete category apple --by=slug\nDeleted category 15.\nSuccess: Deleted 1 of 1 terms.\n\n# Delete all post tags\n$ wp term list post_tag --field=term_id | xargs wp term delete post_tag\nDeleted post_tag 159.\nDeleted post_tag 160.\nDeleted post_tag 161.\nSuccess: Deleted 3 of 3 terms.",
        "available": "",
        "synopsis": "wp term delete <taxonomy> <term>... [--by=<field>]"
    },
    "term-update": {
        "title": "term update",
        "excerpt": "Updates an existing term.",
        "options": "<dl><dt>&lt;taxonomy&gt;<\/dt><dd><p>Taxonomy of the term to update.<\/p><\/dd><dt>&lt;term&gt;<\/dt><dd><p>ID or slug for the term to update.<\/p><\/dd><dt>[--by=&lt;field&gt;]<\/dt><dd><p>Explicitly handle the term value as a slug or id. [Default: id]<div><span>Options:<\/span><ul><li><code>slug<\/code><\/li><li><code>id<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--name=&lt;name&gt;]<\/dt><dd><p>A new name for the term.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>A new slug for the term.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>A new description for the term.<\/p><\/dd><dt>[--parent=&lt;term-id&gt;]<\/dt><dd><p>A new parent for the term.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Change category with id 15 to use the name \"Apple\"\n$ wp term update category 15 --name=Apple\nSuccess: Term updated.\n\n# Change category with slug apple to use the name \"Apple\"\n$ wp term update category apple --by=slug --name=Apple\nSuccess: Term updated.",
        "available": "",
        "synopsis": "wp term update <taxonomy> <term> [--by=<field>] [--name=<name>] [--slug=<slug>] [--description=<description>] [--parent=<term-id>]"
    },
    "user-create": {
        "title": "user create",
        "excerpt": "Creates a new user.",
        "options": "<dl><dt>&lt;user-login&gt;<\/dt><dd><p>The login of the user to create.<\/p><\/dd><dt>&lt;user-email&gt;<\/dt><dd><p>The email address of the user to create.<\/p><\/dd><dt>[--role=&lt;role&gt;]<\/dt><dd><p>The role of the user to create. Default: default role. Possible values include 'administrator', 'editor', 'author', 'contributor', 'subscriber'.<\/p><\/dd><dt>[--user_pass=&lt;password&gt;]<\/dt><dd><p>The user password. Default: randomly generated.<\/p><\/dd><dt>[--user_registered=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<\/dt><dd><p>The date the user registered. Default: current date.<\/p><\/dd><dt>[--display_name=&lt;name&gt;]<\/dt><dd><p>The display name.<\/p><\/dd><dt>[--user_nicename=&lt;nice_name&gt;]<\/dt><dd><p>A string that contains a URL-friendly name for the user. The default is the user's username.<\/p><\/dd><dt>[--user_url=&lt;url&gt;]<\/dt><dd><p>A string containing the user's URL for the user's web site.<\/p><\/dd><dt>[--nickname=&lt;nickname&gt;]<\/dt><dd><p>The user's nickname, defaults to the user's username.<\/p><\/dd><dt>[--first_name=&lt;first_name&gt;]<\/dt><dd><p>The user's first name.<\/p><\/dd><dt>[--last_name=&lt;last_name&gt;]<\/dt><dd><p>The user's last name.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>A string containing content about the user.<\/p><\/dd><dt>[--rich_editing=&lt;rich_editing&gt;]<\/dt><dd><p>A string for whether to enable the rich editor or not. False if not empty.<\/p><\/dd><dt>[--send-email]<\/dt><dd><p>Send an email to the user with their new account details.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new user id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create user\n$ wp user create bob bob@example.com --role=author\nSuccess: Created user 3.\nPassword: k9**&I4vNH(&\n\n# Create user without showing password upon success\n$ wp user create ann ann@example.com --porcelain\n4",
        "available": "",
        "synopsis": "wp user create <user-login> <user-email> [--role=<role>] [--user_pass=<password>] [--user_registered=<yyyy-mm-dd-hh-ii-ss>] [--display_name=<name>] [--user_nicename=<nice_name>] [--user_url=<url>] [--nickname=<nickname>] [--first_name=<first_name>] [--last_name=<last_name>] [--description=<description>] [--rich_editing=<rich_editing>] [--send-email] [--porcelain]"
    },
    "user-delete": {
        "title": "user delete",
        "excerpt": "Deletes one or more users from the current site.",
        "options": "<dl><dt>&lt;user&gt;...<\/dt><dd><p>The user login, user email, or user ID of the user(s) to delete.<\/p><\/dd><dt>[--network]<\/dt><dd><p>On multisite, delete the user from the entire network.<\/p><\/dd><dt>[--reassign=&lt;user-id&gt;]<\/dt><dd><p>User ID to reassign the posts to.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Answer yes to any confirmation prompts.<\/p><\/dd><\/dl>",
        "options_extra": "<p>On multisite, <code>wp user delete<\/code> only removes the user from the current\nsite. Include <code>--network<\/code> to also remove the user from the database, but\nmake sure to reassign their posts prior to deleting the user.<\/p>",
        "has_child": 0,
        "examples": "# Delete user 123 and reassign posts to user 567\n$ wp user delete 123 --reassign=567\nSuccess: Removed user 123 from http:\/\/example.com.\n\n# Delete all contributors and reassign their posts to user 2\n$ wp user delete $(wp user list --role=contributor --field=ID) --reassign=2\nSuccess: Removed user 813 from http:\/\/example.com.\nSuccess: Removed user 578 from http:\/\/example.com.\n\n# Delete all contributors in batches of 100 (avoid error: argument list too long: wp)\n$ wp user delete $(wp user list --role=contributor --field=ID | head -n 100)",
        "available": "",
        "synopsis": "wp user delete <user>... [--network] [--reassign=<user-id>] [--yes]"
    },
    "user-unspam": {
        "title": "user unspam",
        "excerpt": "Removes one or more users from spam on multisite.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>One or more IDs of users to remove from spam.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Remove user from spam.\n$ wp user unspam 123\nUser 123 removed from spam.\nSuccess: Unspamed 1 of 1 users.",
        "available": "",
        "synopsis": "wp user unspam <id>..."
    },
    "user-update": {
        "title": "user update",
        "excerpt": "Updates an existing user.",
        "options": "<dl><dt>&lt;user&gt;...<\/dt><dd><p>The user login, user email or user ID of the user(s) to update.<\/p><\/dd><dt>[--user_pass=&lt;password&gt;]<\/dt><dd><p>A string that contains the plain text password for the user.<\/p><\/dd><dt>[--user_nicename=&lt;nice_name&gt;]<\/dt><dd><p>A string that contains a URL-friendly name for the user. The default is the user's username.<\/p><\/dd><dt>[--user_url=&lt;url&gt;]<\/dt><dd><p>A string containing the user's URL for the user's web site.<\/p><\/dd><dt>[--user_email=&lt;email&gt;]<\/dt><dd><p>A string containing the user's email address.<\/p><\/dd><dt>[--display_name=&lt;display_name&gt;]<\/dt><dd><p>A string that will be shown on the site. Defaults to user's username.<\/p><\/dd><dt>[--nickname=&lt;nickname&gt;]<\/dt><dd><p>The user's nickname, defaults to the user's username.<\/p><\/dd><dt>[--first_name=&lt;first_name&gt;]<\/dt><dd><p>The user's first name.<\/p><\/dd><dt>[--last_name=&lt;last_name&gt;]<\/dt><dd><p>The user's last name.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>A string containing content about the user.<\/p><\/dd><dt>[--rich_editing=&lt;rich_editing&gt;]<\/dt><dd><p>A string for whether to enable the rich editor or not. False if not empty.<\/p><\/dd><dt>[--user_registered=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<\/dt><dd><p>The date the user registered.<\/p><\/dd><dt>[--role=&lt;role&gt;]<\/dt><dd><p>A string used to set the user's role.<\/p><\/dd><dt>--&lt;field&gt;=&lt;value&gt;<\/dt><dd><p>One or more fields to update. For accepted fields, see wp_update_user().<\/p><\/dd><dt>[--skip-email]<\/dt><dd><p>Don't send an email notification to the user.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update user\n$ wp user update 123 --display_name=Mary --user_pass=marypass\nSuccess: Updated user 123.",
        "available": "",
        "synopsis": "wp user update <user>... [--user_pass=<password>] [--user_nicename=<nice_name>] [--user_url=<url>] [--user_email=<email>] [--display_name=<display_name>] [--nickname=<nickname>] [--first_name=<first_name>] [--last_name=<last_name>] [--description=<description>] [--rich_editing=<rich_editing>] [--user_registered=<yyyy-mm-dd-hh-ii-ss>] [--role=<role>] --<field>=<value> [--skip-email]"
    },
    "widget-list": {
        "title": "widget list",
        "excerpt": "Lists widgets associated with a sidebar.",
        "options": "<dl><dt>&lt;sidebar-id&gt;<\/dt><dd><p>ID for the corresponding sidebar.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp widget list sidebar-1 --fields=name,id --format=csv\nname,id\nmeta,meta-5\nsearch,search-3",
        "available": "<p>These fields will be displayed by default for each widget:<\/p>\n<ul>\n<li>name<\/li>\n<li>id<\/li>\n<li>position<\/li>\n<li>options<\/li>\n<\/ul>\n<p>There are no optionally available fields.<\/p>",
        "synopsis": "wp widget list <sidebar-id> [--fields=<fields>] [--format=<format>]"
    },
    "widget-move": {
        "title": "widget move",
        "excerpt": "Moves the position of a widget.",
        "options": "<dl><dt>&lt;widget-id&gt;<\/dt><dd><p>Unique ID for the widget<\/p><\/dd><dt>[--position=&lt;position&gt;]<\/dt><dd><p>Assign the widget to a new position.<\/p><\/dd><dt>[--sidebar-id=&lt;sidebar-id&gt;]<\/dt><dd><p>Assign the widget to a new sidebar<\/p><\/dd><\/dl>",
        "options_extra": "<p>Changes the order of a widget in its existing sidebar, or moves it to a\nnew sidebar.<\/p>",
        "has_child": 0,
        "examples": "# Change position of widget\n$ wp widget move recent-comments-2 --position=2\nSuccess: Widget moved.\n\n# Move widget to Inactive Widgets\n$ wp widget move recent-comments-2 --sidebar-id=wp_inactive_widgets\nSuccess: Widget moved.",
        "available": "",
        "synopsis": "wp widget move <widget-id> [--position=<position>] [--sidebar-id=<sidebar-id>]"
    },
    "cache-delete": {
        "title": "cache delete",
        "excerpt": "Removes a value from the object cache.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the value can't be deleted.<\/p>",
        "has_child": 0,
        "examples": "# Delete cache.\n$ wp cache delete my_key my_group\nSuccess: Object deleted.",
        "available": "",
        "synopsis": "wp cache delete <key> [<group>]"
    },
    "cli-cmd-dump": {
        "title": "cli cmd-dump",
        "excerpt": "Dumps the list of installed commands, as JSON.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Dump the list of installed commands.\n$ wp cli cmd-dump\n{\"name\":\"wp\",\"description\":\"Manage WordPress through the command-line.\",\"longdesc\":\"\\n\\n## GLOBAL PARAMETERS\\n\\n  --path=<path>\\n      Path to the WordPress files.\\n\\n  --ssh=<ssh>\\n      Perform operation against a remote server over SSH (or a container using scheme of \"docker\" or \"docker-compose\").\\n\\n  --url=<url>\\n      Pretend request came from given URL. In multisite, this argument is how the target site is specified. \\n\\n  --user=<id|login|email>\\n",
        "available": "",
        "synopsis": ""
    },
    "comment-list": {
        "title": "comment list",
        "excerpt": "Gets a list of comments.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>One or more args to pass to WP_Comment_Query.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each comment.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>ids<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Display comments based on all arguments supported by\n<a href=\"https:\/\/developer.wordpress.org\/reference\/classes\/WP_Comment_Query\/__construct\/\">WP_Comment_Query()<\/a>.<\/p>",
        "has_child": 0,
        "examples": "# List comment IDs.\n$ wp comment list --field=ID\n22\n23\n24\n\n# List comments of a post.\n$ wp comment list --post_id=1 --fields=ID,comment_date,comment_author\n+------------+---------------------+----------------+\n| comment_ID | comment_date        | comment_author |\n+------------+---------------------+----------------+\n| 1          | 2015-06-20 09:00:10 | Mr WordPress   |\n+------------+---------------------+----------------+\n\n# List approved comments.\n$ wp comment list --number=3 --status=approve --fields=ID,comment_date,comment_author\n+------------+---------------------+----------------+\n| comment_ID | comment_date        | comment_author |\n+------------+---------------------+----------------+\n| 1          | 2015-06-20 09:00:10 | Mr WordPress   |\n| 30         | 2013-03-14 12:35:07 | John Doe       |\n| 29         | 2013-03-14 11:56:08 | Jane Doe       |\n+------------+---------------------+----------------+\n\n# List unapproved comments.\n$ wp comment list --number=3 --status=hold --fields=ID,comment_date,comment_author\n+------------+---------------------+----------------+\n| comment_ID | comment_date        | comment_author |\n+------------+---------------------+----------------+\n| 8          | 2023-11-10 13:13:06 | John Doe       |\n| 7          | 2023-11-10 13:09:55 | Mr WordPress   |\n| 9          | 2023-11-10 11:22:31 | Jane Doe       |\n+------------+---------------------+----------------+\n\n# List comments marked as spam.\n$ wp comment list --status=spam --fields=ID,comment_date,comment_author\n+------------+---------------------+----------------+\n| comment_ID | comment_date        | comment_author |\n+------------+---------------------+----------------+\n| 2          | 2023-11-10 11:22:31 | Jane Doe       |\n+------------+---------------------+----------------+\n\n# List comments in trash.\n$ wp comment list --status=trash --fields=ID,comment_date,comment_author\n+------------+---------------------+----------------+\n| comment_ID | comment_date        | comment_author |\n+------------+---------------------+----------------+\n| 3          | 2023-11-10 11:22:31 | John Doe       |\n+------------+---------------------+----------------+",
        "available": "<p>These fields will be displayed by default for each comment:<\/p>\n<ul>\n<li>comment_ID<\/li>\n<li>comment_post_ID<\/li>\n<li>comment_date<\/li>\n<li>comment_approved<\/li>\n<li>comment_author<\/li>\n<li>comment_author_email<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>comment_author_url<\/li>\n<li>comment_author_IP<\/li>\n<li>comment_date_gmt<\/li>\n<li>comment_content<\/li>\n<li>comment_karma<\/li>\n<li>comment_agent<\/li>\n<li>comment_type<\/li>\n<li>comment_parent<\/li>\n<li>user_id<\/li>\n<li>url<\/li>\n<\/ul>",
        "synopsis": "wp comment list [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "comment-meta": {
        "title": "comment meta",
        "excerpt": "Adds, updates, deletes, and lists comment custom fields.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Set comment meta\n$ wp comment meta set 123 description \"Mary is a WordPress developer.\"\nSuccess: Updated custom field 'description'.\n\n# Get comment meta\n$ wp comment meta get 123 description\nMary is a WordPress developer.\n\n# Update comment meta\n$ wp comment meta update 123 description \"Mary is an awesome WordPress developer.\"\nSuccess: Updated custom field 'description'.\n\n# Delete comment meta\n$ wp comment meta delete 123 description\nSuccess: Deleted custom field.",
        "available": "",
        "synopsis": ""
    },
    "comment-spam": {
        "title": "comment spam",
        "excerpt": "Marks a comment as spam.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>The IDs of the comments to mark as spam.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Spam comment.\n$ wp comment spam 1337\nSuccess: Marked as spam comment 1337.",
        "available": "",
        "synopsis": "wp comment spam <id>..."
    },
    "core-install": {
        "title": "core install",
        "excerpt": "Runs the standard WordPress installation process.",
        "options": "<dl><dt>--url=&lt;url&gt;<\/dt><dd><p>The address of the new site.<\/p><\/dd><dt>--title=&lt;site-title&gt;<\/dt><dd><p>The title of the new site.<\/p><\/dd><dt>--admin_user=&lt;username&gt;<\/dt><dd><p>The name of the admin user.<\/p><\/dd><dt>[--admin_password=&lt;password&gt;]<\/dt><dd><p>The password for the admin user. Defaults to randomly generated string.<\/p><\/dd><dt>--admin_email=&lt;email&gt;<\/dt><dd><p>The email address for the admin user.<\/p><\/dd><dt>[--locale=&lt;locale&gt;]<\/dt><dd><p>The locale\/language for the installation (e.g. <code>de_DE<\/code>). Default is <code>en_US<\/code>.<\/p><\/dd><dt>[--skip-email]<\/dt><dd><p>Don't send an email notification to the new admin user.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates the WordPress tables in the database using the URL, title, and\ndefault admin user details provided. Performs the famous 5 minute install\nin seconds or less.<\/p>\n<p>Note: if you've installed WordPress in a subdirectory, then you'll need\nto <code>wp option update siteurl<\/code> after <code>wp core install<\/code>. For instance, if\nWordPress is installed in the <code>\/wp<\/code> directory and your domain is example.com,\nthen you'll need to run <code>wp option update siteurl http:\/\/example.com\/wp<\/code> for\nyour WordPress installation to function properly.<\/p>\n<p>Note: When using custom user tables (e.g. <code>CUSTOM_USER_TABLE<\/code>), the admin\nemail and password are ignored if the user_login already exists. If the\nuser_login doesn't exist, a new user will be created.<\/p>",
        "has_child": 0,
        "examples": "# Install WordPress in 5 seconds\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\nSuccess: WordPress installed successfully.\n\n# Install WordPress without disclosing admin_password to bash history\n$ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_email=info@example.com --prompt=admin_password < admin_password.txt",
        "available": "",
        "synopsis": "wp core install --url=<url> --title=<site-title> --admin_user=<username> [--admin_password=<password>] --admin_email=<email> [--locale=<locale>] [--skip-email]"
    },
    "core-version": {
        "title": "core version",
        "excerpt": "Displays the WordPress version.",
        "options": "<dl><dt>[--extra]<\/dt><dd><p>Show extended version information.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Display the WordPress version\n$ wp core version\n4.5.2\n\n# Display WordPress version along with other information\n$ wp core version --extra\nWordPress version: 4.5.2\nDatabase revision: 36686\nTinyMCE version:   4.310 (4310-20160418)\nPackage language:  en_US",
        "available": "",
        "synopsis": "wp core version [--extra]"
    },
    "i18n-make-mo": {
        "title": "i18n make-mo",
        "excerpt": "Create MO files from PO files.",
        "options": "<dl><dt>&lt;source&gt;<\/dt><dd><p>Path to an existing PO file or a directory containing multiple PO files.<\/p><\/dd><dt>[&lt;destination&gt;]<\/dt><dd><p>Path to the destination file or directory for the resulting MO files. Defaults to the source directory.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create MO files for all PO files in the current directory.\n$ wp i18n make-mo .\n\n# Create a MO file from a single PO file in a specific directory.\n$ wp i18n make-mo example-plugin-de_DE.po languages\n\n# Create a MO file from a single PO file to a specific file destination\n$ wp i18n make-mo example-plugin-de_DE.po languages\/bar.mo",
        "available": "",
        "synopsis": "wp i18n make-mo <source> [<destination>]"
    },
    "media-import": {
        "title": "media import",
        "excerpt": "Creates attachments from local files or URLs.",
        "options": "<dl><dt>&lt;file&gt;...<\/dt><dd><p>Path to file or files to be imported. Supports the glob(3) capabilities of the current shell.     If file is recognized as a URL (for example, with a scheme of http or ftp), the file will be     downloaded to a temp file before being sideloaded.<\/p><\/dd><dt>[--post_id=&lt;post_id&gt;]<\/dt><dd><p>ID of the post to attach the imported files to.<\/p><\/dd><dt>[--post_name=&lt;post_name&gt;]<\/dt><dd><p>Name of the post to attach the imported files to.<\/p><\/dd><dt>[--file_name=&lt;name&gt;]<\/dt><dd><p>Attachment name (post_name field).<\/p><\/dd><dt>[--title=&lt;title&gt;]<\/dt><dd><p>Attachment title (post title field).<\/p><\/dd><dt>[--caption=&lt;caption&gt;]<\/dt><dd><p>Caption for attachment (post excerpt field).<\/p><\/dd><dt>[--alt=&lt;alt_text&gt;]<\/dt><dd><p>Alt text for image (saved as post meta).<\/p><\/dd><dt>[--desc=&lt;description&gt;]<\/dt><dd><p>&quot;Description&quot; field (post content) of attachment post.<\/p><\/dd><dt>[--skip-copy]<\/dt><dd><p>If set, media files (local only) are imported to the library but not moved on disk. File names will not be run through wp_unique_filename() with this set.<\/p><\/dd><dt>[--preserve-filetime]<\/dt><dd><p>Use the file modified time as the post published &amp; modified dates. Remote files will always use the current time.<\/p><\/dd><dt>[--featured_image]<\/dt><dd><p>If set, set the imported image as the Featured Image of the post it is attached to.<\/p><\/dd><dt>[--porcelain[=&lt;field&gt;]]<\/dt><dd><p>Output a single field for each imported image. Defaults to attachment ID when used as flag.<div><span>Options:<\/span><ul><li><code>url<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Import all jpgs in the current user's \"Pictures\" directory, not attached to any post.\n$ wp media import ~\/Pictures\/**\\\/*.jpg\nImported file '\/home\/person\/Pictures\/landscape-photo.jpg' as attachment ID 1751.\nImported file '\/home\/person\/Pictures\/fashion-icon.jpg' as attachment ID 1752.\nSuccess: Imported 2 of 2 items.\n\n# Import a local image and set it to be the post thumbnail for a post.\n$ wp media import ~\/Downloads\/image.png --post_id=123 --title=\"A downloaded picture\" --featured_image\nImported file '\/home\/person\/Downloads\/image.png' as attachment ID 1753 and attached to post 123 as featured image.\nSuccess: Imported 1 of 1 images.\n\n# Import a local image, but set it as the featured image for all posts.\n# 1. Import the image and get its attachment ID.\n# 2. Assign the attachment ID as the featured image for all posts.\n$ ATTACHMENT_ID=\"$(wp media import ~\/Downloads\/image.png --porcelain)\"\n$ wp post list --post_type=post --format=ids | xargs -d ' ' -I % wp post meta add % _thumbnail_id $ATTACHMENT_ID\nSuccess: Added custom field.\nSuccess: Added custom field.\n\n# Import an image from the web.\n$ wp media import http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png --title='The WordPress logo' --alt=\"Semantic personal publishing\"\nImported file 'http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png' as attachment ID 1755.\nSuccess: Imported 1 of 1 images.\n\n# Get the URL for an attachment after import.\n$ wp media import http:\/\/s.wordpress.org\/style\/images\/wp-header-logo.png --porcelain | xargs -I {} wp post list --post__in={} --field=url --post_type=attachment\nhttp:\/\/wordpress-develop.dev\/wp-header-logo\/",
        "available": "",
        "synopsis": "wp media import <file>... [--post_id=<post_id>] [--post_name=<post_name>] [--file_name=<name>] [--title=<title>] [--caption=<caption>] [--alt=<alt_text>] [--desc=<description>] [--skip-copy] [--preserve-filetime] [--featured_image] [--porcelain[=<field>]]"
    },
    "network-meta": {
        "title": "network meta",
        "excerpt": "Gets, adds, updates, deletes, and lists network custom fields.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Get a list of super-admins\n$ wp network meta get 1 site_admins\narray (\n0 => 'supervisor',\n)",
        "available": "",
        "synopsis": ""
    },
    "option-patch": {
        "title": "option patch",
        "excerpt": "Updates a nested value in an option.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The option name.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Add 'bar' to the 'foo' key on an option with name 'option_name'\n$ wp option patch insert option_name foo bar\nSuccess: Updated 'option_name' option.\n\n# Update the value of 'foo' key to 'new' on an option with name 'option_name'\n$ wp option patch update option_name foo new\nSuccess: Updated 'option_name' option.\n\n# Set nested value of 'bar' key to value we have in the patch file on an option with name 'option_name'.\n$ wp option patch update option_name foo bar < patch\nSuccess: Updated 'option_name' option.\n\n# Update the value for the key 'not-a-key' which is not exist on an option with name 'option_name'.\n$ wp option patch update option_name foo not-a-key new-value\nError: No data exists for key \"not-a-key\"\n\n# Update the value for the key 'foo' without passing value on an option with name 'option_name'.\n$ wp option patch update option_name foo\nError: Please provide value to update.\n\n# Delete the nested key 'bar' under 'foo' key on an option with name 'option_name'.\n$ wp option patch delete option_name foo bar\nSuccess: Updated 'option_name' option.",
        "available": "",
        "synopsis": "wp option patch <action> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "option-pluck": {
        "title": "option pluck",
        "excerpt": "Gets a nested value from an option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The option name.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp option pluck <key> <key-path>... [--format=<format>]"
    },
    "package-list": {
        "title": "package list",
        "excerpt": "Lists installed WP-CLI packages.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp package list\n+-----------------------+------------------------------------------+---------+----------+\n| name                  | description                              | authors | version  |\n+-----------------------+------------------------------------------+---------+----------+\n| wp-cli\/server-command | Start a development server for WordPress |         | dev-main |\n+-----------------------+------------------------------------------+---------+----------+",
        "available": "<p>These fields will be displayed by default for each package:<\/p>\n<ul>\n<li>name<\/li>\n<li>authors<\/li>\n<li>version<\/li>\n<li>update<\/li>\n<li>update_version<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>description<\/li>\n<\/ul>",
        "synopsis": "wp package list [--fields=<fields>] [--format=<format>]"
    },
    "package-path": {
        "title": "package path",
        "excerpt": "Gets the path to an installed WP-CLI package, or the package directory.",
        "options": "<dl><dt>[&lt;name&gt;]<\/dt><dd><p>Name of the package to get the directory for.<\/p><\/dd><\/dl>",
        "options_extra": "<p>If you want to contribute to a package, this is a great way to jump to it.<\/p>",
        "has_child": 0,
        "examples": "# Get package path\n$ wp package path\n\/home\/person\/.wp-cli\/packages\/\n\n# Change directory to package path\n$ cd $(wp package path) && pwd\n\/home\/vagrant\/.wp-cli\/packages",
        "available": "",
        "synopsis": "wp package path [<name>]"
    },
    "rewrite-list": {
        "title": "rewrite list",
        "excerpt": "Gets a list of the current rewrite rules.",
        "options": "<dl><dt>[--match=&lt;url&gt;]<\/dt><dd><p>Show rewrite rules matching a particular URL.<\/p><\/dd><dt>[--source=&lt;source&gt;]<\/dt><dd><p>Show rewrite rules from a particular source.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to match,query,source.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp rewrite list --format=csv\nmatch,query,source\n^wp-json\/?$,index.php?rest_route=\/,other\n^wp-json\/(.*)?,index.php?rest_route=\/$matches[1],other\ncategory\/(.+?)\/feed\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\ncategory\/(.+?)\/(feed|rdf|rss|rss2|atom)\/?$,index.php?category_name=$matches[1]&feed=$matches[2],category\ncategory\/(.+?)\/embed\/?$,index.php?category_name=$matches[1]&embed=true,category",
        "available": "",
        "synopsis": "wp rewrite list [--match=<url>] [--source=<source>] [--fields=<fields>] [--format=<format>]"
    },
    "sidebar-list": {
        "title": "sidebar list",
        "excerpt": "Lists registered sidebars.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>ids<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp sidebar list --fields=name,id --format=csv\nname,id\n\"Widget Area\",sidebar-1\n\"Inactive Widgets\",wp_inactive_widgets",
        "available": "<p>These fields will be displayed by default for each sidebar:<\/p>\n<ul>\n<li>name<\/li>\n<li>id<\/li>\n<li>description<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>class<\/li>\n<li>before_widget<\/li>\n<li>after_widget<\/li>\n<li>before_title<\/li>\n<li>after_title<\/li>\n<\/ul>",
        "synopsis": "wp sidebar list [--fields=<fields>] [--format=<format>]"
    },
    "site-archive": {
        "title": "site archive",
        "excerpt": "Archives one or more sites.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to archive. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to archive. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site archive 123\nSuccess: Site 123 archived.\n\n$ wp site archive --slug=demo\nSuccess: Site 123 archived.",
        "available": "",
        "synopsis": "wp site archive [<id>...] [--slug=<slug>]"
    },
    "site-private": {
        "title": "site private",
        "excerpt": "Sets one or more sites as private.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to set as private. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be set as private. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site private 123\nSuccess: Site 123 marked as private.\n\n$ wp site private --slug=demo\nSuccess: Site 123 marked as private.",
        "available": "",
        "synopsis": "wp site private [<id>...] [--slug=<slug>]"
    },
    "taxonomy-get": {
        "title": "taxonomy get",
        "excerpt": "Gets details about a registered taxonomy.",
        "options": "<dl><dt>&lt;taxonomy&gt;<\/dt><dd><p>Taxonomy slug.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole taxonomy, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get details of `category` taxonomy.\n$ wp taxonomy get category --fields=name,label,object_type\n+-------------+------------+\n| Field       | Value      |\n+-------------+------------+\n| name        | category   |\n| label       | Categories |\n| object_type | [\"post\"]   |\n+-------------+------------+\n\n# Get capabilities of 'post_tag' taxonomy.\n$ wp taxonomy get post_tag --field=cap\n{\"manage_terms\":\"manage_categories\",\"edit_terms\":\"manage_categories\",\"delete_terms\":\"manage_categories\",\"assign_terms\":\"edit_posts\"}",
        "available": "<p>These fields will be displayed by default for the specified taxonomy:<\/p>\n<ul>\n<li>name<\/li>\n<li>label<\/li>\n<li>description<\/li>\n<li>object_type<\/li>\n<li>show_tagcloud<\/li>\n<li>hierarchical<\/li>\n<li>public<\/li>\n<li>labels<\/li>\n<li>cap<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>count<\/li>\n<\/ul>",
        "synopsis": "wp taxonomy get <taxonomy> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "term-migrate": {
        "title": "term migrate",
        "excerpt": "Migrate a term of a taxonomy to another taxonomy.",
        "options": "<dl><dt>&lt;term&gt;<\/dt><dd><p>Slug or ID of the term to migrate.<\/p><\/dd><dt>[--by=&lt;field&gt;]<\/dt><dd><p>Explicitly handle the term value as a slug or id. [Default: id]<div><span>Options:<\/span><ul><li><code>slug<\/code><\/li><li><code>id<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--from=&lt;taxonomy&gt;]<\/dt><dd><p>Taxonomy slug of the term to migrate.<\/p><\/dd><dt>[--to=&lt;taxonomy&gt;]<\/dt><dd><p>Taxonomy slug to migrate to.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Migrate a category's term (video) to tag taxonomy.\n$ wp term migrate 9190 --from=category --to=post_tag\nTerm 'video' assigned to post 1155.\nTerm 'video' migrated.\nOld instance of term 'video' removed from its original taxonomy.\nSuccess: Migrated the term 'video' from taxonomy 'category' to taxonomy 'post_tag' for 1 post.",
        "available": "",
        "synopsis": "wp term migrate <term> [--by=<field>] [--from=<taxonomy>] [--to=<taxonomy>]"
    },
    "term-recount": {
        "title": "term recount",
        "excerpt": "Recalculates number of posts assigned to each term.",
        "options": "<dl><dt>&lt;taxonomy&gt;...<\/dt><dd><p>One or more taxonomies to recalculate.<\/p><\/dd><\/dl>",
        "options_extra": "<p>In instances where manual updates are made to the terms assigned to\nposts in the database, the number of posts associated with a term\ncan become out-of-sync with the actual number of posts.<\/p>\n<p>This command runs wp_update_term_count() on the taxonomy's terms\nto bring the count back to the correct value.<\/p>",
        "has_child": 0,
        "examples": "# Recount posts assigned to each categories and tags\n$ wp term recount category post_tag\nSuccess: Updated category term count.\nSuccess: Updated post_tag term count.\n\n# Recount all listed taxonomies\n$ wp taxonomy list --field=name | xargs wp term recount\nSuccess: Updated category term count.\nSuccess: Updated post_tag term count.\nSuccess: Updated nav_menu term count.\nSuccess: Updated link_category term count.\nSuccess: Updated post_format term count.",
        "available": "",
        "synopsis": "wp term recount <taxonomy>..."
    },
    "theme-delete": {
        "title": "theme delete",
        "excerpt": "Deletes one or more themes.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to delete.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all themes will be deleted except active theme.<\/p><\/dd><dt>[--force]<\/dt><dd><p>To delete active theme use this.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Removes the theme or themes from the filesystem.<\/p>",
        "has_child": 0,
        "examples": "$ wp theme delete twentytwelve\nDeleted 'twentytwelve' theme.\nSuccess: Deleted 1 of 1 themes.",
        "available": "",
        "synopsis": "wp theme delete [<theme>...] [--all] [--force]"
    },
    "theme-enable": {
        "title": "theme enable",
        "excerpt": "Enables a theme on a WordPress multisite install.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>The theme to enable.<\/p><\/dd><dt>[--network]<\/dt><dd><p>If set, the theme is enabled for the entire network<\/p><\/dd><dt>[--activate]<\/dt><dd><p>If set, the theme is activated for the current site. Note that the &quot;network&quot; flag has no influence on this.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Permits theme to be activated from the dashboard of a site on a WordPress\nmultisite install.<\/p>",
        "has_child": 0,
        "examples": "# Enable theme\n$ wp theme enable twentysixteen\nSuccess: Enabled the 'Twenty Sixteen' theme.\n\n# Network enable theme\n$ wp theme enable twentysixteen --network\nSuccess: Network enabled the 'Twenty Sixteen' theme.\n\n# Network enable and activate theme for current site\n$ wp theme enable twentysixteen --activate\nSuccess: Enabled the 'Twenty Sixteen' theme.\nSuccess: Switched to 'Twenty Sixteen' theme.",
        "available": "",
        "synopsis": "wp theme enable <theme> [--network] [--activate]"
    },
    "theme-search": {
        "title": "theme search",
        "excerpt": "Searches the WordPress.org theme directory.",
        "options": "<dl><dt>&lt;search&gt;<\/dt><dd><p>The string to search for.<\/p><\/dd><dt>[--page=&lt;page&gt;]<\/dt><dd><p>Optional page to display. [Default: 1]<\/p><\/dd><dt>[--per-page=&lt;per-page&gt;]<\/dt><dd><p>Optional number of results to display. Defaults to 10.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each theme.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Ask for specific fields from the API. Defaults to name,slug,author,rating. Acceptable values: <strong>name<\/strong>: Theme Name\n<strong>slug<\/strong>: Theme Slug\n<strong>version<\/strong>: Current Version Number\n<strong>author<\/strong>: Theme Author\n<strong>preview_url<\/strong>: Theme Preview URL\n<strong>screenshot_url<\/strong>: Theme Screenshot URL\n<strong>rating<\/strong>: Theme Rating\n<strong>num_ratings<\/strong>: Number of Theme Ratings\n<strong>homepage<\/strong>: Theme Author's Homepage\n<strong>description<\/strong>: Theme Description\n<strong>url<\/strong>: Theme's URL on wordpress.org<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Displays themes in the WordPress.org theme directory matching a given\nsearch query.<\/p>",
        "has_child": 0,
        "examples": "$ wp theme search photo --per-page=6\nSuccess: Showing 6 of 203 themes.\n+----------------------+----------------------+--------+\n| name                 | slug                 | rating |\n+----------------------+----------------------+--------+\n| Photos               | photos               | 100    |\n| Infinite Photography | infinite-photography | 100    |\n| PhotoBook            | photobook            | 100    |\n| BG Photo Frame       | bg-photo-frame       | 0      |\n| fPhotography         | fphotography         | 0      |\n| Photo Perfect        | photo-perfect        | 98     |\n+----------------------+----------------------+--------+",
        "available": "",
        "synopsis": "wp theme search <search> [--page=<page>] [--per-page=<per-page>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "theme-status": {
        "title": "theme status",
        "excerpt": "Reveals the status of one or all themes.",
        "options": "<dl><dt>[&lt;theme&gt;]<\/dt><dd><p>A particular theme to show the status for.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp theme status twentysixteen\nTheme twentysixteen details:\nName: Twenty Sixteen\nStatus: Inactive\nVersion: 1.2\nAuthor: the WordPress team",
        "available": "",
        "synopsis": "wp theme status [<theme>]"
    },
    "theme-update": {
        "title": "theme update",
        "excerpt": "Updates one or more themes.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to update.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all themes that have updates will be updated.<\/p><\/dd><dt>[--exclude=&lt;theme-names&gt;]<\/dt><dd><p>Comma separated list of theme names that should be excluded from updating.<\/p><\/dd><dt>[--minor]<\/dt><dd><p>Only perform updates for minor releases (e.g. from 1.3 to 1.4 instead of 2.0)<\/p><\/dd><dt>[--patch]<\/dt><dd><p>Only perform updates for patch releases (e.g. from 1.3 to 1.3.3 instead of 1.4)<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>summary<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>If set, the theme will be updated to the specified version.<\/p><\/dd><dt>[--dry-run]<\/dt><dd><p>Preview which themes would be updated.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update multiple themes\n$ wp theme update twentyfifteen twentysixteen\nDownloading update from https:\/\/downloads.wordpress.org\/theme\/twentyfifteen.1.5.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the theme...\nTheme updated successfully.\nDownloading update from https:\/\/downloads.wordpress.org\/theme\/twentysixteen.1.2.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the theme...\nTheme updated successfully.\n+---------------+-------------+-------------+---------+\n| name          | old_version | new_version | status  |\n+---------------+-------------+-------------+---------+\n| twentyfifteen | 1.4         | 1.5         | Updated |\n| twentysixteen | 1.1         | 1.2         | Updated |\n+---------------+-------------+-------------+---------+\nSuccess: Updated 2 of 2 themes.\n\n# Exclude themes updates when bulk updating the themes\n$ wp theme update --all --exclude=twentyfifteen\nDownloading update from https:\/\/downloads.wordpress.org\/theme\/astra.1.0.5.1.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the theme...\nTheme updated successfully.\nDownloading update from https:\/\/downloads.wordpress.org\/theme\/twentyseventeen.1.2.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the theme...\nTheme updated successfully.\n+-----------------+----------+---------+----------------+\n| name            | status   | version | update_version |\n+-----------------+----------+---------+----------------+\n| astra           | inactive | 1.0.1   | 1.0.5.1        |\n| twentyseventeen | inactive | 1.1     | 1.2            |\n+-----------------+----------+---------+----------------+\nSuccess: Updated 2 of 2 themes.\n\n# Update all themes\n$ wp theme update --all",
        "available": "",
        "synopsis": "wp theme update [<theme>...] [--all] [--exclude=<theme-names>] [--minor] [--patch] [--format=<format>] [--version=<version>] [--dry-run] [--insecure]"
    },
    "user-add-cap": {
        "title": "user add-cap",
        "excerpt": "Adds a capability to a user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>&lt;cap&gt;<\/dt><dd><p>The capability to add.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Add a capability for a user\n$ wp user add-cap john create_premium_item\nSuccess: Added 'create_premium_item' capability for john (16).\n\n# Add a capability for a user\n$ wp user add-cap 15 edit_product\nSuccess: Added 'edit_product' capability for johndoe (15).",
        "available": "",
        "synopsis": "wp user add-cap <user> <cap>"
    },
    "user-session": {
        "title": "user session",
        "excerpt": "Destroys and lists a user's sessions.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# List a user's sessions.\n$ wp user session list admin@example.com --format=csv\nlogin_time,expiration_time,ip,ua\n\"2016-01-01 12:34:56\",\"2016-02-01 12:34:56\",127.0.0.1,\"Mozilla\/5.0...\"\n\n# Destroy the most recent session of the given user.\n$ wp user session destroy admin\nSuccess: Destroyed session. 3 sessions remaining.",
        "available": "",
        "synopsis": ""
    },
    "widget-reset": {
        "title": "widget reset",
        "excerpt": "Resets sidebar.",
        "options": "<dl><dt>[&lt;sidebar-id&gt;...]<\/dt><dd><p>One or more sidebars to reset.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all sidebars will be reset.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Removes all widgets from the sidebar and places them in Inactive Widgets.<\/p>",
        "has_child": 0,
        "examples": "# Reset a sidebar\n$ wp widget reset sidebar-1\nSuccess: Sidebar 'sidebar-1' reset.\n\n# Reset multiple sidebars\n$ wp widget reset sidebar-1 sidebar-2\nSuccess: Sidebar 'sidebar-1' reset.\nSuccess: Sidebar 'sidebar-2' reset.\n\n# Reset all sidebars\n$ wp widget reset --all\nSuccess: Sidebar 'sidebar-1' reset.\nSuccess: Sidebar 'sidebar-2' reset.\nSuccess: Sidebar 'sidebar-3' reset.",
        "available": "",
        "synopsis": "wp widget reset [<sidebar-id>...] [--all]"
    },
    "cache-replace": {
        "title": "cache replace",
        "excerpt": "Replaces a value in the object cache, if the value already exists.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Cache key.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>Value to replace.<\/p><\/dd><dt>[&lt;group&gt;]<\/dt><dd><p>Method for grouping data within the cache which allows the same key to be used across groups. [Default: default]<\/p><\/dd><dt>[&lt;expiration&gt;]<\/dt><dd><p>Define how long to keep the value, in seconds. <code>0<\/code> means as long as possible. [Default: 0]<\/p><\/dd><\/dl>",
        "options_extra": "<p>Errors if the value can't be replaced.<\/p>",
        "has_child": 0,
        "examples": "# Replace cache.\n$ wp cache replace my_key new_value my_group\nSuccess: Replaced object 'my_key' in group 'my_group'.",
        "available": "",
        "synopsis": "wp cache replace <key> <value> [<group>] [<expiration>]"
    },
    "cli-alias-add": {
        "title": "cli alias add",
        "excerpt": "Creates an alias.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the alias.<\/p><\/dd><dt>[--set-user=&lt;user&gt;]<\/dt><dd><p>Set user for alias.<\/p><\/dd><dt>[--set-url=&lt;url&gt;]<\/dt><dd><p>Set url for alias.<\/p><\/dd><dt>[--set-path=&lt;path&gt;]<\/dt><dd><p>Set path for alias.<\/p><\/dd><dt>[--set-ssh=&lt;ssh&gt;]<\/dt><dd><p>Set ssh for alias.<\/p><\/dd><dt>[--set-http=&lt;http&gt;]<\/dt><dd><p>Set http for alias.<\/p><\/dd><dt>[--grouping=&lt;grouping&gt;]<\/dt><dd><p>For grouping multiple aliases.<\/p><\/dd><dt>[--config=&lt;config&gt;]<\/dt><dd><p>Config file to be considered for operations. [Default: global]<div><span>Options:<\/span><ul><li><code>global<\/code><\/li><li><code>project<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Add alias to global config.\n$ wp cli alias add @prod  --set-ssh=login@host --set-path=\/path\/to\/wordpress\/install\/ --set-user=wpcli\nSuccess: Added '@prod' alias.\n\n# Add alias to project config.\n$ wp cli alias add @prod --set-ssh=login@host --set-path=\/path\/to\/wordpress\/install\/ --set-user=wpcli --config=project\nSuccess: Added '@prod' alias.\n\n# Add group of aliases.\n$ wp cli alias add @multiservers --grouping=servera,serverb\nSuccess: Added '@multiservers' alias.",
        "available": "",
        "synopsis": "wp cli alias add <key> [--set-user=<user>] [--set-url=<url>] [--set-path=<path>] [--set-ssh=<ssh>] [--set-http=<http>] [--grouping=<grouping>] [--config=<config>]"
    },
    "cli-alias-get": {
        "title": "cli alias get",
        "excerpt": "Gets the value for an alias.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the alias.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get alias.\n$ wp cli alias get @prod\nssh: dev@somedeve.env:12345\/home\/dev\/",
        "available": "",
        "synopsis": "wp cli alias get <key>"
    },
    "comment-count": {
        "title": "comment count",
        "excerpt": "Counts comments, on whole blog or on a given post.",
        "options": "<dl><dt>[&lt;post-id&gt;]<\/dt><dd><p>The ID of the post to count comments in.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Count comments on whole blog.\n$ wp comment count\napproved:        33\nspam:            3\ntrash:           1\npost-trashed:    0\nall:             34\nmoderated:       1\ntotal_comments:  37\n\n# Count comments in a post.\n$ wp comment count 42\napproved:        19\nspam:            0\ntrash:           0\npost-trashed:    0\nall:             19\nmoderated:       0\ntotal_comments:  19",
        "available": "",
        "synopsis": "wp comment count [<post-id>]"
    },
    "comment-trash": {
        "title": "comment trash",
        "excerpt": "Trashes a comment.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>The IDs of the comments to trash.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Trash comment.\n$ wp comment trash 1337\nSuccess: Trashed comment 1337.",
        "available": "",
        "synopsis": "wp comment trash <id>..."
    },
    "config-create": {
        "title": "config create",
        "excerpt": "Generates a wp-config.php file.",
        "options": "<dl><dt>--dbname=&lt;dbname&gt;<\/dt><dd><p>Set the database name.<\/p><\/dd><dt>--dbuser=&lt;dbuser&gt;<\/dt><dd><p>Set the database user.<\/p><\/dd><dt>[--dbpass=&lt;dbpass&gt;]<\/dt><dd><p>Set the database user password.<\/p><\/dd><dt>[--dbhost=&lt;dbhost&gt;]<\/dt><dd><p>Set the database host. [Default: localhost]<\/p><\/dd><dt>[--dbprefix=&lt;dbprefix&gt;]<\/dt><dd><p>Set the database table prefix. [Default: wp_]<\/p><\/dd><dt>[--dbcharset=&lt;dbcharset&gt;]<\/dt><dd><p>Set the database charset. [Default: utf8]<\/p><\/dd><dt>[--dbcollate=&lt;dbcollate&gt;]<\/dt><dd><p>Set the database collation. [Default:]<\/p><\/dd><dt>[--locale=&lt;locale&gt;]<\/dt><dd><p>Set the WPLANG constant. Defaults to $wp_local_package variable.<\/p><\/dd><dt>[--extra-php]<\/dt><dd><p>If set, the command copies additional PHP code into wp-config.php from STDIN.<\/p><\/dd><dt>[--skip-salts]<\/dt><dd><p>If set, keys and salts won't be generated, but should instead be passed via <code>--extra-php<\/code>.<\/p><\/dd><dt>[--skip-check]<\/dt><dd><p>If set, the database connection is not checked.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrites existing files, if present.<\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be created. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry API download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a new wp-config.php with database constants, and verifies that\nthe database constants are correct.<\/p>",
        "has_child": 0,
        "examples": "# Standard wp-config.php file\n$ wp config create --dbname=testing --dbuser=wp --dbpass=securepswd --locale=ro_RO\nSuccess: Generated 'wp-config.php' file.\n\n# Enable WP_DEBUG and WP_DEBUG_LOG\n$ wp config create --dbname=testing --dbuser=wp --dbpass=securepswd --extra-php <<PHP\ndefine( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG_LOG', true );\nPHP\nSuccess: Generated 'wp-config.php' file.\n\n# Avoid disclosing password to bash history by reading from password.txt\n# Using --prompt=dbpass will prompt for the 'dbpass' argument\n$ wp config create --dbname=testing --dbuser=wp --prompt=dbpass < password.txt\nSuccess: Generated 'wp-config.php' file.",
        "available": "",
        "synopsis": "wp config create --dbname=<dbname> --dbuser=<dbuser> [--dbpass=<dbpass>] [--dbhost=<dbhost>] [--dbprefix=<dbprefix>] [--dbcharset=<dbcharset>] [--dbcollate=<dbcollate>] [--locale=<locale>] [--extra-php] [--skip-salts] [--skip-check] [--force] [--config-file=<path>] [--insecure]"
    },
    "config-delete": {
        "title": "config delete",
        "excerpt": "Deletes a specific constant or variable from the wp-config.php file.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name of the wp-config.php constant or variable.<\/p><\/dd><dt>[--type=&lt;type&gt;]<\/dt><dd><p>Type of the config value to delete. Defaults to 'all'. [Default: all]<div><span>Options:<\/span><ul><li><code>constant<\/code><\/li><li><code>variable<\/code><\/li><li><code>all<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be modified. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete the COOKIE_DOMAIN constant from the wp-config.php file.\n$ wp config delete COOKIE_DOMAIN",
        "available": "",
        "synopsis": "wp config delete <name> [--type=<type>] [--config-file=<path>]"
    },
    "core-download": {
        "title": "core download",
        "excerpt": "Downloads core WordPress files.",
        "options": "<dl><dt>[&lt;download-url&gt;]<\/dt><dd><p>Download directly from a provided URL instead of fetching the URL from the wordpress.org servers.<\/p><\/dd><dt>[--path=&lt;path&gt;]<\/dt><dd><p>Specify the path in which to install WordPress. Defaults to current directory.<\/p><\/dd><dt>[--locale=&lt;locale&gt;]<\/dt><dd><p>Select which language you want to download.<\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>Select which version you want to download. Accepts a version number, 'latest' or 'nightly'.<\/p><\/dd><dt>[--skip-content]<\/dt><dd><p>Download WP without the default themes and plugins.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrites existing files, if present.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><dt>[--extract]<\/dt><dd><p>Whether to extract the downloaded file. Defaults to true.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Downloads and extracts WordPress core files to the specified path. Uses\ncurrent directory when no path is specified. Downloaded build is verified\nto have the correct md5 and then cached to the local filesystem.\nSubsequent uses of command will use the local cache if it still exists.<\/p>",
        "has_child": 0,
        "examples": "$ wp core download --locale=nl_NL\nDownloading WordPress 4.5.2 (nl_NL)...\nmd5 hash verified: c5366d05b521831dd0b29dfc386e56a5\nSuccess: WordPress downloaded.",
        "available": "",
        "synopsis": "wp core download [<download-url>] [--path=<path>] [--locale=<locale>] [--version=<version>] [--skip-content] [--force] [--insecure] [--extract]"
    },
    "cron-schedule": {
        "title": "cron schedule",
        "excerpt": "Gets WP-Cron schedules.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# List available cron schedules\n$ wp cron schedule list\n+------------+-------------+----------+\n| name       | display     | interval |\n+------------+-------------+----------+\n| hourly     | Once Hourly | 3600     |\n| twicedaily | Twice Daily | 43200    |\n| daily      | Once Daily  | 86400    |\n+------------+-------------+----------+",
        "available": "",
        "synopsis": ""
    },
    "embed-handler": {
        "title": "embed handler",
        "excerpt": "Retrieves embed handlers.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "",
        "available": "",
        "synopsis": ""
    },
    "i18n-make-php": {
        "title": "i18n make-php",
        "excerpt": "Create PHP files from PO files.",
        "options": "<dl><dt>&lt;source&gt;<\/dt><dd><p>Path to an existing PO file or a directory containing multiple PO files.<\/p><\/dd><dt>[&lt;destination&gt;]<\/dt><dd><p>Path to the destination directory for the resulting PHP files. Defaults to the source directory.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create PHP files for all PO files in the current directory.\n$ wp i18n make-php .\nSuccess: Created 3 files.\n\n# Create a PHP file from a single PO file in a specific directory.\n$ wp i18n make-php example-plugin-de_DE.po languages\nSuccess: Created 1 file.",
        "available": "",
        "synopsis": "wp i18n make-php <source> [<destination>]"
    },
    "i18n-make-pot": {
        "title": "i18n make-pot",
        "excerpt": "Create a POT file for a WordPress project.",
        "options": "<dl><dt>&lt;source&gt;<\/dt><dd><p>Directory to scan for string extraction.<\/p><\/dd><dt>[&lt;destination&gt;]<\/dt><dd><p>Name of the resulting POT file.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Plugin or theme slug. Defaults to the source directory's basename.<\/p><\/dd><dt>[--domain=&lt;domain&gt;]<\/dt><dd><p>Text domain to look for in the source code, unless the <code>--ignore-domain<\/code> option is used. By default, the &quot;Text Domain&quot; header of the plugin or theme is used. If none is provided, it falls back to the project slug.<\/p><\/dd><dt>[--ignore-domain]<\/dt><dd><p>Ignore the text domain completely and extract strings with any text domain.<\/p><\/dd><dt>[--merge[=&lt;paths&gt;]]<\/dt><dd><p>Comma-separated list of POT files whose contents should be merged with the extracted strings. If left empty, defaults to the destination POT file. POT file headers will be ignored.<\/p><\/dd><dt>[--subtract=&lt;paths&gt;]<\/dt><dd><p>Comma-separated list of POT files whose contents should act as some sort of denylist for string extraction. Any string which is found on that denylist will not be extracted. This can be useful when you want to create multiple POT files from the same source directory with slightly different content and no duplicate strings between them.<\/p><\/dd><dt>[--subtract-and-merge]<\/dt><dd><p>Whether source code references and comments from the generated POT file should be instead added to the POT file used for subtraction. Warning: this modifies the files passed to <code>--subtract<\/code>!<\/p><\/dd><dt>[--include=&lt;paths&gt;]<\/dt><dd><p>Comma-separated list of files and paths that should be used for string extraction. If provided, only these files and folders will be taken into account for string extraction. For example, <code>--include=\"src,my-file.php<\/code> will ignore anything besides <code>my-file.php<\/code> and files in the <code>src<\/code> directory. Simple glob patterns can be used, i.e. <code>--include=foo-*.php<\/code> includes any PHP file with the <code>foo-<\/code> prefix. Leading and trailing slashes are ignored, i.e. <code>\/my\/directory\/<\/code> is the same as <code>my\/directory<\/code>.<\/p><\/dd><dt>[--exclude=&lt;paths&gt;]<\/dt><dd><p>Comma-separated list of files and paths that should be skipped for string extraction. For example, <code>--exclude=.github,myfile.php<\/code> would ignore any strings found within <code>myfile.php<\/code> or the <code>.github<\/code> folder. Simple glob patterns can be used, i.e. <code>--exclude=foo-*.php<\/code> excludes any PHP file with the <code>foo-<\/code> prefix. Leading and trailing slashes are ignored, i.e. <code>\/my\/directory\/<\/code> is the same as <code>my\/directory<\/code>. The following files and folders are always excluded: node_modules, .git, .svn, .CVS, .hg, vendor, *.min.js.<\/p><\/dd><dt>[--headers=&lt;headers&gt;]<\/dt><dd><p>Array in JSON format of custom headers which will be added to the POT file. Defaults to empty array.<\/p><\/dd><dt>[--location]<\/dt><dd><p>Whether to write <code>#: filename:line<\/code> lines. Defaults to true, use <code>--no-location<\/code> to skip the removal. Note that disabling this option makes it harder for technically skilled translators to understand each message\u2019s context.<\/p><\/dd><dt>[--skip-js]<\/dt><dd><p>Skips JavaScript string extraction. Useful when this is done in another build step, e.g. through Babel.<\/p><\/dd><dt>[--skip-php]<\/dt><dd><p>Skips PHP string extraction.<\/p><\/dd><dt>[--skip-blade]<\/dt><dd><p>Skips Blade-PHP string extraction.<\/p><\/dd><dt>[--skip-block-json]<\/dt><dd><p>Skips string extraction from block.json files.<\/p><\/dd><dt>[--skip-theme-json]<\/dt><dd><p>Skips string extraction from theme.json files.<\/p><\/dd><dt>[--skip-audit]<\/dt><dd><p>Skips string audit where it tries to find possible mistakes in translatable strings. Useful when running in an automated environment.<\/p><\/dd><dt>[--file-comment=&lt;file-comment&gt;]<\/dt><dd><p>String that should be added as a comment to the top of the resulting POT file. By default, a copyright comment is added for WordPress plugins and themes in the following manner: ```\nCopyright (C) 2018 Example Plugin Author\nThis file is distributed under the same license as the Example Plugin package.<\/p>\n<pre><code class=\"language-If\">     this: ```\n     Copyright (C) 2018 Example Plugin Author\n     This file is distributed under the GPLv2.<\/code><\/pre><\/dd><dt>[--package-name=&lt;name&gt;]<\/dt><dd><p>Name to use for package name in the resulting POT file's <code>Project-Id-Version<\/code> header. Overrides plugin or theme name, if applicable.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Scans PHP, Blade-PHP and JavaScript files for translatable strings, as well as theme stylesheets and plugin files\nif the source directory is detected as either a plugin or theme.<\/p>",
        "has_child": 0,
        "examples": "# Create a POT file for the WordPress plugin\/theme in the current directory\n$ wp i18n make-pot . languages\/my-plugin.pot\n\n# Create a POT file for the continents and cities list in WordPress core.\n$ wp i18n make-pot . continents-and-cities.pot --include=\"wp-admin\/includes\/continents-cities.php\"\n--ignore-domain",
        "available": "",
        "synopsis": "wp i18n make-pot <source> [<destination>] [--slug=<slug>] [--domain=<domain>] [--ignore-domain] [--merge[=<paths>]] [--subtract=<paths>] [--subtract-and-merge] [--include=<paths>] [--exclude=<paths>] [--headers=<headers>] [--location] [--skip-js] [--skip-php] [--skip-blade] [--skip-block-json] [--skip-theme-json] [--skip-audit] [--file-comment=<file-comment>] [--package-name=<name>]"
    },
    "language-core": {
        "title": "language core",
        "excerpt": "Installs, activates, and manages core language packs.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Install the Dutch core language pack.\n$ wp language core install nl_NL\nSuccess: Language installed.\n\n# Activate the Dutch core language pack.\n$ wp language core activate nl_NL\nSuccess: Language activated.\n\n# Uninstall the Dutch core language pack.\n$ wp language core uninstall nl_NL\nSuccess: Language uninstalled.\n\n# List installed core language packages.\n$ wp language core list --status=installed\n+----------+--------------+-------------+-----------+-----------+---------------------+\n| language | english_name | native_name | status    | update    | updated             |\n+----------+--------------+-------------+-----------+-----------+---------------------+\n| nl_NL    | Dutch        | Nederlands  | installed | available | 2016-05-13 08:12:50 |\n+----------+--------------+-------------+-----------+-----------+---------------------+",
        "available": "",
        "synopsis": ""
    },
    "menu-location": {
        "title": "menu location",
        "excerpt": "Assigns, removes, and lists a menu's locations.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# List available menu locations\n$ wp menu location list\n+----------+-------------------+\n| location | description       |\n+----------+-------------------+\n| primary  | Primary Menu      |\n| social   | Social Links Menu |\n+----------+-------------------+\n\n# Assign the 'primary-menu' menu to the 'primary' location\n$ wp menu location assign primary-menu primary\nSuccess: Assigned location primary to menu primary-menu.\n\n# Remove the 'primary-menu' menu from the 'primary' location\n$ wp menu location remove primary-menu primary\nSuccess: Removed location from menu.",
        "available": "",
        "synopsis": ""
    },
    "option-delete": {
        "title": "option delete",
        "excerpt": "Deletes an option.",
        "options": "<dl><dt>&lt;key&gt;...<\/dt><dd><p>Key for the option.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete an option.\n$ wp option delete my_option\nSuccess: Deleted 'my_option' option.\n\n# Delete multiple options.\n$ wp option delete option_one option_two option_three\nSuccess: Deleted 'option_one' option.\nSuccess: Deleted 'option_two' option.\nWarning: Could not delete 'option_three' option. Does it exist?",
        "available": "",
        "synopsis": "wp option delete <key>..."
    },
    "option-update": {
        "title": "option update",
        "excerpt": "Updates an option value.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The name of the option to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--autoload=&lt;autoload&gt;]<\/dt><dd><p>Requires WP 4.2. Should this option be automatically loaded.<div><span>Options:<\/span><ul><li><code>'yes'<\/code><\/li><li><code>'no'<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update an option by reading from a file.\n$ wp option update my_option < value.txt\nSuccess: Updated 'my_option' option.\n\n# Update one option on multiple sites using xargs.\n$ wp site list --field=url | xargs -n1 -I {} sh -c 'wp --url={} option update my_option my_value'\nSuccess: Updated 'my_option' option.\nSuccess: Updated 'my_option' option.\n\n# Update site blog name.\n$ wp option update blogname \"Random blog name\"\nSuccess: Updated 'blogname' option.\n\n# Update site blog description.\n$ wp option update blogdescription \"Some random blog description\"\nSuccess: Updated 'blogdescription' option.\n\n# Update admin email address.\n$ wp option update admin_email someone@example.com\nSuccess: Updated 'admin_email' option.\n\n# Set the default role.\n$ wp option update default_role author\nSuccess: Updated 'default_role' option.\n\n# Set the timezone string.\n$ wp option update timezone_string \"America\/New_York\"\nSuccess: Updated 'timezone_string' option.",
        "available": "",
        "synopsis": "wp option update <key> [<value>] [--autoload=<autoload>] [--format=<format>]"
    },
    "plugin-delete": {
        "title": "plugin delete",
        "excerpt": "Deletes plugin files without deactivating or uninstalling.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to delete.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all plugins will be deleted.<\/p><\/dd><dt>[--exclude=&lt;name&gt;]<\/dt><dd><p>Comma separated list of plugin slugs to be excluded from deletion.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete plugin\n$ wp plugin delete hello\nDeleted 'hello' plugin.\nSuccess: Deleted 1 of 1 plugins.\n\n# Delete inactive plugins\n$ wp plugin delete $(wp plugin list --status=inactive --field=name)\nDeleted 'tinymce-templates' plugin.\nSuccess: Deleted 1 of 1 plugins.\n\n# Delete all plugins excluding specified ones\n$ wp plugin delete --all --exclude=hello-dolly,jetpack\nDeleted 'akismet' plugin.\nDeleted 'tinymce-templates' plugin.\nSuccess: Deleted 2 of 2 plugins.",
        "available": "",
        "synopsis": "wp plugin delete [<plugin>...] [--all] [--exclude=<name>]"
    },
    "plugin-search": {
        "title": "plugin search",
        "excerpt": "Searches the WordPress.org plugin directory.",
        "options": "<dl><dt>&lt;search&gt;<\/dt><dd><p>The string to search for.<\/p><\/dd><dt>[--page=&lt;page&gt;]<\/dt><dd><p>Optional page to display. [Default: 1]<\/p><\/dd><dt>[--per-page=&lt;per-page&gt;]<\/dt><dd><p>Optional number of results to display. [Default: 10]<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each plugin.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Ask for specific fields from the API. Defaults to name,slug,author_profile,rating. Acceptable values: <strong>name<\/strong>: Plugin Name\n<strong>slug<\/strong>: Plugin Slug\n<strong>version<\/strong>: Current Version Number\n<strong>author<\/strong>: Plugin Author\n<strong>author_profile<\/strong>: Plugin Author Profile\n<strong>contributors<\/strong>: Plugin Contributors\n<strong>requires<\/strong>: Plugin Minimum Requirements\n<strong>tested<\/strong>: Plugin Tested Up To\n<strong>compatibility<\/strong>: Plugin Compatible With\n<strong>rating<\/strong>: Plugin Rating in Percent and Total Number\n<strong>ratings<\/strong>: Plugin Ratings for each star (1-5)\n<strong>num_ratings<\/strong>: Number of Plugin Ratings\n<strong>homepage<\/strong>: Plugin Author's Homepage\n<strong>description<\/strong>: Plugin's Description\n<strong>short_description<\/strong>: Plugin's Short Description\n<strong>sections<\/strong>: Plugin Readme Sections: description, installation, FAQ, screenshots, other notes, and changelog\n<strong>downloaded<\/strong>: Plugin Download Count\n<strong>last_updated<\/strong>: Plugin's Last Update\n<strong>added<\/strong>: Plugin's Date Added to wordpress.org Repository\n<strong>tags<\/strong>: Plugin's Tags\n<strong>versions<\/strong>: Plugin's Available Versions with D\/L Link\n<strong>donate_link<\/strong>: Plugin's Donation Link\n<strong>banners<\/strong>: Plugin's Banner Image Link\n<strong>icons<\/strong>: Plugin's Icon Image Link\n<strong>active_installs<\/strong>: Plugin's Number of Active Installs\n<strong>contributors<\/strong>: Plugin's List of Contributors\n<strong>url<\/strong>: Plugin's URL on wordpress.org<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Displays plugins in the WordPress.org plugin directory matching a given\nsearch query.<\/p>",
        "has_child": 0,
        "examples": "$ wp plugin search dsgnwrks --per-page=20 --format=json\nSuccess: Showing 3 of 3 plugins.\n[{\"name\":\"DsgnWrks Instagram Importer Debug\",\"slug\":\"dsgnwrks-instagram-importer-debug\",\"rating\":0},{\"name\":\"DsgnWrks Instagram Importer\",\"slug\":\"dsgnwrks-instagram-importer\",\"rating\":84},{\"name\":\"DsgnWrks Twitter Importer\",\"slug\":\"dsgnwrks-twitter-importer\",\"rating\":80}]\n\n$ wp plugin search dsgnwrks --fields=name,version,slug,rating,num_ratings\nSuccess: Showing 3 of 3 plugins.\n+-----------------------------------+---------+-----------------------------------+--------+-------------+\n| name                              | version | slug                              | rating | num_ratings |\n+-----------------------------------+---------+-----------------------------------+--------+-------------+\n| DsgnWrks Instagram Importer Debug | 0.1.6   | dsgnwrks-instagram-importer-debug | 0      | 0           |\n| DsgnWrks Instagram Importer       | 1.3.7   | dsgnwrks-instagram-importer       | 84     | 23          |\n| DsgnWrks Twitter Importer         | 1.1.1   | dsgnwrks-twitter-importer         | 80     | 1           |\n+-----------------------------------+---------+-----------------------------------+--------+-------------+",
        "available": "",
        "synopsis": "wp plugin search <search> [--page=<page>] [--per-page=<per-page>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "plugin-status": {
        "title": "plugin status",
        "excerpt": "Reveals the status of one or all plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;]<\/dt><dd><p>A particular plugin to show the status for.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Displays status of all plugins\n$ wp plugin status\n5 installed plugins:\nI akismet                3.1.11\nI easy-digital-downloads 2.5.16\nA theme-check            20160523.1\nI wen-logo-slider        2.0.3\nM ns-pack                1.0.0\nLegend: I = Inactive, A = Active, M = Must Use\n\n# Displays status of a plugin\n$ wp plugin status theme-check\nPlugin theme-check details:\nName: Theme Check\nStatus: Active\nVersion: 20160523.1\nAuthor: Otto42, pross\nDescription: A simple and easy way to test your theme for all the latest WordPress standards and practices. A great theme development tool!",
        "available": "",
        "synopsis": "wp plugin status [<plugin>]"
    },
    "plugin-toggle": {
        "title": "plugin toggle",
        "excerpt": "Toggles a plugin's activation state.",
        "options": "<dl><dt>&lt;plugin&gt;...<\/dt><dd><p>One or more plugins to toggle.<\/p><\/dd><dt>[--network]<\/dt><dd><p>If set, the plugin will be toggled for the entire multisite network.<\/p><\/dd><\/dl>",
        "options_extra": "<p>If the plugin is active, then it will be deactivated. If the plugin is\ninactive, then it will be activated.<\/p>",
        "has_child": 0,
        "examples": "# Akismet is currently activated\n$ wp plugin toggle akismet\nPlugin 'akismet' deactivated.\nSuccess: Toggled 1 of 1 plugins.\n\n# Akismet is currently deactivated\n$ wp plugin toggle akismet\nPlugin 'akismet' activated.\nSuccess: Toggled 1 of 1 plugins.",
        "available": "",
        "synopsis": "wp plugin toggle <plugin>... [--network]"
    },
    "plugin-update": {
        "title": "plugin update",
        "excerpt": "Updates one or more plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to update.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all plugins that have updates will be updated.<\/p><\/dd><dt>[--exclude=&lt;name&gt;]<\/dt><dd><p>Comma separated list of plugin names that should be excluded from updating.<\/p><\/dd><dt>[--minor]<\/dt><dd><p>Only perform updates for minor releases (e.g. from 1.3 to 1.4 instead of 2.0)<\/p><\/dd><dt>[--patch]<\/dt><dd><p>Only perform updates for patch releases (e.g. from 1.3 to 1.3.3 instead of 1.4)<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>summary<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>If set, the plugin will be updated to the specified version.<\/p><\/dd><dt>[--dry-run]<\/dt><dd><p>Preview which plugins would be updated.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp plugin update bbpress --version=dev\nInstalling bbPress (Development Version)\nDownloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.zip...\nUnpacking the package...\nInstalling the plugin...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nSuccess: Updated 1 of 2 plugins.\n\n$ wp plugin update --all\nEnabling Maintenance mode...\nDownloading update from https:\/\/downloads.wordpress.org\/plugin\/akismet.3.1.11.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nDownloading update from https:\/\/downloads.wordpress.org\/plugin\/nginx-champuru.3.2.0.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nDisabling Maintenance mode...\n+------------------------+-------------+-------------+---------+\n| name                   | old_version | new_version | status  |\n+------------------------+-------------+-------------+---------+\n| akismet                | 3.1.3       | 3.1.11      | Updated |\n| nginx-cache-controller | 3.1.1       | 3.2.0       | Updated |\n+------------------------+-------------+-------------+---------+\nSuccess: Updated 2 of 2 plugins.\n\n$ wp plugin update --all --exclude=akismet\nEnabling Maintenance mode...\nDownloading update from https:\/\/downloads.wordpress.org\/plugin\/nginx-champuru.3.2.0.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nDisabling Maintenance mode...\n+------------------------+-------------+-------------+---------+\n| name                   | old_version | new_version | status  |\n+------------------------+-------------+-------------+---------+\n| nginx-cache-controller | 3.1.1       | 3.2.0       | Updated |\n+------------------------+-------------+-------------+---------+",
        "available": "",
        "synopsis": "wp plugin update [<plugin>...] [--all] [--exclude=<name>] [--minor] [--patch] [--format=<format>] [--version=<version>] [--dry-run] [--insecure]"
    },
    "post-generate": {
        "title": "post generate",
        "excerpt": "Generates some posts.",
        "options": "<dl><dt>[--count=&lt;number&gt;]<\/dt><dd><p>How many posts to generate? [Default: 100]<\/p><\/dd><dt>[--post_type=&lt;type&gt;]<\/dt><dd><p>The type of the generated posts. [Default: post]<\/p><\/dd><dt>[--post_status=&lt;status&gt;]<\/dt><dd><p>The status of the generated posts. [Default: publish]<\/p><\/dd><dt>[--post_title=&lt;post_title&gt;]<\/dt><dd><p>The post title. [Default:]<\/p><\/dd><dt>[--post_author=&lt;login&gt;]<\/dt><dd><p>The author of the generated posts. [Default:]<\/p><\/dd><dt>[--post_date=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<\/dt><dd><p>The date of the post. Default is the current time.<\/p><\/dd><dt>[--post_date_gmt=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<\/dt><dd><p>The date of the post in the GMT timezone. Default is the value of --post_date.<\/p><\/dd><dt>[--post_content]<\/dt><dd><p>If set, the command reads the post_content from STDIN.<\/p><\/dd><dt>[--max_depth=&lt;number&gt;]<\/dt><dd><p>For hierarchical post types, generate child posts down to a certain depth. [Default: 1]<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: progress]<div><span>Options:<\/span><ul><li><code>progress<\/code><\/li><li><code>ids<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a specified number of new posts with dummy data.<\/p>",
        "has_child": 0,
        "examples": "# Generate posts.\n$ wp post generate --count=10 --post_type=page --post_date=1999-01-04\nGenerating posts  100% [================================================] 0:01 \/ 0:04\n\n# Generate posts with fetched content.\n$ curl -N https:\/\/loripsum.net\/api\/5 | wp post generate --post_content --count=10\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\nDload  Upload   Total   Spent    Left  Speed\n100  2509  100  2509    0     0    616      0  0:00:04  0:00:04 --:--:--   616\nGenerating posts  100% [================================================] 0:01 \/ 0:04\n\n# Add meta to every generated posts.\n$ wp post generate --format=ids | xargs -d ' ' -I % wp post meta add % foo bar\nSuccess: Added custom field.\nSuccess: Added custom field.\nSuccess: Added custom field.",
        "available": "",
        "synopsis": "wp post generate [--count=<number>] [--post_type=<type>] [--post_status=<status>] [--post_title=<post_title>] [--post_author=<login>] [--post_date=<yyyy-mm-dd-hh-ii-ss>] [--post_date_gmt=<yyyy-mm-dd-hh-ii-ss>] [--post_content] [--max_depth=<number>] [--format=<format>]"
    },
    "post-meta-add": {
        "title": "post meta add",
        "excerpt": "Add a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to create.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the meta field. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta add <id> <key> [<value>] [--format=<format>]"
    },
    "post-meta-get": {
        "title": "post meta get",
        "excerpt": "Get meta field value.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta get <id> <key> [--format=<format>]"
    },
    "post-term-add": {
        "title": "post term add",
        "excerpt": "Add a term to an object.",
        "options": "",
        "options_extra": "<p>Append the term to the existing set of terms on the object.<\/p>\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be added.\n\n<term>...\n: The slug of the term or terms to be added.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: slug\noptions:\n  - slug\n  - id\n---",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post term add <id> <taxonomy> <term>... [--by=<field>]"
    },
    "post-term-set": {
        "title": "post term set",
        "excerpt": "Set object terms.",
        "options": "",
        "options_extra": "<p>Replaces existing terms on the object.<\/p>\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be updated.\n\n<term>...\n: The slug of the term or terms to be updated.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: slug\noptions:\n  - slug\n  - id\n---",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post term set <id> <taxonomy> <term>... [--by=<field>]"
    },
    "post-type-get": {
        "title": "post-type get",
        "excerpt": "Gets details about a registered post type.",
        "options": "<dl><dt>&lt;post-type&gt;<\/dt><dd><p>Post type slug<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Instead of returning the whole taxonomy, returns the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get details about the 'page' post type.\n$ wp post-type get page --fields=name,label,hierarchical --format=json\n{\"name\":\"page\",\"label\":\"Pages\",\"hierarchical\":true}",
        "available": "<p>These fields will be displayed by default for the specified post type:<\/p>\n<ul>\n<li>name<\/li>\n<li>label<\/li>\n<li>description<\/li>\n<li>hierarchical<\/li>\n<li>public<\/li>\n<li>capability_type<\/li>\n<li>labels<\/li>\n<li>cap<\/li>\n<li>supports<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>count<\/li>\n<\/ul>",
        "synopsis": "wp post-type get <post-type> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "rewrite-flush": {
        "title": "rewrite flush",
        "excerpt": "Flushes rewrite rules.",
        "options": "<dl><dt>[--hard]<\/dt><dd><p>Perform a hard flush - update <code>.htaccess<\/code> rules as well as rewrite rules in database. Works only on single site installs.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Resets WordPress' rewrite rules based on registered post types, etc.<\/p>\n<p>To regenerate a .htaccess file with WP-CLI, you'll need to add the mod_rewrite module\nto your wp-cli.yml or config.yml. For example:<\/p>\n<pre><code>apache_modules:\n  - mod_rewrite<\/code><\/pre>",
        "has_child": 0,
        "examples": "$ wp rewrite flush\nSuccess: Rewrite rules flushed.",
        "available": "",
        "synopsis": "wp rewrite flush [--hard]"
    },
    "site-activate": {
        "title": "site activate",
        "excerpt": "Activates one or more sites.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to activate. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be activated. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site activate 123\nSuccess: Site 123 activated.\n\n$ wp site activate --slug=demo\nSuccess: Site 123 marked as activated.",
        "available": "",
        "synopsis": "wp site activate [<id>...] [--slug=<slug>]"
    },
    "site-meta-add": {
        "title": "site meta add",
        "excerpt": "Add a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to create.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the meta field. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta add <id> <key> [<value>] [--format=<format>]"
    },
    "site-meta-get": {
        "title": "site meta get",
        "excerpt": "Get meta field value.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta get <id> <key> [--format=<format>]"
    },
    "site-unmature": {
        "title": "site unmature",
        "excerpt": "Sets one or more sites as immature.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to set as unmature. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be set as unmature. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site unmature 123\nSuccess: Site 123 marked as unmature.\n\n$ wp site unmature --slug=demo\nSuccess: Site 123 marked as unmature.",
        "available": "",
        "synopsis": "wp site unmature [<id>...] [--slug=<slug>]"
    },
    "taxonomy-list": {
        "title": "taxonomy list",
        "excerpt": "Lists registered taxonomies.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter by one or more fields (see get_taxonomies() first parameter for a list of available fields).<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each taxonomy.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific taxonomy fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List all taxonomies.\n$ wp taxonomy list --format=csv\nname,label,description,object_type,show_tagcloud,hierarchical,public\ncategory,Categories,,post,1,1,1\npost_tag,Tags,,post,1,,1\nnav_menu,\"Navigation Menus\",,nav_menu_item,,,\nlink_category,\"Link Categories\",,link,1,,\npost_format,Format,,post,,,1\n\n# List all taxonomies with 'post' object type.\n$ wp taxonomy list --object_type=post --fields=name,public\n+-------------+--------+\n| name        | public |\n+-------------+--------+\n| category    | 1      |\n| post_tag    | 1      |\n| post_format | 1      |\n+-------------+--------+",
        "available": "<p>These fields will be displayed by default for each term:<\/p>\n<ul>\n<li>name<\/li>\n<li>label<\/li>\n<li>description<\/li>\n<li>object_type<\/li>\n<li>show_tagcloud<\/li>\n<li>hierarchical<\/li>\n<li>public<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>count<\/li>\n<\/ul>",
        "synopsis": "wp taxonomy list [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "term-generate": {
        "title": "term generate",
        "excerpt": "Generates some terms.",
        "options": "<dl><dt>&lt;taxonomy&gt;<\/dt><dd><p>The taxonomy for the generated terms.<\/p><\/dd><dt>[--count=&lt;number&gt;]<\/dt><dd><p>How many terms to generate? [Default: 100]<\/p><\/dd><dt>[--max_depth=&lt;number&gt;]<\/dt><dd><p>Generate child terms down to a certain depth. [Default: 1]<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: progress]<div><span>Options:<\/span><ul><li><code>progress<\/code><\/li><li><code>ids<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a specified number of new terms with dummy data.<\/p>",
        "has_child": 0,
        "examples": "# Generate post categories.\n$ wp term generate category --count=10\nGenerating terms  100% [=========] 0:02 \/ 0:02\n\n# Add meta to every generated term.\n$ wp term generate category --format=ids --count=3 | xargs -d ' ' -I % wp term meta add % foo bar\nSuccess: Added custom field.\nSuccess: Added custom field.\nSuccess: Added custom field.",
        "available": "",
        "synopsis": "wp term generate <taxonomy> [--count=<number>] [--max_depth=<number>] [--format=<format>]"
    },
    "term-meta-add": {
        "title": "term meta add",
        "excerpt": "Add a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to create.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the meta field. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta add <id> <key> [<value>] [--format=<format>]"
    },
    "term-meta-get": {
        "title": "term meta get",
        "excerpt": "Get meta field value.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta get <id> <key> [--format=<format>]"
    },
    "theme-disable": {
        "title": "theme disable",
        "excerpt": "Disables a theme on a WordPress multisite install.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>The theme to disable.<\/p><\/dd><dt>[--network]<\/dt><dd><p>If set, the theme is disabled on the network level. Note that individual sites may still have this theme enabled if it was enabled for them independently.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Removes ability for a theme to be activated from the dashboard of a site\non a WordPress multisite install.<\/p>",
        "has_child": 0,
        "examples": "# Disable theme\n$ wp theme disable twentysixteen\nSuccess: Disabled the 'Twenty Sixteen' theme.\n\n# Disable theme in network level\n$ wp theme disable twentysixteen --network\nSuccess: Network disabled the 'Twenty Sixteen' theme.",
        "available": "",
        "synopsis": "wp theme disable <theme> [--network]"
    },
    "theme-install": {
        "title": "theme install",
        "excerpt": "Installs one or more themes.",
        "options": "<dl><dt>&lt;theme|zip|url&gt;...<\/dt><dd><p>One or more themes to install. Accepts a theme slug, the path to a local zip file, or a URL to a remote zip file.<\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>If set, get that particular version from wordpress.org, instead of the stable version.<\/p><\/dd><dt>[--force]<\/dt><dd><p>If set, the command will overwrite any installed version of the theme, without prompting for confirmation.<\/p><\/dd><dt>[--activate]<\/dt><dd><p>If set, the theme will be activated immediately after install.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Install the latest version from wordpress.org and activate\n$ wp theme install twentysixteen --activate\nInstalling Twenty Sixteen (1.2)\nDownloading install package from http:\/\/downloads.wordpress.org\/theme\/twentysixteen.1.2.zip...\nUnpacking the package...\nInstalling the theme...\nTheme installed successfully.\nActivating 'twentysixteen'...\nSuccess: Switched to 'Twenty Sixteen' theme.\n\n# Install from a local zip file\n$ wp theme install ..\/my-theme.zip\n\n# Install from a remote zip file\n$ wp theme install http:\/\/s3.amazonaws.com\/bucketname\/my-theme.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef",
        "available": "",
        "synopsis": "wp theme install <theme|zip|url>... [--version=<version>] [--force] [--activate] [--insecure]"
    },
    "theme-mod-get": {
        "title": "theme mod get",
        "excerpt": "Gets one or more theme mods.",
        "options": "<dl><dt>[&lt;mod&gt;...]<\/dt><dd><p>One or more mods to get.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Returns the value of a single field.<\/p><\/dd><dt>[--all]<\/dt><dd><p>List all theme mods<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get all theme mods.\n$ wp theme mod get --all\n+------------------+---------+\n| key              | value   |\n+------------------+---------+\n| background_color | dd3333  |\n| link_color       | #dd9933 |\n| main_text_color  | #8224e3 |\n+------------------+---------+\n\n# Get single theme mod in JSON format.\n$ wp theme mod get background_color --format=json\n[{\"key\":\"background_color\",\"value\":\"dd3333\"}]\n\n# Get value of a single theme mod.\n$ wp theme mod get background_color --field=value\ndd3333\n\n# Get multiple theme mods.\n$ wp theme mod get background_color header_textcolor\n+------------------+--------+\n| key              | value  |\n+------------------+--------+\n| background_color | dd3333 |\n| header_textcolor |        |\n+------------------+--------+",
        "available": "",
        "synopsis": "wp theme mod get [<mod>...] [--field=<field>] [--all] [--format=<format>]"
    },
    "theme-mod-set": {
        "title": "theme mod set",
        "excerpt": "Sets the value of a theme mod.",
        "options": "<dl><dt>&lt;mod&gt;<\/dt><dd><p>The name of the theme mod to set or update.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>The new value.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Set theme mod\n$ wp theme mod set background_color 000000\nSuccess: Theme mod background_color set to 000000",
        "available": "",
        "synopsis": "wp theme mod set <mod> <value>"
    },
    "transient-get": {
        "title": "transient get",
        "excerpt": "Gets a transient value.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the transient.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--network]<\/dt><dd><p>Get the value of a network|site transient. On single site, this is is a specially-named cache key. On multisite, this is a global cache (instead of local to the site).<\/p><\/dd><\/dl>",
        "options_extra": "<p>For a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for <code>wp transient<\/code>.<\/p>",
        "has_child": 0,
        "examples": "$ wp transient get sample_key\ntest data\n\n$ wp transient get random_key\nWarning: Transient with key \"random_key\" is not set.",
        "available": "",
        "synopsis": "wp transient get <key> [--format=<format>] [--network]"
    },
    "transient-set": {
        "title": "transient set",
        "excerpt": "Sets a transient value.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the transient.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>Value to be set for the transient.<\/p><\/dd><dt>[&lt;expiration&gt;]<\/dt><dd><p>Time until expiration, in seconds.<\/p><\/dd><dt>[--network]<\/dt><dd><p>Set the value of a network|site transient. On single site, this is is a specially-named cache key. On multisite, this is a global cache (instead of local to the site).<\/p><\/dd><\/dl>",
        "options_extra": "<p><code>&lt;expiration&gt;<\/code> is the time until expiration, in seconds.<\/p>\n<p>For a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for <code>wp transient<\/code>.<\/p>",
        "has_child": 0,
        "examples": "$ wp transient set sample_key \"test data\" 3600\nSuccess: Transient added.",
        "available": "",
        "synopsis": "wp transient set <key> <value> [<expiration>] [--network]"
    },
    "user-add-role": {
        "title": "user add-role",
        "excerpt": "Adds a role for a user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>[&lt;role&gt;...]<\/dt><dd><p>Add the specified role(s) to the user.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp user add-role 12 author\nSuccess: Added 'author' role for johndoe (12).\n\n$ wp user add-role 12 author editor\nSuccess: Added 'author', 'editor' roles for johndoe (12).",
        "available": "",
        "synopsis": "wp user add-role <user> [<role>...]"
    },
    "user-generate": {
        "title": "user generate",
        "excerpt": "Generates some users.",
        "options": "<dl><dt>[--count=&lt;number&gt;]<\/dt><dd><p>How many users to generate? [Default: 100]<\/p><\/dd><dt>[--role=&lt;role&gt;]<\/dt><dd><p>The role of the generated users. Default: default role from WP<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: progress]<div><span>Options:<\/span><ul><li><code>progress<\/code><\/li><li><code>ids<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a specified number of new users with dummy data.<\/p>",
        "has_child": 0,
        "examples": "# Add meta to every generated users.\n$ wp user generate --format=ids --count=3 | xargs -d ' ' -I % wp user meta add % foo bar\nSuccess: Added custom field.\nSuccess: Added custom field.\nSuccess: Added custom field.",
        "available": "",
        "synopsis": "wp user generate [--count=<number>] [--role=<role>] [--format=<format>]"
    },
    "user-meta-add": {
        "title": "user meta add",
        "excerpt": "Adds a meta field.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to add metadata for.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The metadata key.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>The new metadata value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Add user meta\n$ wp user meta add 123 bio \"Mary is an WordPress developer.\"\nSuccess: Added custom field.",
        "available": "",
        "synopsis": "wp user meta add <user> <key> <value> [--format=<format>]"
    },
    "user-meta-get": {
        "title": "user meta get",
        "excerpt": "Gets meta field value.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to get metadata for.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The metadata key.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get user meta\n$ wp user meta get 123 bio\nMary is an WordPress developer.\n\n# Get the primary site of a user (for multisite)\n$ wp user meta get 2 primary_blog\n3",
        "available": "",
        "synopsis": "wp user meta get <user> <key> [--format=<format>]"
    },
    "user-set-role": {
        "title": "user set-role",
        "excerpt": "Sets the user role.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>[&lt;role&gt;]<\/dt><dd><p>Make the user have the specified role. If not passed, the default role is used.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp user set-role 12 author\nSuccess: Added johndoe (12) to http:\/\/example.com as author.",
        "available": "",
        "synopsis": "wp user set-role <user> [<role>]"
    },
    "user-term-add": {
        "title": "user term add",
        "excerpt": "Add a term to an object.",
        "options": "",
        "options_extra": "<p>Append the term to the existing set of terms on the object.<\/p>\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be added.\n\n<term>...\n: The slug of the term or terms to be added.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: slug\noptions:\n  - slug\n  - id\n---",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp user term add <id> <taxonomy> <term>... [--by=<field>]"
    },
    "user-term-set": {
        "title": "user term set",
        "excerpt": "Set object terms.",
        "options": "",
        "options_extra": "<p>Replaces existing terms on the object.<\/p>\n<id>\n: The ID of the object.\n\n<taxonomy>\n: The name of the taxonomy type to be updated.\n\n<term>...\n: The slug of the term or terms to be updated.\n\n[--by=<field>]\n: Explicitly handle the term value as a slug or id.\n---\ndefault: slug\noptions:\n  - slug\n  - id\n---",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp user term set <id> <taxonomy> <term>... [--by=<field>]"
    },
    "widget-delete": {
        "title": "widget delete",
        "excerpt": "Deletes one or more widgets from a sidebar.",
        "options": "<dl><dt>&lt;widget-id&gt;...<\/dt><dd><p>Unique ID for the widget(s)<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete the recent-comments-2 widget from its sidebar.\n$ wp widget delete recent-comments-2\nSuccess: Deleted 1 of 1 widgets.",
        "available": "",
        "synopsis": "wp widget delete <widget-id>..."
    },
    "widget-update": {
        "title": "widget update",
        "excerpt": "Updates options for an existing widget.",
        "options": "<dl><dt>&lt;widget-id&gt;<\/dt><dd><p>Unique ID for the widget<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Field to update, with its new value<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Change calendar-1 widget title to \"Our Calendar\"\n$ wp widget update calendar-1 --title=\"Our Calendar\"\nSuccess: Widget updated.",
        "available": "",
        "synopsis": "wp widget update <widget-id> [--<field>=<value>]"
    },
    "cache-supports": {
        "title": "cache supports",
        "excerpt": "Determines whether the object cache implementation supports a particular feature.",
        "options": "<dl><dt>&lt;feature&gt;<\/dt><dd><p>Name of the feature to check for.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Check whether is add_multiple supported.\n$ wp cache supports add_multiple\n$ echo $?\n0\n\n# Bash script for checking whether for support like this:\nif ! wp cache supports non_existing; then\necho 'non_existing is not supported'\nfi",
        "available": "",
        "synopsis": "wp cache supports <feature>"
    },
    "cli-alias-list": {
        "title": "cli alias list",
        "excerpt": "Lists available WP-CLI aliases.",
        "options": "<dl><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: yaml]<div><span>Options:<\/span><ul><li><code>yaml<\/code><\/li><li><code>json<\/code><\/li><li><code>var_export<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List all available aliases.\n$ wp cli alias list\n---\n@all: Run command against every registered alias.\n@prod:\nssh: runcommand@runcommand.io~\/webapps\/production\n@dev:\nssh: vagrant@192.168.50.10\/srv\/www\/runcommand.dev\n@both:\n- @prod\n- @dev",
        "available": "",
        "synopsis": "wp cli alias list [--format=<format>]"
    },
    "cli-param-dump": {
        "title": "cli param-dump",
        "excerpt": "Dumps the list of global parameters, as JSON or in var_export format.",
        "options": "<dl><dt>[--with-values]<\/dt><dd><p>Display current values also.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: json]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Dump the list of global parameters.\n$ wp cli param-dump --format=var_export\narray (\n'path' =>\narray (\n'runtime' => '=<path>',\n'file' => '<path>',\n'synopsis' => '',\n'default' => NULL,\n'multiple' => false,\n'desc' => 'Path to the WordPress files.',\n),\n'url' =>\narray (",
        "available": "",
        "synopsis": "wp cli param-dump [--with-values] [--format=<format>]"
    },
    "comment-create": {
        "title": "comment create",
        "excerpt": "Creates a new comment.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Associative args for the new comment. See wp_insert_comment().<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new comment id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create comment.\n$ wp comment create --comment_post_ID=15 --comment_content=\"hello blog\" --comment_author=\"wp-cli\"\nSuccess: Created comment 932.",
        "available": "",
        "synopsis": "wp comment create [--<field>=<value>] [--porcelain]"
    },
    "comment-delete": {
        "title": "comment delete",
        "excerpt": "Deletes a comment.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>One or more IDs of comments to delete.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Skip the trash bin.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete comment.\n$ wp comment delete 1337 --force\nSuccess: Deleted comment 1337.\n\n# Delete multiple comments.\n$ wp comment delete 1337 2341 --force\nSuccess: Deleted comment 1337.\nSuccess: Deleted comment 2341.",
        "available": "",
        "synopsis": "wp comment delete <id>... [--force]"
    },
    "comment-exists": {
        "title": "comment exists",
        "excerpt": "Verifies whether a comment exists.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the comment to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Displays a success message if the comment does exist.<\/p>",
        "has_child": 0,
        "examples": "# Check whether comment exists.\n$ wp comment exists 1337\nSuccess: Comment with ID 1337 exists.",
        "available": "",
        "synopsis": "wp comment exists <id>"
    },
    "comment-status": {
        "title": "comment status",
        "excerpt": "Gets the status of a comment.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the comment to check.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get status of comment.\n$ wp comment status 1337\napproved",
        "available": "",
        "synopsis": "wp comment status <id>"
    },
    "comment-unspam": {
        "title": "comment unspam",
        "excerpt": "Unmarks a comment as spam.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>The IDs of the comments to unmark as spam.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Unspam comment.\n$ wp comment unspam 1337\nSuccess: Unspammed comment 1337.",
        "available": "",
        "synopsis": "wp comment unspam <id>..."
    },
    "comment-update": {
        "title": "comment update",
        "excerpt": "Updates one or more comments.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>One or more IDs of comments to update.<\/p><\/dd><dt>--&lt;field&gt;=&lt;value&gt;<\/dt><dd><p>One or more fields to update. See wp_update_comment().<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update comment.\n$ wp comment update 123 --comment_author='That Guy'\nSuccess: Updated comment 123.",
        "available": "",
        "synopsis": "wp comment update <id>... --<field>=<value>"
    },
    "config-is-true": {
        "title": "config is-true",
        "excerpt": "Determines whether value of a specific defined constant or variable is truthy.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name of the wp-config.php constant or variable.<\/p><\/dd><dt>[--type=&lt;type&gt;]<\/dt><dd><p>Type of config value to retrieve. Defaults to 'all'. [Default: all]<div><span>Options:<\/span><ul><li><code>constant<\/code><\/li><li><code>variable<\/code><\/li><li><code>all<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be read. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><\/dl>",
        "options_extra": "<p>This determination is made by evaluating the retrieved value via boolval().<\/p>",
        "has_child": 0,
        "examples": "# Assert if MULTISITE is true\n$ wp config is-true MULTISITE\n$ echo $?\n0",
        "available": "",
        "synopsis": "wp config is-true <name> [--type=<type>] [--config-file=<path>]"
    },
    "core-update-db": {
        "title": "core update-db",
        "excerpt": "Runs the WordPress database update procedure.",
        "options": "",
        "options_extra": "<p>[--network]\n: Update databases for all sites on a network<\/p>\n<p>[--dry-run]\n: Compare database versions without performing the update.<\/p>",
        "has_child": 0,
        "examples": "# Update the WordPress database\n$ wp core update-db\nSuccess: WordPress database upgraded successfully from db version 36686 to 35700.\n\n# Update databases for all sites on a network\n$ wp core update-db --network\nWordPress database upgraded successfully from db version 35700 to 29630 on example.com\/\nSuccess: WordPress database upgraded on 123\/123 sites",
        "available": "",
        "synopsis": "wp core update-db [--network] [--dry-run]"
    },
    "cron-event-run": {
        "title": "cron event run",
        "excerpt": "Runs the next scheduled cron event for the given hook.",
        "options": "<dl><dt>[&lt;hook&gt;...]<\/dt><dd><p>One or more hooks to run.<\/p><\/dd><dt>[--due-now]<\/dt><dd><p>Run all hooks due right now.<\/p><\/dd><dt>[--exclude=&lt;hooks&gt;]<\/dt><dd><p>Comma-separated list of hooks to exclude.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Run all hooks.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Run all cron events due right now\n$ wp cron event run --due-now\nSuccess: Executed a total of 2 cron events.",
        "available": "",
        "synopsis": "wp cron event run [<hook>...] [--due-now] [--exclude=<hooks>] [--all]"
    },
    "embed-provider": {
        "title": "embed provider",
        "excerpt": "Retrieves oEmbed providers.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "",
        "available": "",
        "synopsis": ""
    },
    "i18n-make-json": {
        "title": "i18n make-json",
        "excerpt": "Extract JavaScript strings from PO files and add them to individual JSON files.",
        "options": "<dl><dt>&lt;source&gt;<\/dt><dd><p>Path to an existing PO file or a directory containing multiple PO files.<\/p><\/dd><dt>[&lt;destination&gt;]<\/dt><dd><p>Path to the destination directory for the resulting JSON files. Defaults to the source directory.<\/p><\/dd><dt>[--purge]<\/dt><dd><p>Whether to purge the strings that were extracted from the original source file. Defaults to true, use <code>--no-purge<\/code> to skip the removal.<\/p><\/dd><dt>[--update-mo-files]<\/dt><dd><p>Whether MO files should be updated as well after updating PO files. Only has an effect when used in combination with <code>--purge<\/code>.<\/p><\/dd><dt>[--pretty-print]<\/dt><dd><p>Pretty-print resulting JSON files.<\/p><\/dd><dt>[--use-map=&lt;paths_or_maps&gt;]<\/dt><dd><p>Whether to use a mapping file for the strings, as a JSON value, array to specify multiple. Each element can either be a string (file path) or object (map).<\/p><\/dd><\/dl>",
        "options_extra": "<p>For JavaScript internationalization purposes, WordPress requires translations to be split up into\none Jed-formatted JSON file per JavaScript source file.<\/p>\n<p>See <a href=\"https:\/\/make.wordpress.org\/core\/2018\/11\/09\/new-javascript-i18n-support-in-wordpress\/\">https:\/\/make.wordpress.org\/core\/2018\/11\/09\/new-javascript-i18n-support-in-wordpress\/<\/a> to learn more\nabout WordPress JavaScript internationalization.<\/p>",
        "has_child": 0,
        "examples": "# Create JSON files for all PO files in the languages directory\n$ wp i18n make-json languages\n\n# Create JSON files for my-plugin-de_DE.po and leave the PO file untouched.\n$ wp i18n make-json my-plugin-de_DE.po \/tmp --no-purge\n\n# Create JSON files with mapping\n$ wp i18n make-json languages --use-map=build\/map.json\n\n# Create JSON files with multiple mappings\n$ wp i18n make-json languages '--use-map=[\"build\/map.json\",\"build\/map2.json\"]'\n\n# Create JSON files with object mapping\n$ wp i18n make-json languages '--use-map={\"source\/index.js\":\"build\/index.js\"}'",
        "available": "",
        "synopsis": "wp i18n make-json <source> [<destination>] [--purge] [--update-mo-files] [--pretty-print] [--use-map=<paths_or_maps>]"
    },
    "i18n-update-po": {
        "title": "i18n update-po",
        "excerpt": "Update PO files from a POT file.",
        "options": "<dl><dt>&lt;source&gt;<\/dt><dd><p>Path to an existing POT file to use for updating<\/p><\/dd><dt>[&lt;destination&gt;]<\/dt><dd><p>PO file to update or a directory containing multiple PO files.   Defaults to all PO files in the source directory.<\/p><\/dd><\/dl>",
        "options_extra": "<p>This behaves similarly to the <a href=\"https:\/\/www.gnu.org\/software\/gettext\/manual\/html_node\/msgmerge-Invocation.html\">msgmerge<\/a> command.<\/p>",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp i18n update-po <source> [<destination>]"
    },
    "language-theme": {
        "title": "language theme",
        "excerpt": "Installs, activates, and manages theme language packs.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Install the Dutch theme language pack.\n$ wp language theme install twentyten nl_NL\nSuccess: Language installed.\n\n# Uninstall the Dutch theme language pack.\n$ wp language theme uninstall twentyten nl_NL\nSuccess: Language uninstalled.\n\n# List installed theme language packages.\n$ wp language theme list --status=installed\n+----------+--------------+-------------+-----------+-----------+---------------------+\n| language | english_name | native_name | status    | update    | updated             |\n+----------+--------------+-------------+-----------+-----------+---------------------+\n| nl_NL    | Dutch        | Nederlands  | installed | available | 2016-05-13 08:12:50 |\n+----------+--------------+-------------+-----------+-----------+---------------------+",
        "available": "",
        "synopsis": ""
    },
    "menu-item-list": {
        "title": "menu item list",
        "excerpt": "Gets a list of items associated with a menu.",
        "options": "<dl><dt>&lt;menu&gt;<\/dt><dd><p>The name, slug, or term ID for the menu.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>ids<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu item list main-menu\n+-------+-----------+-------------+---------------------------------+----------+\n| db_id | type      | title       | link                            | position |\n+-------+-----------+-------------+---------------------------------+----------+\n| 5     | custom    | Home        | http:\/\/example.com              | 1        |\n| 6     | post_type | Sample Page | http:\/\/example.com\/sample-page\/ | 2        |\n+-------+-----------+-------------+---------------------------------+----------+",
        "available": "<p>These fields will be displayed by default for each menu item:<\/p>\n<ul>\n<li>db_id<\/li>\n<li>type<\/li>\n<li>title<\/li>\n<li>link<\/li>\n<li>position<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>menu_item_parent<\/li>\n<li>object_id<\/li>\n<li>object<\/li>\n<li>type<\/li>\n<li>type_label<\/li>\n<li>target<\/li>\n<li>attr_title<\/li>\n<li>description<\/li>\n<li>classes<\/li>\n<li>xfn<\/li>\n<\/ul>",
        "synopsis": "wp menu item list <menu> [--fields=<fields>] [--format=<format>]"
    },
    "package-browse": {
        "title": "package browse",
        "excerpt": "Browses WP-CLI packages available for installation.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Lists packages available for installation from the <a href=\"http:\/\/wp-cli.org\/package-index\/\">Package Index<\/a>.\nAlthough the package index will remain in place for backward compatibility reasons, it has been\ndeprecated and will not be updated further. Please refer to <a href=\"https:\/\/github.com\/wp-cli\/ideas\/issues\/51\">https:\/\/github.com\/wp-cli\/ideas\/issues\/51<\/a>\nto read about its potential replacement.<\/p>",
        "has_child": 0,
        "examples": "$ wp package browse --format=yaml\n---\n10up\/mu-migration:\nname: 10up\/mu-migration\ndescription: A set of WP-CLI commands to support the migration of single WordPress instances to multisite\nauthors: N\u00edcholas Andr\u00e9\nversion: dev-main, dev-develop\naaemnnosttv\/wp-cli-dotenv-command:\nname: aaemnnosttv\/wp-cli-dotenv-command\ndescription: Dotenv commands for WP-CLI\nauthors: Evan Mattson\nversion: v0.1, v0.1-beta.1, v0.2, dev-main, dev-dev, dev-develop, dev-tests\/behat\naaemnnosttv\/wp-cli-http-command:\nname: aaemnnosttv\/wp-cli-http-command\ndescription: WP-CLI command for using the WordPress HTTP API\nauthors: Evan Mattson\nversion: dev-main",
        "available": "<p>These fields will be displayed by default for each package:<\/p>\n<ul>\n<li>name<\/li>\n<li>description<\/li>\n<li>authors<\/li>\n<li>version<\/li>\n<\/ul>\n<p>There are no optionally available fields.<\/p>",
        "synopsis": "wp package browse [--fields=<fields>] [--format=<format>]"
    },
    "package-update": {
        "title": "package update",
        "excerpt": "Updates all installed WP-CLI packages to their latest version.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp package update\nUsing Composer to update packages...\n---\nLoading composer repositories with package information\nUpdating dependencies\nResolving dependencies through SAT\nDependency resolution completed in 0.074 seconds\nAnalyzed 1062 packages to resolve dependencies\nAnalyzed 22383 rules to resolve dependencies\nWriting lock file\nGenerating autoload files\n---\nSuccess: Packages updated.",
        "available": "",
        "synopsis": ""
    },
    "plugin-install": {
        "title": "plugin install",
        "excerpt": "Installs one or more plugins.",
        "options": "<dl><dt>&lt;plugin|zip|url&gt;...<\/dt><dd><p>One or more plugins to install. Accepts a plugin slug, the path to a local zip file, or a URL to a remote zip file.<\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>If set, get that particular version from wordpress.org, instead of the stable version.<\/p><\/dd><dt>[--force]<\/dt><dd><p>If set, the command will overwrite any installed version of the plugin, without prompting for confirmation.<\/p><\/dd><dt>[--activate]<\/dt><dd><p>If set, the plugin will be activated immediately after install.<\/p><\/dd><dt>[--activate-network]<\/dt><dd><p>If set, the plugin will be network activated immediately after install<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Install the latest version from wordpress.org and activate\n$ wp plugin install bbpress --activate\nInstalling bbPress (2.5.9)\nDownloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.2.5.9.zip...\nUsing cached file '\/home\/vagrant\/.wp-cli\/cache\/plugin\/bbpress-2.5.9.zip'...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nActivating 'bbpress'...\nPlugin 'bbpress' activated.\nSuccess: Installed 1 of 1 plugins.\n\n# Install the development version from wordpress.org\n$ wp plugin install bbpress --version=dev\nInstalling bbPress (Development Version)\nDownloading install package from https:\/\/downloads.wordpress.org\/plugin\/bbpress.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Installed 1 of 1 plugins.\n\n# Install from a local zip file\n$ wp plugin install ..\/my-plugin.zip\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Installed 1 of 1 plugins.\n\n# Install from a remote zip file\n$ wp plugin install http:\/\/s3.amazonaws.com\/bucketname\/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef\nDownloading install package from http:\/\/s3.amazonaws.com\/bucketname\/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Installed 1 of 1 plugins.\n\n# Update from a remote zip file\n$ wp plugin install https:\/\/github.com\/envato\/wp-envato-market\/archive\/master.zip --force\nDownloading install package from https:\/\/github.com\/envato\/wp-envato-market\/archive\/master.zip\nUnpacking the package...\nInstalling the plugin...\nRenamed Github-based project from 'wp-envato-market-master' to 'wp-envato-market'.\nPlugin updated successfully\nSuccess: Installed 1 of 1 plugins.\n\n# Forcefully re-install all installed plugins\n$ wp plugin install $(wp plugin list --field=name) --force\nInstalling Akismet (3.1.11)\nDownloading install package from https:\/\/downloads.wordpress.org\/plugin\/akismet.3.1.11.zip...\nUnpacking the package...\nInstalling the plugin...\nRemoving the old version of the plugin...\nPlugin updated successfully\nSuccess: Installed 1 of 1 plugins.",
        "available": "",
        "synopsis": "wp plugin install <plugin|zip|url>... [--version=<version>] [--force] [--activate] [--activate-network] [--insecure]"
    },
    "post-meta-list": {
        "title": "post meta list",
        "excerpt": "List all metadata associated with an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>ID for the object.<\/p><\/dd><dt>[--keys=&lt;keys&gt;]<\/dt><dd><p>Limit output to metadata of specific keys.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: id]<div><span>Options:<\/span><ul><li><code>id<\/code><\/li><li><code>meta_key<\/code><\/li><li><code>meta_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize meta_value output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta list <id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"
    },
    "post-term-list": {
        "title": "post term list",
        "excerpt": "List all terms associated with an object.",
        "options": "",
        "options_extra": "<id>\n: ID for the object.\n\n<taxonomy>...\n: One or more taxonomies to list.\n\n[--field=<field>]\n: Prints the value of a single field for each term.\n\n[--fields=<fields>]\n: Limit the output to specific row fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n  - ids\n---",
        "has_child": 0,
        "examples": "",
        "available": "<p>These fields will be displayed by default for each term:<\/p>\n<ul>\n<li>term_id<\/li>\n<li>name<\/li>\n<li>slug<\/li>\n<li>taxonomy<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>term_taxonomy_id<\/li>\n<li>description<\/li>\n<li>term_group<\/li>\n<li>parent<\/li>\n<li>count<\/li>\n<\/ul>",
        "synopsis": "wp post term list <id> <taxonomy>... [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "post-url-to-id": {
        "title": "post url-to-id",
        "excerpt": "Gets the post ID for a given URL.",
        "options": "<dl><dt>&lt;url&gt;<\/dt><dd><p>The URL of the post to get.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get post ID by URL\n$ wp post url-to-id https:\/\/example.com\/?p=1\n1",
        "available": "",
        "synopsis": "wp post url-to-id <url>"
    },
    "post-type-list": {
        "title": "post-type list",
        "excerpt": "Lists registered post types.",
        "options": "<dl><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter by one or more fields (see get_post_types() first parameter for a list of available fields).<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each post type.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific post type fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List registered post types\n$ wp post-type list --format=csv\nname,label,description,hierarchical,public,capability_type\npost,Posts,,,1,post\npage,Pages,,1,1,page\nattachment,Media,,,1,post\nrevision,Revisions,,,,post\nnav_menu_item,\"Navigation Menu Items\",,,,post\n\n# List post types with 'post' capability type\n$ wp post-type list --capability_type=post --fields=name,public\n+---------------+--------+\n| name          | public |\n+---------------+--------+\n| post          | 1      |\n| attachment    | 1      |\n| revision      |        |\n| nav_menu_item |        |\n+---------------+--------+",
        "available": "<p>These fields will be displayed by default for each post type:<\/p>\n<ul>\n<li>name<\/li>\n<li>label<\/li>\n<li>description<\/li>\n<li>hierarchical<\/li>\n<li>public<\/li>\n<li>capability_type<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>count<\/li>\n<\/ul>",
        "synopsis": "wp post-type list [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "scaffold-block": {
        "title": "scaffold block",
        "excerpt": "Generates PHP, JS and CSS code for registering a Gutenberg block for a plugin or theme.",
        "options": "<dl><dt>&lt;slug&gt;<\/dt><dd><p>The internal name of the block.<\/p><\/dd><dt>[--title=&lt;title&gt;]<\/dt><dd><p>The display title for your block.<\/p><\/dd><dt>[--dashicon=&lt;dashicon&gt;]<\/dt><dd><p>The dashicon to make it easier to identify your block.<\/p><\/dd><dt>[--category=&lt;category&gt;]<\/dt><dd><p>The category name to help users browse and discover your block. [Default: widgets]<div><span>Options:<\/span><ul><li><code>common<\/code><\/li><li><code>embed<\/code><\/li><li><code>formatting<\/code><\/li><li><code>layout<\/code><\/li><li><code>widgets<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--theme]<\/dt><dd><p>Create files in the active theme directory. Specify a theme with <code>--theme=&lt;theme&gt;<\/code> to have the file placed in that theme.<\/p><\/dd><dt>[--plugin=&lt;plugin&gt;]<\/dt><dd><p>Create files in the given plugin's directory.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p><strong>Warning: <code>wp scaffold block<\/code> is deprecated.<\/strong><\/p>\n<p>The official script to generate a block is the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/designers-developers\/developers\/packages\/packages-create-block\/\">@wordpress\/create-block<\/a> package.<\/p>\n<p>See the <a href=\"https:\/\/developer.wordpress.org\/block-editor\/getting-started\/create-block\/\">Create a Block tutorial<\/a> for a complete walk-through.<\/p>",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp scaffold block <slug> [--title=<title>] [--dashicon=<dashicon>] [--category=<category>] [--theme] [--plugin=<plugin>] [--force]"
    },
    "search-replace": {
        "title": "search-replace",
        "excerpt": "Searches\/replaces strings in the database.",
        "options": "<dl><dt>&lt;old&gt;<\/dt><dd><p>A string to search for within the database.<\/p><\/dd><dt>&lt;new&gt;<\/dt><dd><p>Replace instances of the first string with this new string.<\/p><\/dd><dt>[&lt;table&gt;...]<\/dt><dd><p>List of database tables to restrict the replacement to. Wildcards are supported, e.g. <code>'wp_*options'<\/code> or <code>'wp_post*'<\/code>.<\/p><\/dd><dt>[--dry-run]<\/dt><dd><p>Run the entire search\/replace operation and show report, but don't save changes to the database.<\/p><\/dd><dt>[--network]<\/dt><dd><p>Search\/replace through all the tables registered to $wpdb in a multisite install.<\/p><\/dd><dt>[--all-tables-with-prefix]<\/dt><dd><p>Enable replacement on any tables that match the table prefix even if not registered on $wpdb.<\/p><\/dd><dt>[--all-tables]<\/dt><dd><p>Enable replacement on ALL tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --network and --all-tables-with-prefix.<\/p><\/dd><dt>[--export[=&lt;file&gt;]]<\/dt><dd><p>Write transformed data as SQL file instead of saving replacements to the database. If <file> is not supplied, will output to STDOUT.<\/p><\/dd><dt>[--export_insert_size=&lt;rows&gt;]<\/dt><dd><p>Define number of rows in single INSERT statement when doing SQL export. You might want to change this depending on your database configuration (e.g. if you need to do fewer queries). Default: 50<\/p><\/dd><dt>[--skip-tables=&lt;tables&gt;]<\/dt><dd><p>Do not perform the replacement on specific tables. Use commas to specify multiple tables. Wildcards are supported, e.g. <code>'wp_*options'<\/code> or <code>'wp_post*'<\/code>.<\/p><\/dd><dt>[--skip-columns=&lt;columns&gt;]<\/dt><dd><p>Do not perform the replacement on specific columns. Use commas to specify multiple columns.<\/p><\/dd><dt>[--include-columns=&lt;columns&gt;]<\/dt><dd><p>Perform the replacement on specific columns. Use commas to specify multiple columns.<\/p><\/dd><dt>[--precise]<\/dt><dd><p>Force the use of PHP (instead of SQL) which is more thorough, but slower.<\/p><\/dd><dt>[--recurse-objects]<\/dt><dd><p>Enable recursing into objects to replace strings. Defaults to true; pass --no-recurse-objects to disable.<\/p><\/dd><dt>[--verbose]<\/dt><dd><p>Prints rows to the console as they're updated.<\/p><\/dd><dt>[--regex]<\/dt><dd><p>Runs the search using a regular expression (without delimiters). Warning: search-replace will take about 15-20x longer when using --regex.<\/p><\/dd><dt>[--regex-flags=&lt;regex-flags&gt;]<\/dt><dd><p>Pass PCRE modifiers to regex search-replace (e.g. 'i' for case-insensitivity).<\/p><\/dd><dt>[--regex-delimiter=&lt;regex-delimiter&gt;]<\/dt><dd><p>The delimiter to use for the regex. It must be escaped if it appears in the search string. The default value is the result of <code>chr(1)<\/code>.<\/p><\/dd><dt>[--regex-limit=&lt;regex-limit&gt;]<\/dt><dd><p>The maximum possible replacements for the regex per row (or per unserialized data bit per row). Defaults to -1 (no limit).<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--report]<\/dt><dd><p>Produce report. Defaults to true.<\/p><\/dd><dt>[--report-changed-only]<\/dt><dd><p>Report changed fields only. Defaults to false, unless logging, when it defaults to true.<\/p><\/dd><dt>[--log[=&lt;file&gt;]]<\/dt><dd><p>Log the items changed. If <file> is not supplied or is &quot;-&quot;, will output to STDOUT. Warning: causes a significant slow down, similar or worse to enabling --precise or --regex.<\/p><\/dd><dt>[--before_context=&lt;num&gt;]<\/dt><dd><p>For logging, number of characters to display before the old match and the new replacement. Default 40. Ignored if not logging.<\/p><\/dd><dt>[--after_context=&lt;num&gt;]<\/dt><dd><p>For logging, number of characters to display after the old match and the new replacement. Default 40. Ignored if not logging.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Searches through all rows in a selection of tables and replaces\nappearances of the first string with the second string.<\/p>\n<p>By default, the command uses tables registered to the <code>$wpdb<\/code> object. On\nmultisite, this will just be the tables for the current site unless\n<code>--network<\/code> is specified.<\/p>\n<p>Search\/replace intelligently handles PHP serialized data, and does not\nchange primary key values.<\/p>",
        "has_child": 0,
        "examples": "# Search and replace but skip one column\n$ wp search-replace 'http:\/\/example.test' 'http:\/\/example.com' --skip-columns=guid\n\n# Run search\/replace operation but dont save in database\n$ wp search-replace 'foo' 'bar' wp_posts wp_postmeta wp_terms --dry-run\n\n# Run case-insensitive regex search\/replace operation (slow)\n$ wp search-replace '\\[foo id=\"([0-9]+)\"' '[bar id=\"\\1\"' --regex --regex-flags='i'\n\n# Turn your production multisite database into a local dev database\n$ wp search-replace --url=example.com example.com example.test 'wp_*options' wp_blogs wp_site --network\n\n# Search\/replace to a SQL file without transforming the database\n$ wp search-replace foo bar --export=database.sql\n\n# Bash script: Search\/replace production to development url (multisite compatible)\n#!\/bin\/bash\nif $(wp --url=http:\/\/example.com core is-installed --network); then\nwp search-replace --url=http:\/\/example.com 'http:\/\/example.com' 'http:\/\/example.test' --recurse-objects --network --skip-columns=guid --skip-tables=wp_users\nelse\nwp search-replace 'http:\/\/example.com' 'http:\/\/example.test' --recurse-objects --skip-columns=guid --skip-tables=wp_users\nfi",
        "available": "",
        "synopsis": "wp search-replace <old> <new> [<table>...] [--dry-run] [--network] [--all-tables-with-prefix] [--all-tables] [--export[=<file>]] [--export_insert_size=<rows>] [--skip-tables=<tables>] [--skip-columns=<columns>] [--include-columns=<columns>] [--precise] [--recurse-objects] [--verbose] [--regex] [--regex-flags=<regex-flags>] [--regex-delimiter=<regex-delimiter>] [--regex-limit=<regex-limit>] [--format=<format>] [--report] [--report-changed-only] [--log[=<file>]] [--before_context=<num>] [--after_context=<num>]"
    },
    "site-meta-list": {
        "title": "site meta list",
        "excerpt": "List all metadata associated with an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>ID for the object.<\/p><\/dd><dt>[--keys=&lt;keys&gt;]<\/dt><dd><p>Limit output to metadata of specific keys.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: id]<div><span>Options:<\/span><ul><li><code>id<\/code><\/li><li><code>meta_key<\/code><\/li><li><code>meta_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize meta_value output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta list <id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"
    },
    "site-unarchive": {
        "title": "site unarchive",
        "excerpt": "Unarchives one or more sites.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to unarchive. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to unarchive. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site unarchive 123\nSuccess: Site 123 unarchived.\n\n$ wp site unarchive --slug=demo\nSuccess: Site 123 unarchived.",
        "available": "",
        "synopsis": "wp site unarchive [<id>...] [--slug=<slug>]"
    },
    "term-meta-list": {
        "title": "term meta list",
        "excerpt": "List all metadata associated with an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>ID for the object.<\/p><\/dd><dt>[--keys=&lt;keys&gt;]<\/dt><dd><p>Limit output to metadata of specific keys.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: id]<div><span>Options:<\/span><ul><li><code>id<\/code><\/li><li><code>meta_key<\/code><\/li><li><code>meta_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize meta_value output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta list <id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"
    },
    "theme-activate": {
        "title": "theme activate",
        "excerpt": "Activates a theme.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>The theme to activate.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp theme activate twentysixteen\nSuccess: Switched to 'Twenty Sixteen' theme.",
        "available": "",
        "synopsis": "wp theme activate <theme>"
    },
    "theme-mod-list": {
        "title": "theme mod list",
        "excerpt": "Gets a list of theme mods.",
        "options": "<dl><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Returns the value of a single field.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Gets a list of theme mods.\n$ wp theme mod list\n+------------------+---------+\n| key              | value   |\n+------------------+---------+\n| background_color | dd3333  |\n| link_color       | #dd9933 |\n| main_text_color  | #8224e3 |\n+------------------+---------+",
        "available": "",
        "synopsis": "wp theme mod list [--field=<field>] [--format=<format>]"
    },
    "transient-list": {
        "title": "transient list",
        "excerpt": "Lists transients and their values.",
        "options": "<dl><dt>[--search=&lt;pattern&gt;]<\/dt><dd><p>Use wildcards ( * and ? ) to match transient name.<\/p><\/dd><dt>[--exclude=&lt;pattern&gt;]<\/dt><dd><p>Pattern to exclude. Use wildcards ( * and ? ) to match transient name.<\/p><\/dd><dt>[--network]<\/dt><dd><p>Get the values of network|site transients. On single site, this is a specially-named cache key. On multisite, this is a global cache (instead of local to the site).<\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize transient values in output.<\/p><\/dd><dt>[--human-readable]<\/dt><dd><p>Human-readable output for expirations.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List all transients\n$ wp transient list\n+------+-------+---------------+\n| name | value | expiration    |\n+------+-------+---------------+\n| foo  | bar   | 39 mins       |\n| foo2 | bar2  | no expiration |\n| foo3 | bar2  | expired       |\n| foo4 | bar4  | 4 hours       |\n+------+-------+---------------+",
        "available": "<p>This field will be displayed by default for each matching option:<\/p>\n<ul>\n<li>name<\/li>\n<li>value<\/li>\n<li>expiration<\/li>\n<\/ul>",
        "synopsis": "wp transient list [--search=<pattern>] [--exclude=<pattern>] [--network] [--unserialize] [--human-readable] [--fields=<fields>] [--format=<format>]"
    },
    "transient-type": {
        "title": "transient type",
        "excerpt": "Determines the type of transients implementation.",
        "options": "",
        "options_extra": "<p>Indicates whether the transients API is using an object cache or the\ndatabase.<\/p>\n<p>For a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for <code>wp transient<\/code>.<\/p>",
        "has_child": 0,
        "examples": "$ wp transient type\nTransients are saved to the database.",
        "available": "",
        "synopsis": ""
    },
    "user-list-caps": {
        "title": "user list-caps",
        "excerpt": "Lists all capabilities for a user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or login.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: list]<div><span>Options:<\/span><ul><li><code>list<\/code><\/li><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--origin=&lt;origin&gt;]<\/dt><dd><p>Render output in a particular format. [Default: all]<div><span>Options:<\/span><ul><li><code>all<\/code><\/li><li><code>user<\/code><\/li><li><code>role<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--exclude-role-names]<\/dt><dd><p>Exclude capabilities that match role names from output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp user list-caps 21\nedit_product\ncreate_premium_item",
        "available": "",
        "synopsis": "wp user list-caps <user> [--format=<format>] [--origin=<origin>] [--exclude-role-names]"
    },
    "user-meta-list": {
        "title": "user meta list",
        "excerpt": "Lists all metadata associated with a user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to get metadata for.<\/p><\/dd><dt>[--keys=&lt;keys&gt;]<\/dt><dd><p>Limit output to metadata of specific keys.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: id]<div><span>Options:<\/span><ul><li><code>id<\/code><\/li><li><code>meta_key<\/code><\/li><li><code>meta_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize meta_value output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List user meta\n$ wp user meta list 123 --keys=nickname,description,wp_capabilities\n+---------+-----------------+--------------------------------+\n| user_id | meta_key        | meta_value                     |\n+---------+-----------------+--------------------------------+\n| 123     | nickname        | supervisor                     |\n| 123     | description     | Mary is a WordPress developer. |\n| 123     | wp_capabilities | {\"administrator\":true}         |\n+---------+-----------------+--------------------------------+",
        "available": "",
        "synopsis": "wp user meta list <user> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"
    },
    "user-term-list": {
        "title": "user term list",
        "excerpt": "List all terms associated with an object.",
        "options": "",
        "options_extra": "<id>\n: ID for the object.\n\n<taxonomy>...\n: One or more taxonomies to list.\n\n[--field=<field>]\n: Prints the value of a single field for each term.\n\n[--fields=<fields>]\n: Limit the output to specific row fields.\n\n[--format=<format>]\n: Render output in a particular format.\n---\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - yaml\n  - count\n  - ids\n---",
        "has_child": 0,
        "examples": "",
        "available": "<p>These fields will be displayed by default for each term:<\/p>\n<ul>\n<li>term_id<\/li>\n<li>name<\/li>\n<li>slug<\/li>\n<li>taxonomy<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>term_taxonomy_id<\/li>\n<li>description<\/li>\n<li>term_group<\/li>\n<li>parent<\/li>\n<li>count<\/li>\n<\/ul>",
        "synopsis": "wp user term list <id> <taxonomy>... [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "cli-cache-clear": {
        "title": "cli cache clear",
        "excerpt": "Clears the internal cache.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp cli cache clear\nSuccess: Cache cleared.",
        "available": "",
        "synopsis": ""
    },
    "cli-cache-prune": {
        "title": "cli cache prune",
        "excerpt": "Prunes the internal cache.",
        "options": "",
        "options_extra": "<p>Removes all cached files except for the newest version of each one.<\/p>",
        "has_child": 0,
        "examples": "$ wp cli cache prune\nSuccess: Cache pruned.",
        "available": "",
        "synopsis": ""
    },
    "cli-completions": {
        "title": "cli completions",
        "excerpt": "Generates tab completion strings.",
        "options": "<dl><dt>--line=&lt;line&gt;<\/dt><dd><p>The current command line to be executed.<\/p><\/dd><dt>--point=&lt;point&gt;<\/dt><dd><p>The index to the current cursor position relative to the beginning of the command.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Generate tab completion strings.\n$ wp cli completions --line='wp eva' --point=100\neval\neval-file",
        "available": "",
        "synopsis": "wp cli completions --line=<line> --point=<point>"
    },
    "cli-has-command": {
        "title": "cli has-command",
        "excerpt": "Detects if a command exists",
        "options": "<dl><dt><\/dt><dd><command_name>... : The command<\/dd><\/dl>",
        "options_extra": "<p>This commands checks if a command is registered with WP-CLI.\nIf the command is found then it returns with exit status 0.\nIf the command doesn't exist, then it will exit with status 1.<\/p>",
        "has_child": 0,
        "examples": "# The \"site delete\" command is registered.\n$ wp cli has-command \"site delete\"\n$ echo $?\n0\n\n# The \"foo bar\" command is not registered.\n$ wp cli has-command \"foo bar\"\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp cli has-command <command_name>..."
    },
    "comment-approve": {
        "title": "comment approve",
        "excerpt": "Approves a comment.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>The IDs of the comments to approve.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Approve comment.\n$ wp comment approve 1337\nSuccess: Approved comment 1337.",
        "available": "",
        "synopsis": "wp comment approve <id>..."
    },
    "comment-recount": {
        "title": "comment recount",
        "excerpt": "Recalculates the comment_count value for one or more posts.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>IDs for one or more posts to update.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Recount comment for the post.\n$ wp comment recount 123\nUpdated post 123 comment count to 67.",
        "available": "",
        "synopsis": "wp comment recount <id>..."
    },
    "comment-untrash": {
        "title": "comment untrash",
        "excerpt": "Untrashes a comment.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>The IDs of the comments to untrash.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Untrash comment.\n$ wp comment untrash 1337\nSuccess: Untrashed comment 1337.",
        "available": "",
        "synopsis": "wp comment untrash <id>..."
    },
    "cron-event-list": {
        "title": "cron event list",
        "excerpt": "Lists scheduled cron events.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter by one or more fields.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each event.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List scheduled cron events\n$ wp cron event list\n+-------------------+---------------------+---------------------+------------+\n| hook              | next_run_gmt        | next_run_relative   | recurrence |\n+-------------------+---------------------+---------------------+------------+\n| wp_version_check  | 2016-05-31 22:15:13 | 11 hours 57 minutes | 12 hours   |\n| wp_update_plugins | 2016-05-31 22:15:13 | 11 hours 57 minutes | 12 hours   |\n| wp_update_themes  | 2016-05-31 22:15:14 | 11 hours 57 minutes | 12 hours   |\n+-------------------+---------------------+---------------------+------------+\n\n# List scheduled cron events in JSON\n$ wp cron event list --fields=hook,next_run --format=json\n[{\"hook\":\"wp_version_check\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_plugins\",\"next_run\":\"2016-05-31 10:15:13\"},{\"hook\":\"wp_update_themes\",\"next_run\":\"2016-05-31 10:15:14\"}]",
        "available": "<p>These fields will be displayed by default for each cron event:<\/p>\n<ul>\n<li>hook<\/li>\n<li>next_run_gmt<\/li>\n<li>next_run_relative<\/li>\n<li>recurrence<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>time<\/li>\n<li>sig<\/li>\n<li>args<\/li>\n<li>schedule<\/li>\n<li>interval<\/li>\n<li>next_run<\/li>\n<\/ul>",
        "synopsis": "wp cron event list [--fields=<fields>] [--<field>=<value>] [--field=<field>] [--format=<format>]"
    },
    "language-plugin": {
        "title": "language plugin",
        "excerpt": "Installs, activates, and manages plugin language packs.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Install the Dutch plugin language pack.\n$ wp language plugin install hello-dolly nl_NL\nSuccess: Language installed.\n\n# Uninstall the Dutch plugin language pack.\n$ wp language plugin uninstall hello-dolly nl_NL\nSuccess: Language uninstalled.\n\n# List installed plugin language packages.\n$ wp language plugin list --status=installed\n+----------+--------------+-------------+-----------+-----------+---------------------+\n| language | english_name | native_name | status    | update    | updated             |\n+----------+--------------+-------------+-----------+-----------+---------------------+\n| nl_NL    | Dutch        | Nederlands  | installed | available | 2016-05-13 08:12:50 |\n+----------+--------------+-------------+-----------+-----------+---------------------+",
        "available": "",
        "synopsis": ""
    },
    "package-install": {
        "title": "package install",
        "excerpt": "Installs a WP-CLI package.",
        "options": "<dl><dt>&lt;name|git|path|zip&gt;<\/dt><dd><p>Name, git URL, directory path, or .zip file for the package to install. Names can optionally include a version constraint (e.g. wp-cli\/server-command:@stable).<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Packages are required to be a valid Composer package, and can be\nspecified as:<\/p>\n<ul>\n<li>Package name from WP-CLI's package index.<\/li>\n<li>Git URL accessible by the current shell user.<\/li>\n<li>Path to a directory on the local machine.<\/li>\n<li>Local or remote .zip file.<\/li>\n<\/ul>\n<p>Packages are installed to <code>~\/.wp-cli\/packages\/<\/code> by default. Use the\n<code>WP_CLI_PACKAGES_DIR<\/code> environment variable to provide a custom path.<\/p>\n<p>When installing a local directory, WP-CLI simply registers a\nreference to the directory. If you move or delete the directory, WP-CLI's\nreference breaks.<\/p>\n<p>When installing a .zip file, WP-CLI extracts the package to\n<code>~\/.wp-cli\/packages\/local\/&lt;package-name&gt;<\/code>.<\/p>\n<p>If Github token authorization is required, a GitHub Personal Access Token\n(<a href=\"https:\/\/github.com\/settings\/tokens\">https:\/\/github.com\/settings\/tokens<\/a>) can be used. The following command\nwill add a GitHub Personal Access Token to Composer's global configuration:\ncomposer config -g github-oauth.github.com <GITHUB_TOKEN>\nOnce this has been added, the value used for <GITHUB_TOKEN> will be used\nfor future authorization requests.<\/p>",
        "has_child": 0,
        "examples": "# Install a package hosted at a git URL.\n$ wp package install runcommand\/hook\n\n# Install the latest stable version.\n$ wp package install wp-cli\/server-command:@stable\n\n# Install a package hosted at a GitLab.com URL.\n$ wp package install https:\/\/gitlab.com\/foo\/wp-cli-bar-command.git\n\n# Install a package in a .zip file.\n$ wp package install google-sitemap-generator-cli.zip",
        "available": "",
        "synopsis": "wp package install <name|git|path|zip> [--insecure]"
    },
    "plugin-activate": {
        "title": "plugin activate",
        "excerpt": "Activates one or more plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to activate.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all plugins will be activated.<\/p><\/dd><dt>[--exclude=&lt;name&gt;]<\/dt><dd><p>Comma separated list of plugin slugs to be excluded from activation.<\/p><\/dd><dt>[--network]<\/dt><dd><p>If set, the plugin will be activated for the entire multisite network.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Activate plugin\n$ wp plugin activate hello\nPlugin 'hello' activated.\nSuccess: Activated 1 of 1 plugins.\n\n# Activate plugin in entire multisite network\n$ wp plugin activate hello --network\nPlugin 'hello' network activated.\nSuccess: Network activated 1 of 1 plugins.",
        "available": "",
        "synopsis": "wp plugin activate [<plugin>...] [--all] [--exclude=<name>] [--network]"
    },
    "post-meta-patch": {
        "title": "post meta patch",
        "excerpt": "Update a nested value for a meta field.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta patch <action> <id> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "post-meta-pluck": {
        "title": "post meta pluck",
        "excerpt": "Get a nested value from a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta pluck <id> <key> <key-path>... [--format=<format>]"
    },
    "scaffold-plugin": {
        "title": "scaffold plugin",
        "excerpt": "Generates starter code for a plugin.",
        "options": "<dl><dt>&lt;slug&gt;<\/dt><dd><p>The internal name of the plugin.<\/p><\/dd><dt>[--dir=&lt;dirname&gt;]<\/dt><dd><p>Put the new plugin in some arbitrary directory path. Plugin directory will be path plus supplied slug.<\/p><\/dd><dt>[--plugin_name=&lt;title&gt;]<\/dt><dd><p>What to put in the 'Plugin Name:' header.<\/p><\/dd><dt>[--plugin_description=&lt;description&gt;]<\/dt><dd><p>What to put in the 'Description:' header.<\/p><\/dd><dt>[--plugin_author=&lt;author&gt;]<\/dt><dd><p>What to put in the 'Author:' header.<\/p><\/dd><dt>[--plugin_author_uri=&lt;url&gt;]<\/dt><dd><p>What to put in the 'Author URI:' header.<\/p><\/dd><dt>[--plugin_uri=&lt;url&gt;]<\/dt><dd><p>What to put in the 'Plugin URI:' header.<\/p><\/dd><dt>[--skip-tests]<\/dt><dd><p>Don't generate files for unit testing.<\/p><\/dd><dt>[--ci=&lt;provider&gt;]<\/dt><dd><p>Choose a configuration file for a continuous integration provider. [Default: circle]<div><span>Options:<\/span><ul><li><code>circle<\/code><\/li><li><code>gitlab<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--activate]<\/dt><dd><p>Activate the newly generated plugin.<\/p><\/dd><dt>[--activate-network]<\/dt><dd><p>Network activate the newly generated plugin.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>The following files are always generated:<\/p>\n<ul>\n<li><code>plugin-slug.php<\/code> is the main PHP plugin file.<\/li>\n<li><code>readme.txt<\/code> is the readme file for the plugin.<\/li>\n<li><code>package.json<\/code> needed by NPM holds various metadata relevant to the project. Packages: <code>grunt<\/code>, <code>grunt-wp-i18n<\/code> and <code>grunt-wp-readme-to-markdown<\/code>. Scripts: <code>start<\/code>, <code>readme<\/code>, <code>i18n<\/code>.<\/li>\n<li><code>Gruntfile.js<\/code> is the JS file containing Grunt tasks. Tasks: <code>i18n<\/code> containing <code>addtextdomain<\/code> and <code>makepot<\/code>, <code>readme<\/code> containing <code>wp_readme_to_markdown<\/code>.<\/li>\n<li><code>.editorconfig<\/code> is the configuration file for Editor.<\/li>\n<li><code>.gitignore<\/code> tells which files (or patterns) git should ignore.<\/li>\n<li><code>.distignore<\/code> tells which files and folders should be ignored in distribution.<\/li>\n<\/ul>\n<p>The following files are also included unless the <code>--skip-tests<\/code> is used:<\/p>\n<ul>\n<li><code>phpunit.xml.dist<\/code> is the configuration file for PHPUnit.<\/li>\n<li><code>.circleci\/config.yml<\/code> is the configuration file for CircleCI. Use <code>--ci=&lt;provider&gt;<\/code> to select a different service.<\/li>\n<li><code>bin\/install-wp-tests.sh<\/code> configures the WordPress test suite and a test database.<\/li>\n<li><code>tests\/bootstrap.php<\/code> is the file that makes the current plugin active when running the test suite.<\/li>\n<li><code>tests\/test-sample.php<\/code> is a sample file containing test cases.<\/li>\n<li><code>.phpcs.xml.dist<\/code> is a collection of PHP_CodeSniffer rules.<\/li>\n<\/ul>",
        "has_child": 0,
        "examples": "$ wp scaffold plugin sample-plugin\nSuccess: Created plugin files.\nSuccess: Created test files.",
        "available": "",
        "synopsis": "wp scaffold plugin <slug> [--dir=<dirname>] [--plugin_name=<title>] [--plugin_description=<description>] [--plugin_author=<author>] [--plugin_author_uri=<url>] [--plugin_uri=<url>] [--skip-tests] [--ci=<provider>] [--activate] [--activate-network] [--force]"
    },
    "site-deactivate": {
        "title": "site deactivate",
        "excerpt": "Deactivates one or more sites.",
        "options": "<dl><dt>[&lt;id&gt;...]<\/dt><dd><p>One or more IDs of sites to deactivate. If not provided, you must set the --slug parameter.<\/p><\/dd><dt>[--slug=&lt;slug&gt;]<\/dt><dd><p>Path of the site to be deactivated. Subdomain on subdomain installs, directory on subdirectory installs.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site deactivate 123\nSuccess: Site 123 deactivated.\n\n$ wp site deactivate --slug=demo\nSuccess: Site 123 deactivated.",
        "available": "",
        "synopsis": "wp site deactivate [<id>...] [--slug=<slug>]"
    },
    "site-meta-patch": {
        "title": "site meta patch",
        "excerpt": "Update a nested value for a meta field.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta patch <action> <id> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "site-meta-pluck": {
        "title": "site meta pluck",
        "excerpt": "Get a nested value from a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta pluck <id> <key> <key-path>... [--format=<format>]"
    },
    "site-option-add": {
        "title": "site option add",
        "excerpt": "Adds a site option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The name of the site option to add.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the site option to add. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create a site option by reading a JSON file\n$ wp site option add my_option --format=json < config.json\nSuccess: Added 'my_option' site option.",
        "available": "",
        "synopsis": "wp site option add <key> [<value>] [--format=<format>]"
    },
    "site-option-get": {
        "title": "site option get",
        "excerpt": "Gets a site option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the site option.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get site upload filetypes\n$ wp site option get upload_filetypes\njpg jpeg png gif mov avi mpg",
        "available": "",
        "synopsis": "wp site option get <key> [--format=<format>]"
    },
    "super-admin-add": {
        "title": "super-admin add",
        "excerpt": "Grants super admin privileges to one or more users.",
        "options": "<dl><dt>&lt;user&gt;...<\/dt><dd><p>One or more user IDs, user emails, or user logins.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp super-admin add superadmin2\nSuccess: Granted super-admin capabilities.",
        "available": "",
        "synopsis": "wp super-admin add <user>..."
    },
    "term-meta-patch": {
        "title": "term meta patch",
        "excerpt": "Update a nested value for a meta field.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta patch <action> <id> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "term-meta-pluck": {
        "title": "term meta pluck",
        "excerpt": "Get a nested value from a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta pluck <id> <key> <key-path>... [--format=<format>]"
    },
    "theme-is-active": {
        "title": "theme is-active",
        "excerpt": "Checks if a given theme is active.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>The plugin to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when active, 1 when not active.<\/p>",
        "has_child": 0,
        "examples": "# Check whether theme is Active; exit status 0 if active, otherwise 1\n$ wp theme is-active twentyfifteen\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp theme is-active <theme>"
    },
    "user-import-csv": {
        "title": "user import-csv",
        "excerpt": "Imports users from a CSV file.",
        "options": "<dl><dt>&lt;file&gt;<\/dt><dd><p>The local or remote CSV file of users to import. If '-', then reads from STDIN.<\/p><\/dd><dt>[--send-email]<\/dt><dd><p>Send an email to new users with their account details.<\/p><\/dd><dt>[--skip-update]<\/dt><dd><p>Don't update users that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>If the user already exists (matching the email address or login), then\nthe user is updated unless the <code>--skip-update<\/code> flag is used.<\/p>",
        "has_child": 0,
        "examples": "# Import users from local CSV file\n$ wp user import-csv \/path\/to\/users.csv\nSuccess: bobjones created.\nSuccess: newuser1 created.\nSuccess: existinguser created.\n\n# Import users from remote CSV file\n$ wp user import-csv http:\/\/example.com\/users.csv\n\nSample users.csv file:\n\nuser_login,user_email,display_name,role\nbobjones,bobjones@example.com,Bob Jones,contributor\nnewuser1,newuser1@example.com,New User,author\nexistinguser,existinguser@example.com,Existing User,administrator",
        "available": "",
        "synopsis": "wp user import-csv <file> [--send-email] [--skip-update]"
    },
    "user-meta-patch": {
        "title": "user meta patch",
        "excerpt": "Update a nested value for a meta field.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp user meta patch <action> <id> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "user-meta-pluck": {
        "title": "user meta pluck",
        "excerpt": "Get a nested value from a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp user meta pluck <id> <key> <key-path>... [--format=<format>]"
    },
    "user-remove-cap": {
        "title": "user remove-cap",
        "excerpt": "Removes a user's capability.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>&lt;cap&gt;<\/dt><dd><p>The capability to be removed.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp user remove-cap 11 publish_newsletters\nSuccess: Removed 'publish_newsletters' cap for supervisor (11).\n\n$ wp user remove-cap 11 publish_posts\nError: The 'publish_posts' cap for supervisor (11) is inherited from a role.\n\n$ wp user remove-cap 11 nonexistent_cap\nError: No such 'nonexistent_cap' cap for supervisor (11).",
        "available": "",
        "synopsis": "wp user remove-cap <user> <cap>"
    },
    "cli-alias-delete": {
        "title": "cli alias delete",
        "excerpt": "Deletes an alias.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the alias.<\/p><\/dd><dt>[--config=&lt;config&gt;]<\/dt><dd><p>Config file to be considered for operations.<div><span>Options:<\/span><ul><li><code>global<\/code><\/li><li><code>project<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete alias.\n$ wp cli alias delete @prod\nSuccess: Deleted '@prod' alias.\n\n# Delete project alias.\n$ wp cli alias delete @prod --config=project\nSuccess: Deleted '@prod' alias.",
        "available": "",
        "synopsis": "wp cli alias delete <key> [--config=<config>]"
    },
    "cli-alias-update": {
        "title": "cli alias update",
        "excerpt": "Updates an alias.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the alias.<\/p><\/dd><dt>[--set-user=&lt;user&gt;]<\/dt><dd><p>Set user for alias.<\/p><\/dd><dt>[--set-url=&lt;url&gt;]<\/dt><dd><p>Set url for alias.<\/p><\/dd><dt>[--set-path=&lt;path&gt;]<\/dt><dd><p>Set path for alias.<\/p><\/dd><dt>[--set-ssh=&lt;ssh&gt;]<\/dt><dd><p>Set ssh for alias.<\/p><\/dd><dt>[--set-http=&lt;http&gt;]<\/dt><dd><p>Set http for alias.<\/p><\/dd><dt>[--grouping=&lt;grouping&gt;]<\/dt><dd><p>For grouping multiple aliases.<\/p><\/dd><dt>[--config=&lt;config&gt;]<\/dt><dd><p>Config file to be considered for operations.<div><span>Options:<\/span><ul><li><code>global<\/code><\/li><li><code>project<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update alias.\n$ wp cli alias update @prod --set-user=newuser --set-path=\/new\/path\/to\/wordpress\/install\/\nSuccess: Updated 'prod' alias.\n\n# Update project alias.\n$ wp cli alias update @prod --set-user=newuser --set-path=\/new\/path\/to\/wordpress\/install\/ --config=project\nSuccess: Updated 'prod' alias.",
        "available": "",
        "synopsis": "wp cli alias update <key> [--set-user=<user>] [--set-url=<url>] [--set-path=<path>] [--set-ssh=<ssh>] [--set-http=<http>] [--grouping=<grouping>] [--config=<config>]"
    },
    "cli-check-update": {
        "title": "cli check-update",
        "excerpt": "Checks to see if there is a newer version of WP-CLI available.",
        "options": "<dl><dt>[--patch]<\/dt><dd><p>Only list patch updates.<\/p><\/dd><dt>[--minor]<\/dt><dd><p>Only list minor updates.<\/p><\/dd><dt>[--major]<\/dt><dd><p>Only list major updates.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each update.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields. Defaults to version,update_type,package_url.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Queries the Github releases API. Returns available versions if there are\nupdates available, or success message if using the latest release.<\/p>",
        "has_child": 0,
        "examples": "# Check for update.\n$ wp cli check-update\nSuccess: WP-CLI is at the latest version.\n\n# Check for update and new version is available.\n$ wp cli check-update\n+---------+-------------+-------------------------------------------------------------------------------+\n| version | update_type | package_url                                                                   |\n+---------+-------------+-------------------------------------------------------------------------------+\n| 0.24.1  | patch       | https:\/\/github.com\/wp-cli\/wp-cli\/releases\/download\/v0.24.1\/wp-cli-0.24.1.phar |\n+---------+-------------+-------------------------------------------------------------------------------+",
        "available": "",
        "synopsis": "wp cli check-update [--patch] [--minor] [--major] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "comment-generate": {
        "title": "comment generate",
        "excerpt": "Generates some number of new dummy comments.",
        "options": "<dl><dt>[--count=&lt;number&gt;]<\/dt><dd><p>How many comments to generate? [Default: 100]<\/p><\/dd><dt>[--post_id=&lt;post-id&gt;]<\/dt><dd><p>Assign comments to a specific post.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: progress]<div><span>Options:<\/span><ul><li><code>progress<\/code><\/li><li><code>ids<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a specified number of new comments with dummy data.<\/p>",
        "has_child": 0,
        "examples": "# Generate comments for the given post.\n$ wp comment generate --format=ids --count=3 --post_id=123\n138 139 140\n\n# Add meta to every generated comment.\n$ wp comment generate --format=ids --count=3 | xargs -d ' ' -I % wp comment meta add % foo bar\nSuccess: Added custom field.\nSuccess: Added custom field.\nSuccess: Added custom field.",
        "available": "",
        "synopsis": "wp comment generate [--count=<number>] [--post_id=<post-id>] [--format=<format>]"
    },
    "comment-meta-add": {
        "title": "comment meta add",
        "excerpt": "Add a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to create.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the meta field. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta add <id> <key> [<value>] [--format=<format>]"
    },
    "comment-meta-get": {
        "title": "comment meta get",
        "excerpt": "Get meta field value.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta get <id> <key> [--format=<format>]"
    },
    "embed-cache-find": {
        "title": "embed cache find",
        "excerpt": "Finds an oEmbed cache post ID for a given URL.",
        "options": "<dl><dt>&lt;url&gt;<\/dt><dd><p>URL to retrieve oEmbed data for.<\/p><\/dd><dt>[--width=&lt;width&gt;]<\/dt><dd><p>Width of the embed in pixels. Part of cache key so must match. Defaults to <code>content_width<\/code> if set else 500px, so is theme and context dependent.<\/p><\/dd><dt>[--height=&lt;height&gt;]<\/dt><dd><p>Height of the embed in pixels. Part of cache key so must match. Defaults to 1.5 * default width (<code>content_width<\/code> or 500px), to a maximum of 1000px.<\/p><\/dd><dt>[--discover]<\/dt><dd><p>Whether to search with the discover attribute set or not. Part of cache key so must match. If not given, will search with attribute: unset, '1', '0', returning first.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Starting with WordPress 4.9, embeds that aren't associated with a specific post will be cached in\na new oembed_cache post type. There can be more than one such entry for a url depending on attributes and context.<\/p>\n<p>Not to be confused with oEmbed caches for a given post which are stored in the post's metadata.<\/p>",
        "has_child": 0,
        "examples": "# Find cache post ID for a given URL.\n$ wp embed cache find https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ --width=500\n123",
        "available": "",
        "synopsis": "wp embed cache find <url> [--width=<width>] [--height=<height>] [--discover]"
    },
    "maintenance-mode": {
        "title": "maintenance-mode",
        "excerpt": "Activates, deactivates or checks the status of the maintenance mode of a site.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Activate Maintenance mode.\n$ wp maintenance-mode activate\nEnabling Maintenance mode...\nSuccess: Activated Maintenance mode.\n\n# Deactivate Maintenance mode.\n$ wp maintenance-mode deactivate\nDisabling Maintenance mode...\nSuccess: Deactivated Maintenance mode.\n\n# Display Maintenance mode status.\n$ wp maintenance-mode status\nMaintenance mode is active.\n\n# Get Maintenance mode status for scripting purpose.\n$ wp maintenance-mode is-active\n$ echo $?\n1",
        "available": "",
        "synopsis": ""
    },
    "media-image-size": {
        "title": "media image-size",
        "excerpt": "Lists image sizes registered with WordPress.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields. Defaults to all fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a specific format [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List all registered image sizes\n$ wp media image-size\n+---------------------------+-------+--------+-------+-------+\n| name                      | width | height | crop  | ratio |\n+---------------------------+-------+--------+-------+-------+\n| full                      |       |        | N\/A   | N\/A   |\n| twentyfourteen-full-width | 1038  | 576    | hard  | 173:96|\n| large                     | 1024  | 1024   | soft  | N\/A   |\n| medium_large              | 768   | 0      | soft  | N\/A   |\n| medium                    | 300   | 300    | soft  | N\/A   |\n| thumbnail                 | 150   | 150    | hard  | 1:1   |\n+---------------------------+-------+--------+-------+-------+",
        "available": "<p>These fields will be displayed by default for each image size:<\/p>\n<ul>\n<li>name<\/li>\n<li>width<\/li>\n<li>height<\/li>\n<li>crop<\/li>\n<li>ratio<\/li>\n<\/ul>",
        "synopsis": "wp media image-size [--fields=<fields>] [--format=<format>]"
    },
    "media-regenerate": {
        "title": "media regenerate",
        "excerpt": "Regenerates thumbnails for one or more attachments.",
        "options": "<dl><dt>[&lt;attachment-id&gt;...]<\/dt><dd><p>One or more IDs of the attachments to regenerate.<\/p><\/dd><dt>[--image_size=&lt;image_size&gt;]<\/dt><dd><p>Name of the image size to regenerate. Only thumbnails of this image size will be regenerated, thumbnails of other image sizes will not.<\/p><\/dd><dt>[--skip-delete]<\/dt><dd><p>Skip deletion of the original thumbnails. If your thumbnails are linked from sources outside your control, it's likely best to leave them around. Defaults to false.<\/p><\/dd><dt>[--only-missing]<\/dt><dd><p>Only generate thumbnails for images missing image sizes.<\/p><\/dd><dt>[--yes]<\/dt><dd><p>Answer yes to the confirmation message. Confirmation only shows when no IDs passed as arguments.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Regenerate thumbnails for given attachment IDs.\n$ wp media regenerate 123 124 125\nFound 3 images to regenerate.\n1\/3 Regenerated thumbnails for \"Vertical Image\" (ID 123).\n2\/3 Regenerated thumbnails for \"Horizontal Image\" (ID 124).\n3\/3 Regenerated thumbnails for \"Beautiful Picture\" (ID 125).\nSuccess: Regenerated 3 of 3 images.\n\n# Regenerate all thumbnails, without confirmation.\n$ wp media regenerate --yes\nFound 3 images to regenerate.\n1\/3 Regenerated thumbnails for \"Sydney Harbor Bridge\" (ID 760).\n2\/3 Regenerated thumbnails for \"Boardwalk\" (ID 757).\n3\/3 Regenerated thumbnails for \"Sunburst Over River\" (ID 756).\nSuccess: Regenerated 3 of 3 images.\n\n# Re-generate all thumbnails that have IDs between 1000 and 2000.\n$ seq 1000 2000 | xargs wp media regenerate\nFound 4 images to regenerate.\n1\/4 Regenerated thumbnails for \"Vertical Featured Image\" (ID 1027).\n2\/4 Regenerated thumbnails for \"Horizontal Featured Image\" (ID 1022).\n3\/4 Regenerated thumbnails for \"Unicorn Wallpaper\" (ID 1045).\n4\/4 Regenerated thumbnails for \"I Am Worth Loving Wallpaper\" (ID 1023).\nSuccess: Regenerated 4 of 4 images.\n\n# Re-generate only the thumbnails of \"large\" image size for all images.\n$ wp media regenerate --image_size=large\nDo you really want to regenerate the \"large\" image size for all images? [y\/n] y\nFound 3 images to regenerate.\n1\/3 Regenerated \"large\" thumbnail for \"Sydney Harbor Bridge\" (ID 760).\n2\/3 No \"large\" thumbnail regeneration needed for \"Boardwalk\" (ID 757).\n3\/3 Regenerated \"large\" thumbnail for \"Sunburst Over River\" (ID 756).\nSuccess: Regenerated 3 of 3 images.",
        "available": "",
        "synopsis": "wp media regenerate [<attachment-id>...] [--image_size=<image_size>] [--skip-delete] [--only-missing] [--yes]"
    },
    "menu-item-delete": {
        "title": "menu item delete",
        "excerpt": "Deletes one or more items from a menu.",
        "options": "<dl><dt>&lt;db-id&gt;...<\/dt><dd><p>Database ID for the menu item(s).<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu item delete 45\nSuccess: Deleted 1 of 1 menu items.",
        "available": "",
        "synopsis": "wp menu item delete <db-id>..."
    },
    "menu-item-update": {
        "title": "menu item update",
        "excerpt": "Updates a menu item.",
        "options": "<dl><dt>&lt;db-id&gt;<\/dt><dd><p>Database ID for the menu item.<\/p><\/dd><dt>[--title=&lt;title&gt;]<\/dt><dd><p>Set a custom title for the menu item.<\/p><\/dd><dt>[--link=&lt;link&gt;]<\/dt><dd><p>Set a custom url for the menu item.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>Set a custom description for the menu item.<\/p><\/dd><dt>[--attr-title=&lt;attr-title&gt;]<\/dt><dd><p>Set a custom title attribute for the menu item.<\/p><\/dd><dt>[--target=&lt;target&gt;]<\/dt><dd><p>Set a custom link target for the menu item.<\/p><\/dd><dt>[--classes=&lt;classes&gt;]<\/dt><dd><p>Set a custom link classes for the menu item.<\/p><\/dd><dt>[--position=&lt;position&gt;]<\/dt><dd><p>Specify the position of this menu item.<\/p><\/dd><dt>[--parent-id=&lt;parent-id&gt;]<\/dt><dd><p>Make this menu item a child of another menu item.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu item update 45 --title=WordPress --link='http:\/\/wordpress.org' --target=_blank --position=2\nSuccess: Menu item updated.",
        "available": "",
        "synopsis": "wp menu item update <db-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>]"
    },
    "network-meta-add": {
        "title": "network meta add",
        "excerpt": "Add a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to create.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value of the meta field. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta add <id> <key> [<value>] [--format=<format>]"
    },
    "network-meta-get": {
        "title": "network meta get",
        "excerpt": "Get meta field value.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Get value in a particular format. [Default: var_export]<div><span>Options:<\/span><ul><li><code>var_export<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta get <id> <key> [--format=<format>]"
    },
    "plugin-is-active": {
        "title": "plugin is-active",
        "excerpt": "Checks if a given plugin is active.",
        "options": "<dl><dt>&lt;plugin&gt;<\/dt><dd><p>The plugin to check.<\/p><\/dd><dt>[--network]<\/dt><dd><p>If set, check if plugin is network-activated.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when active, 1 when not active.<\/p>",
        "has_child": 0,
        "examples": "# Check whether plugin is Active; exit status 0 if active, otherwise 1\n$ wp plugin is-active hello\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp plugin is-active <plugin> [--network]"
    },
    "plugin-uninstall": {
        "title": "plugin uninstall",
        "excerpt": "Uninstalls one or more plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to uninstall.<\/p><\/dd><dt>[--deactivate]<\/dt><dd><p>Deactivate the plugin before uninstalling. Default behavior is to warn and skip if the plugin is active.<\/p><\/dd><dt>[--skip-delete]<\/dt><dd><p>If set, the plugin files will not be deleted. Only the uninstall procedure will be run.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all plugins will be uninstalled.<\/p><\/dd><dt>[--exclude=&lt;name&gt;]<\/dt><dd><p>Comma separated list of plugin slugs to be excluded from uninstall.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp plugin uninstall hello\nUninstalled and deleted 'hello' plugin.\nSuccess: Uninstalled 1 of 1 plugins.\n\n# Uninstall all plugins excluding specified ones\n$ wp plugin uninstall --all --exclude=hello-dolly,jetpack\nUninstalled and deleted 'akismet' plugin.\nUninstalled and deleted 'tinymce-templates' plugin.\nSuccess: Uninstalled 2 of 2 plugins.",
        "available": "",
        "synopsis": "wp plugin uninstall [<plugin>...] [--deactivate] [--skip-delete] [--all] [--exclude=<name>]"
    },
    "post-meta-delete": {
        "title": "post meta delete",
        "excerpt": "Delete a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>[&lt;key&gt;]<\/dt><dd><p>The name of the meta field to delete.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value to delete. If omitted, all rows with key will deleted.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all meta for the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta delete <id> [<key>] [<value>] [--all]"
    },
    "post-meta-update": {
        "title": "post meta update",
        "excerpt": "Update a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post meta update <id> <key> [<value>] [--format=<format>]"
    },
    "post-term-remove": {
        "title": "post term remove",
        "excerpt": "Remove a term from an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;taxonomy&gt;<\/dt><dd><p>The name of the term's taxonomy.<\/p><\/dd><dt>[&lt;term&gt;...]<\/dt><dd><p>The slug of the term or terms to be removed from the object.<\/p><\/dd><dt>[--by=&lt;field&gt;]<\/dt><dd><p>Explicitly handle the term value as a slug or id. [Default: slug]<div><span>Options:<\/span><ul><li><code>slug<\/code><\/li><li><code>id<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--all]<\/dt><dd><p>Remove all terms from the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp post term remove <id> <taxonomy> [<term>...] [--by=<field>] [--all]"
    },
    "scaffold-package": {
        "title": "scaffold package",
        "excerpt": "Generate the files needed for a basic WP-CLI command.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name for the new package. Expects <author>\/<package> (e.g. 'wp-cli\/scaffold-package').<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>Human-readable description for the package.<\/p><\/dd><dt>[--homepage=&lt;homepage&gt;]<\/dt><dd><p>Homepage for the package. Defaults to '<a href=\"https:\/\/github.com\/\">https:\/\/github.com\/<\/a><name>'<\/p><\/dd><dt>[--dir=&lt;dir&gt;]<\/dt><dd><p>Specify a destination directory for the command. Defaults to WP-CLI's <code>packages\/local\/<\/code> directory.<\/p><\/dd><dt>[--license=&lt;license&gt;]<\/dt><dd><p>License for the package. [Default: MIT]<\/p><\/dd><dt>[--require_wp_cli=&lt;version&gt;]<\/dt><dd><p>Required WP-CLI version for the package. [Default: ^2.5]<\/p><\/dd><dt>[--require_wp_cli_tests=&lt;version&gt;]<\/dt><dd><p>Required WP-CLI testing framework version for the package. [Default: ^3.0.11]<\/p><\/dd><dt>[--skip-tests]<\/dt><dd><p>Don't generate files for integration testing.<\/p><\/dd><dt>[--skip-readme]<\/dt><dd><p>Don't generate a README.md for the package.<\/p><\/dd><dt>[--skip-github]<\/dt><dd><p>Don't generate GitHub issue and pull request templates.<\/p><\/dd><dt>[--skip-install]<\/dt><dd><p>Don't install the package after scaffolding.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Default behavior is to create the following files:<\/p>\n<ul>\n<li>command.php<\/li>\n<li>composer.json (with package name, description, and license)<\/li>\n<li>.gitignore, .editorconfig, and .distignore<\/li>\n<li>README.md (via wp scaffold package-readme)<\/li>\n<li>Test harness (via wp scaffold package-tests)<\/li>\n<\/ul>\n<p>Unless specified with <code>--dir=&lt;dir&gt;<\/code>, the command package is placed in the\nWP-CLI <code>packages\/local\/<\/code> directory.<\/p>",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp scaffold package <name> [--description=<description>] [--homepage=<homepage>] [--dir=<dir>] [--license=<license>] [--require_wp_cli=<version>] [--require_wp_cli_tests=<version>] [--skip-tests] [--skip-readme] [--skip-github] [--skip-install] [--force]"
    },
    "site-meta-delete": {
        "title": "site meta delete",
        "excerpt": "Delete a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>[&lt;key&gt;]<\/dt><dd><p>The name of the meta field to delete.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value to delete. If omitted, all rows with key will deleted.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all meta for the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta delete <id> [<key>] [<value>] [--all]"
    },
    "site-meta-update": {
        "title": "site meta update",
        "excerpt": "Update a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site meta update <id> <key> [<value>] [--format=<format>]"
    },
    "site-option-list": {
        "title": "site option list",
        "excerpt": "Lists site options.",
        "options": "<dl><dt>[--search=&lt;pattern&gt;]<\/dt><dd><p>Use wildcards ( * and ? ) to match option name.<\/p><\/dd><dt>[--site_id=&lt;id&gt;]<\/dt><dd><p>Limit options to those of a particular site id.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. total_bytes displays the total size of matching options in bytes. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><li><code>total_bytes<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List all site options beginning with \"i2f_\"\n$ wp site option list --search=\"i2f_*\"\n+-------------+--------------+\n| meta_key    | meta_value   |\n+-------------+--------------+\n| i2f_version | 0.1.0        |\n+-------------+--------------+",
        "available": "<p>This field will be displayed by default for each matching option:<\/p>\n<ul>\n<li>meta_key<\/li>\n<li>meta_value<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>meta_id<\/li>\n<li>site_id<\/li>\n<li>size_bytes<\/li>\n<\/ul>",
        "synopsis": "wp site option list [--search=<pattern>] [--site_id=<id>] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "super-admin-list": {
        "title": "super-admin list",
        "excerpt": "Lists users with super admin capabilities.",
        "options": "<dl><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: list]<div><span>Options:<\/span><ul><li><code>list<\/code><\/li><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List user with super-admin capabilities\n$ wp super-admin list\nsupervisor\nadministrator",
        "available": "",
        "synopsis": "wp super-admin list [--format=<format>]"
    },
    "term-meta-delete": {
        "title": "term meta delete",
        "excerpt": "Delete a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>[&lt;key&gt;]<\/dt><dd><p>The name of the meta field to delete.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value to delete. If omitted, all rows with key will deleted.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all meta for the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta delete <id> [<key>] [<value>] [--all]"
    },
    "term-meta-update": {
        "title": "term meta update",
        "excerpt": "Update a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp term meta update <id> <key> [<value>] [--format=<format>]"
    },
    "theme-mod-remove": {
        "title": "theme mod remove",
        "excerpt": "Removes one or more theme mods.",
        "options": "<dl><dt>[&lt;mod&gt;...]<\/dt><dd><p>One or more mods to remove.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Remove all theme mods.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Remove all theme mods.\n$ wp theme mod remove --all\nSuccess: Theme mods removed.\n\n# Remove single theme mod.\n$ wp theme mod remove background_color\nSuccess: 1 mod removed.\n\n# Remove multiple theme mods.\n$ wp theme mod remove background_color header_textcolor\nSuccess: 2 mods removed.",
        "available": "",
        "synopsis": "wp theme mod remove [<mod>...] [--all]"
    },
    "transient-delete": {
        "title": "transient delete",
        "excerpt": "Deletes a transient value.",
        "options": "<dl><dt>[&lt;key&gt;]<\/dt><dd><p>Key for the transient.<\/p><\/dd><dt>[--network]<\/dt><dd><p>Delete the value of a network|site transient. On single site, this is is a specially-named cache key. On multisite, this is a global cache (instead of local to the site).<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all transients.<\/p><\/dd><dt>[--expired]<\/dt><dd><p>Delete all expired transients.<\/p><\/dd><\/dl>",
        "options_extra": "<p>For a more complete explanation of the transient cache, including the\nnetwork|site cache, please see docs for <code>wp transient<\/code>.<\/p>",
        "has_child": 0,
        "examples": "# Delete transient.\n$ wp transient delete sample_key\nSuccess: Transient deleted.\n\n# Delete expired transients.\n$ wp transient delete --expired\nSuccess: 12 expired transients deleted from the database.\n\n# Delete expired site transients.\n$ wp transient delete --expired --network\nSuccess: 1 expired transient deleted from the database.\n\n# Delete all transients.\n$ wp transient delete --all\nSuccess: 14 transients deleted from the database.\n\n# Delete all site transients.\n$ wp transient delete --all --network\nSuccess: 2 transients deleted from the database.\n\n# Delete all transients in a multisite.\n$ wp transient delete --all --network && wp site list --field=url | xargs -n1 -I % wp --url=% transient delete --all",
        "available": "",
        "synopsis": "wp transient delete [<key>] [--network] [--all] [--expired]"
    },
    "user-meta-delete": {
        "title": "user meta delete",
        "excerpt": "Deletes a meta field.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to delete metadata from.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The metadata key.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value to delete. If omitted, all rows with key will deleted.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete user meta\n$ wp user meta delete 123 bio\nSuccess: Deleted custom field.",
        "available": "",
        "synopsis": "wp user meta delete <user> <key> [<value>]"
    },
    "user-meta-update": {
        "title": "user meta update",
        "excerpt": "Updates a meta field.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to update metadata for.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The metadata key.<\/p><\/dd><dt>&lt;value&gt;<\/dt><dd><p>The new metadata value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update user meta\n$ wp user meta update 123 bio \"Mary is an awesome WordPress developer.\"\nSuccess: Updated custom field 'bio'.",
        "available": "",
        "synopsis": "wp user meta update <user> <key> <value> [--format=<format>]"
    },
    "user-remove-role": {
        "title": "user remove-role",
        "excerpt": "Removes a user's role.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>[&lt;role&gt;...]<\/dt><dd><p>Remove the specified role(s) from the user.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp user remove-role 12 author\nSuccess: Removed 'author' role for johndoe (12).\n\n$ wp user remove-role 12 author editor\nSuccess: Removed 'author', 'editor' roles for johndoe (12).",
        "available": "",
        "synopsis": "wp user remove-role <user> [<role>...]"
    },
    "user-term-remove": {
        "title": "user term remove",
        "excerpt": "Remove a term from an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;taxonomy&gt;<\/dt><dd><p>The name of the term's taxonomy.<\/p><\/dd><dt>[&lt;term&gt;...]<\/dt><dd><p>The slug of the term or terms to be removed from the object.<\/p><\/dd><dt>[--by=&lt;field&gt;]<\/dt><dd><p>Explicitly handle the term value as a slug or id. [Default: slug]<div><span>Options:<\/span><ul><li><code>slug<\/code><\/li><li><code>id<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--all]<\/dt><dd><p>Remove all terms from the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp user term remove <id> <taxonomy> [<term>...] [--by=<field>] [--all]"
    },
    "cache-flush-group": {
        "title": "cache flush-group",
        "excerpt": "Removes all cache items in a group, if the object cache implementation supports it.",
        "options": "<dl><dt>&lt;group&gt;<\/dt><dd><p>Cache group key.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Clear cache group.\n$ wp cache flush-group my_group\nSuccess: Cache group 'my_group' was flushed.",
        "available": "",
        "synopsis": "wp cache flush-group <group>"
    },
    "comment-meta-list": {
        "title": "comment meta list",
        "excerpt": "List all metadata associated with an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>ID for the object.<\/p><\/dd><dt>[--keys=&lt;keys&gt;]<\/dt><dd><p>Limit output to metadata of specific keys.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: id]<div><span>Options:<\/span><ul><li><code>id<\/code><\/li><li><code>meta_key<\/code><\/li><li><code>meta_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize meta_value output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta list <id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"
    },
    "comment-unapprove": {
        "title": "comment unapprove",
        "excerpt": "Unapproves a comment.",
        "options": "<dl><dt>&lt;id&gt;...<\/dt><dd><p>The IDs of the comments to unapprove.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Unapprove comment.\n$ wp comment unapprove 1337\nSuccess: Unapproved comment 1337.",
        "available": "",
        "synopsis": "wp comment unapprove <id>..."
    },
    "core-check-update": {
        "title": "core check-update",
        "excerpt": "Checks for WordPress updates via Version Check API.",
        "options": "<dl><dt>[--minor]<\/dt><dd><p>Compare only the first two parts of the version number.<\/p><\/dd><dt>[--major]<\/dt><dd><p>Compare only the first part of the version number.<\/p><\/dd><dt>[--force-check]<\/dt><dd><p>Bypass the transient cache and force a fresh update check.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each update.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields. Defaults to version,update_type,package_url.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>count<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Lists the most recent versions when there are updates available,\nor success message when up to date.<\/p>",
        "has_child": 0,
        "examples": "$ wp core check-update\n+---------+-------------+-------------------------------------------------------------+\n| version | update_type | package_url                                                 |\n+---------+-------------+-------------------------------------------------------------+\n| 4.5.2   | major       | https:\/\/downloads.wordpress.org\/release\/wordpress-4.5.2.zip |\n+---------+-------------+-------------------------------------------------------------+",
        "available": "",
        "synopsis": "wp core check-update [--minor] [--major] [--force-check] [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "core-is-installed": {
        "title": "core is-installed",
        "excerpt": "Checks if WordPress is installed.",
        "options": "",
        "options_extra": "<p>Determines whether WordPress is installed by checking if the standard\ndatabase tables are installed. Doesn't produce output; uses exit codes\nto communicate whether WordPress is installed.<\/p>\n<p>[--network]\n: Check if this is a multisite installation.<\/p>",
        "has_child": 0,
        "examples": "# Bash script for checking if WordPress is not installed\n\nif ! wp core is-installed 2>\/dev\/null; then\n# WP is not installed. Let's try installing it.\nwp core install\nfi\n\n# Bash script for checking if WordPress is installed, with fallback\n\nif wp core is-installed 2>\/dev\/null; then\n# WP is installed. Let's do some things we should only do in a confirmed WP environment.\nwp core verify-checksums\nelse\n# Fallback if WP is not installed.\necho 'Hey Friend, you are in the wrong spot. Move in to your WordPress directory and try again.'\nfi",
        "available": "",
        "synopsis": "wp core is-installed [--network]"
    },
    "cron-event-delete": {
        "title": "cron event delete",
        "excerpt": "Deletes all scheduled cron events for the given hook.",
        "options": "<dl><dt>&lt;hook&gt;<\/dt><dd><p>The hook name.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete all scheduled cron events for the given hook\n$ wp cron event delete cron_test\nSuccess: Deleted 2 instances of the cron event 'cron_test'.",
        "available": "",
        "synopsis": "wp cron event delete <hook>"
    },
    "embed-cache-clear": {
        "title": "embed cache clear",
        "excerpt": "Deletes all oEmbed caches for a given post.",
        "options": "<dl><dt>&lt;post_id&gt;<\/dt><dd><p>ID of the post to clear the cache for.<\/p><\/dd><\/dl>",
        "options_extra": "<p>oEmbed caches for a post are stored in the post's metadata.<\/p>",
        "has_child": 0,
        "examples": "# Clear cache for a post\n$ wp embed cache clear 123\nSuccess: Cleared oEmbed cache.",
        "available": "",
        "synopsis": "wp embed cache clear <post_id>"
    },
    "network-meta-list": {
        "title": "network meta list",
        "excerpt": "List all metadata associated with an object.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>ID for the object.<\/p><\/dd><dt>[--keys=&lt;keys&gt;]<\/dt><dd><p>Limit output to metadata of specific keys.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: id]<div><span>Options:<\/span><ul><li><code>id<\/code><\/li><li><code>meta_key<\/code><\/li><li><code>meta_value<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: asc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--unserialize]<\/dt><dd><p>Unserialize meta_value output.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta list <id> [--keys=<keys>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>] [--unserialize]"
    },
    "package-uninstall": {
        "title": "package uninstall",
        "excerpt": "Uninstalls a WP-CLI package.",
        "options": "<dl><dt>&lt;name&gt;<\/dt><dd><p>Name of the package to uninstall.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp package uninstall wp-cli\/server-command\nRemoving require statement from \/home\/person\/.wp-cli\/packages\/composer.json\nDeleting package directory \/home\/person\/.wp-cli\/packages\/vendor\/wp-cli\/server-command\nRegenerating Composer autoload.\nSuccess: Uninstalled package.",
        "available": "",
        "synopsis": "wp package uninstall <name> [--insecure]"
    },
    "plugin-deactivate": {
        "title": "plugin deactivate",
        "excerpt": "Deactivates one or more plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to deactivate.<\/p><\/dd><dt>[--uninstall]<\/dt><dd><p>Uninstall the plugin after deactivation.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all plugins will be deactivated.<\/p><\/dd><dt>[--exclude=&lt;name&gt;]<\/dt><dd><p>Comma separated list of plugin slugs that should be excluded from deactivation.<\/p><\/dd><dt>[--network]<\/dt><dd><p>If set, the plugin will be deactivated for the entire multisite network.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Deactivate plugin\n$ wp plugin deactivate hello\nPlugin 'hello' deactivated.\nSuccess: Deactivated 1 of 1 plugins.\n\n# Deactivate all plugins with exclusion\n$ wp plugin deactivate --all --exclude=hello,wordpress-seo\nPlugin 'contact-form-7' deactivated.\nPlugin 'ninja-forms' deactivated.\nSuccess: Deactivated 2 of 2 plugins.",
        "available": "",
        "synopsis": "wp plugin deactivate [<plugin>...] [--uninstall] [--all] [--exclude=<name>] [--network]"
    },
    "rewrite-structure": {
        "title": "rewrite structure",
        "excerpt": "Updates the permalink structure.",
        "options": "<dl><dt>&lt;permastruct&gt;<\/dt><dd><p>The new permalink structure to apply.<\/p><\/dd><dt>[--category-base=&lt;base&gt;]<\/dt><dd><p>Set the base for category permalinks, i.e. '\/category\/'.<\/p><\/dd><dt>[--tag-base=&lt;base&gt;]<\/dt><dd><p>Set the base for tag permalinks, i.e. '\/tag\/'.<\/p><\/dd><dt>[--hard]<\/dt><dd><p>Perform a hard flush - update <code>.htaccess<\/code> rules as well as rewrite rules in database.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Sets the post permalink structure to the specified pattern.<\/p>\n<p>To regenerate a .htaccess file with WP-CLI, you'll need to add\nthe mod_rewrite module to your <a href=\"https:\/\/make.wordpress.org\/cli\/handbook\/config\/#config-files\">WP-CLI config<\/a>.\nFor example:<\/p>\n<pre><code>apache_modules:\n  - mod_rewrite<\/code><\/pre>",
        "has_child": 0,
        "examples": "$ wp rewrite structure '\/%year%\/%monthnum%\/%postname%\/'\nSuccess: Rewrite structure set.",
        "available": "",
        "synopsis": "wp rewrite structure <permastruct> [--category-base=<base>] [--tag-base=<base>] [--hard]"
    },
    "scaffold-taxonomy": {
        "title": "scaffold taxonomy",
        "excerpt": "Generates PHP code for registering a custom taxonomy.",
        "options": "<dl><dt>&lt;slug&gt;<\/dt><dd><p>The internal name of the taxonomy.<\/p><\/dd><dt>[--post_types=&lt;post-types&gt;]<\/dt><dd><p>Post types to register for use with the taxonomy.<\/p><\/dd><dt>[--label=&lt;label&gt;]<\/dt><dd><p>The text used to translate the update messages.<\/p><\/dd><dt>[--textdomain=&lt;textdomain&gt;]<\/dt><dd><p>The textdomain to use for the labels.<\/p><\/dd><dt>[--theme]<\/dt><dd><p>Create a file in the active theme directory, instead of sending to STDOUT. Specify a theme with <code>--theme=&lt;theme&gt;<\/code> to have the file placed in that theme.<\/p><\/dd><dt>[--plugin=&lt;plugin&gt;]<\/dt><dd><p>Create a file in the given plugin's directory, instead of sending to STDOUT.<\/p><\/dd><dt>[--raw]<\/dt><dd><p>Just generate the <code>register_taxonomy()<\/code> call and nothing else.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Generate PHP code for registering a custom taxonomy and save in a file\n$ wp scaffold taxonomy venue --post_types=event,presentation > taxonomy.php",
        "available": "",
        "synopsis": "wp scaffold taxonomy <slug> [--post_types=<post-types>] [--label=<label>] [--textdomain=<textdomain>] [--theme] [--plugin=<plugin>] [--raw] [--force]"
    },
    "site-option-patch": {
        "title": "site option patch",
        "excerpt": "Updates a nested value in an option.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The option name.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site option patch <action> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "site-option-pluck": {
        "title": "site option pluck",
        "excerpt": "Gets a nested value from an option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The option name.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp site option pluck <key> <key-path>... [--format=<format>]"
    },
    "user-session-list": {
        "title": "user session list",
        "excerpt": "List sessions for the given user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><li><code>ids<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Note: The <code>token<\/code> field does not return the actual token, but a hash of\nit. The real token is not persisted and can only be found in the\ncorresponding cookies on the client side.<\/p>",
        "has_child": 0,
        "examples": "# List a user's sessions.\n$ wp user session list admin@example.com --format=csv\nlogin_time,expiration_time,ip,ua\n\"2016-01-01 12:34:56\",\"2016-02-01 12:34:56\",127.0.0.1,\"Mozilla\/5.0...\"",
        "available": "<p>These fields will be displayed by default for each session:<\/p>\n<ul>\n<li>token<\/li>\n<li>login_time<\/li>\n<li>expiration_time<\/li>\n<li>ip<\/li>\n<li>ua<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>expiration<\/li>\n<li>login<\/li>\n<\/ul>",
        "synopsis": "wp user session list <user> [--fields=<fields>] [--format=<format>]"
    },
    "widget-deactivate": {
        "title": "widget deactivate",
        "excerpt": "Deactivates one or more widgets from an active sidebar.",
        "options": "<dl><dt>&lt;widget-id&gt;...<\/dt><dd><p>Unique ID for the widget(s)<\/p><\/dd><\/dl>",
        "options_extra": "<p>Moves widgets to Inactive Widgets.<\/p>",
        "has_child": 0,
        "examples": "# Deactivate the recent-comments-2 widget.\n$ wp widget deactivate recent-comments-2\nSuccess: 1 widget deactivated.",
        "available": "",
        "synopsis": "wp widget deactivate <widget-id>..."
    },
    "cli-alias-is-group": {
        "title": "cli alias is-group",
        "excerpt": "Check whether an alias is a group.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the alias.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Checks whether the alias is a group; exit status 0 if it is, otherwise 1.\n$ wp cli alias is-group @prod\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp cli alias is-group <key>"
    },
    "comment-meta-patch": {
        "title": "comment meta patch",
        "excerpt": "Update a nested value for a meta field.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta patch <action> <id> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "comment-meta-pluck": {
        "title": "comment meta pluck",
        "excerpt": "Get a nested value from a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta pluck <id> <key> <key-path>... [--format=<format>]"
    },
    "cron-schedule-list": {
        "title": "cron schedule list",
        "excerpt": "List available cron schedules.",
        "options": "<dl><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific object fields.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each schedule.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>ids<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List available cron schedules\n$ wp cron schedule list\n+------------+-------------+----------+\n| name       | display     | interval |\n+------------+-------------+----------+\n| hourly     | Once Hourly | 3600     |\n| twicedaily | Twice Daily | 43200    |\n| daily      | Once Daily  | 86400    |\n+------------+-------------+----------+\n\n# List id of available cron schedule\n$ wp cron schedule list --fields=name --format=ids\nhourly twicedaily daily",
        "available": "<p>These fields will be displayed by default for each cron schedule:<\/p>\n<ul>\n<li>name<\/li>\n<li>display<\/li>\n<li>interval<\/li>\n<\/ul>\n<p>There are no additional fields.<\/p>",
        "synopsis": "wp cron schedule list [--fields=<fields>] [--field=<field>] [--format=<format>]"
    },
    "embed-handler-list": {
        "title": "embed handler list",
        "excerpt": "Lists all available embed handlers.",
        "options": "<dl><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Display the value of a single field<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List id,regex,priority fields of available handlers.\n$ wp embed handler list --fields=priority,id\n+----------+-------------------+\n| priority | id                |\n+----------+-------------------+\n| 10       | youtube_embed_url |\n| 9999     | audio             |\n| 9999     | video             |",
        "available": "<p>These fields will be displayed by default for each handler:<\/p>\n<ul>\n<li>id<\/li>\n<li>regex<\/li>\n<\/ul>\n<p>These fields are optionally available:<\/p>\n<ul>\n<li>callback<\/li>\n<li>priority<\/li>\n<\/ul>",
        "synopsis": "wp embed handler list [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "language-core-list": {
        "title": "language core list",
        "excerpt": "Lists all available languages.",
        "options": "<dl><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Display the value of a single field<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter results by key=value pairs.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List language,english_name,status fields of available languages.\n$ wp language core list --fields=language,english_name,status\n+----------------+-------------------------+-------------+\n| language       | english_name            | status      |\n+----------------+-------------------------+-------------+\n| ar             | Arabic                  | uninstalled |\n| ary            | Moroccan Arabic         | uninstalled |\n| az             | Azerbaijani             | uninstalled |",
        "available": "<p>These fields will be displayed by default for each translation:<\/p>\n<ul>\n<li>language<\/li>\n<li>english_name<\/li>\n<li>native_name<\/li>\n<li>status<\/li>\n<li>update<\/li>\n<li>updated<\/li>\n<\/ul>",
        "synopsis": "wp language core list [--field=<field>] [--<field>=<value>] [--fields=<fields>] [--format=<format>]"
    },
    "menu-item-add-post": {
        "title": "menu item add-post",
        "excerpt": "Adds a post as a menu item.",
        "options": "<dl><dt>&lt;menu&gt;<\/dt><dd><p>The name, slug, or term ID for the menu.<\/p><\/dd><dt>&lt;post-id&gt;<\/dt><dd><p>Post ID to add to the menu.<\/p><\/dd><dt>[--title=&lt;title&gt;]<\/dt><dd><p>Set a custom title for the menu item.<\/p><\/dd><dt>[--link=&lt;link&gt;]<\/dt><dd><p>Set a custom url for the menu item.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>Set a custom description for the menu item.<\/p><\/dd><dt>[--attr-title=&lt;attr-title&gt;]<\/dt><dd><p>Set a custom title attribute for the menu item.<\/p><\/dd><dt>[--target=&lt;target&gt;]<\/dt><dd><p>Set a custom link target for the menu item.<\/p><\/dd><dt>[--classes=&lt;classes&gt;]<\/dt><dd><p>Set a custom link classes for the menu item.<\/p><\/dd><dt>[--position=&lt;position&gt;]<\/dt><dd><p>Specify the position of this menu item.<\/p><\/dd><dt>[--parent-id=&lt;parent-id&gt;]<\/dt><dd><p>Make this menu item a child of another menu item.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new menu item id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu item add-post sidebar-menu 33 --title=\"Custom Test Post\"\nSuccess: Menu item added.",
        "available": "",
        "synopsis": "wp menu item add-post <menu> <post-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"
    },
    "menu-item-add-term": {
        "title": "menu item add-term",
        "excerpt": "Adds a taxonomy term as a menu item.",
        "options": "<dl><dt>&lt;menu&gt;<\/dt><dd><p>The name, slug, or term ID for the menu.<\/p><\/dd><dt>&lt;taxonomy&gt;<\/dt><dd><p>Taxonomy of the term to be added.<\/p><\/dd><dt>&lt;term-id&gt;<\/dt><dd><p>Term ID of the term to be added.<\/p><\/dd><dt>[--title=&lt;title&gt;]<\/dt><dd><p>Set a custom title for the menu item.<\/p><\/dd><dt>[--link=&lt;link&gt;]<\/dt><dd><p>Set a custom url for the menu item.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>Set a custom description for the menu item.<\/p><\/dd><dt>[--attr-title=&lt;attr-title&gt;]<\/dt><dd><p>Set a custom title attribute for the menu item.<\/p><\/dd><dt>[--target=&lt;target&gt;]<\/dt><dd><p>Set a custom link target for the menu item.<\/p><\/dd><dt>[--classes=&lt;classes&gt;]<\/dt><dd><p>Set a custom link classes for the menu item.<\/p><\/dd><dt>[--position=&lt;position&gt;]<\/dt><dd><p>Specify the position of this menu item.<\/p><\/dd><dt>[--parent-id=&lt;parent-id&gt;]<\/dt><dd><p>Make this menu item a child of another menu item.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new menu item id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu item add-term sidebar-menu post_tag 24\nSuccess: Menu item added.",
        "available": "",
        "synopsis": "wp menu item add-term <menu> <taxonomy> <term-id> [--title=<title>] [--link=<link>] [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"
    },
    "menu-location-list": {
        "title": "menu location list",
        "excerpt": "Lists locations for the current theme.",
        "options": "<dl><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><li><code>ids<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu location list\n+----------+-------------------+\n| location | description       |\n+----------+-------------------+\n| primary  | Primary Menu      |\n| social   | Social Links Menu |\n+----------+-------------------+",
        "available": "<p>These fields will be displayed by default for each location:<\/p>\n<ul>\n<li>name<\/li>\n<li>description<\/li>\n<\/ul>",
        "synopsis": "wp menu location list [--format=<format>]"
    },
    "network-meta-patch": {
        "title": "network meta patch",
        "excerpt": "Update a nested value for a meta field.",
        "options": "<dl><dt>&lt;action&gt;<\/dt><dd><p>Patch action to perform.<div><span>Options:<\/span><ul><li><code>insert<\/code><\/li><li><code>update<\/code><\/li><li><code>delete<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to patch.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta patch <action> <id> <key> <key-path>... [<value>] [--format=<format>]"
    },
    "network-meta-pluck": {
        "title": "network meta pluck",
        "excerpt": "Get a nested value from a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to get.<\/p><\/dd><dt>&lt;key-path&gt;...<\/dt><dd><p>The name(s) of the keys within the value to locate the value to pluck.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The output format of the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta pluck <id> <key> <key-path>... [--format=<format>]"
    },
    "scaffold-post-type": {
        "title": "scaffold post-type",
        "excerpt": "Generates PHP code for registering a custom post type.",
        "options": "<dl><dt>&lt;slug&gt;<\/dt><dd><p>The internal name of the post type.<\/p><\/dd><dt>[--label=&lt;label&gt;]<\/dt><dd><p>The text used to translate the update messages.<\/p><\/dd><dt>[--textdomain=&lt;textdomain&gt;]<\/dt><dd><p>The textdomain to use for the labels.<\/p><\/dd><dt>[--dashicon=&lt;dashicon&gt;]<\/dt><dd><p>The dashicon to use in the menu.<\/p><\/dd><dt>[--theme]<\/dt><dd><p>Create a file in the active theme directory, instead of sending to STDOUT. Specify a theme with <code>--theme=&lt;theme&gt;<\/code> to have the file placed in that theme.<\/p><\/dd><dt>[--plugin=&lt;plugin&gt;]<\/dt><dd><p>Create a file in the given plugin's directory, instead of sending to STDOUT.<\/p><\/dd><dt>[--raw]<\/dt><dd><p>Just generate the <code>register_post_type()<\/code> call and nothing else.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Generate a 'movie' post type for the 'simple-life' theme\n$ wp scaffold post-type movie --label=Movie --theme=simple-life\nSuccess: Created '\/var\/www\/example.com\/public_html\/wp-content\/themes\/simple-life\/post-types\/movie.php'.",
        "available": "",
        "synopsis": "wp scaffold post-type <slug> [--label=<label>] [--textdomain=<textdomain>] [--dashicon=<dashicon>] [--theme] [--plugin=<plugin>] [--raw] [--force]"
    },
    "site-option-delete": {
        "title": "site option delete",
        "excerpt": "Deletes a site option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>Key for the site option.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site option delete my_option\nSuccess: Deleted 'my_option' site option.",
        "available": "",
        "synopsis": "wp site option delete <key>"
    },
    "site-option-update": {
        "title": "site option update",
        "excerpt": "Updates a site option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The name of the site option to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update a site option by reading from a file\n$ wp site option update my_option < value.txt\nSuccess: Updated 'my_option' site option.",
        "available": "",
        "synopsis": "wp site option update <key> [<value>] [--format=<format>]"
    },
    "super-admin-remove": {
        "title": "super-admin remove",
        "excerpt": "Removes super admin privileges from one or more users.",
        "options": "<dl><dt>&lt;user&gt;...<\/dt><dd><p>One or more user IDs, user emails, or user logins.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp super-admin remove superadmin2\nSuccess: Revoked super-admin capabilities.",
        "available": "",
        "synopsis": "wp super-admin remove <user>..."
    },
    "theme-auto-updates": {
        "title": "theme auto-updates",
        "excerpt": "Manages theme auto-updates.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Enable the auto-updates for a theme\n$ wp theme auto-updates enable twentysixteen\nTheme auto-updates for 'twentysixteen' enabled.\nSuccess: Enabled 1 of 1 theme auto-updates.\n\n# Disable the auto-updates for a theme\n$ wp theme auto-updates disable twentysixteen\nTheme auto-updates for 'twentysixteen' disabled.\nSuccess: Disabled 1 of 1 theme auto-updates.\n\n# Get the status of theme auto-updates\n$ wp theme auto-updates status twentysixteen\nAuto-updates for theme 'twentysixteen' are disabled.",
        "available": "",
        "synopsis": ""
    },
    "theme-is-installed": {
        "title": "theme is-installed",
        "excerpt": "Checks if a given theme is installed.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>The theme to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when installed, 1 when uninstalled.<\/p>",
        "has_child": 0,
        "examples": "# Check whether theme is installed; exit status 0 if installed, otherwise 1\n$ wp theme is-installed hello\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp theme is-installed <theme>"
    },
    "comment-meta-delete": {
        "title": "comment meta delete",
        "excerpt": "Delete a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>[&lt;key&gt;]<\/dt><dd><p>The name of the meta field to delete.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value to delete. If omitted, all rows with key will deleted.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all meta for the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta delete <id> [<key>] [<value>] [--all]"
    },
    "comment-meta-update": {
        "title": "comment meta update",
        "excerpt": "Update a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp comment meta update <id> <key> [<value>] [--format=<format>]"
    },
    "cron-event-schedule": {
        "title": "cron event schedule",
        "excerpt": "Schedules a new cron event.",
        "options": "<dl><dt>&lt;hook&gt;<\/dt><dd><p>The hook name.<\/p><\/dd><dt>[&lt;next-run&gt;]<\/dt><dd><p>A Unix timestamp or an English textual datetime description compatible with <code>strtotime()<\/code>. Defaults to now.<\/p><\/dd><dt>[&lt;recurrence&gt;]<\/dt><dd><p>How often the event should recur. See <code>wp cron schedule list<\/code> for available schedule names. Defaults to no recurrence.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Arguments to pass to the hook for the event. <field> should be a numeric key, not a string.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Schedule a new cron event\n$ wp cron event schedule cron_test\nSuccess: Scheduled event with hook 'cron_test' for 2016-05-31 10:19:16 GMT.\n\n# Schedule new cron event with hourly recurrence\n$ wp cron event schedule cron_test now hourly\nSuccess: Scheduled event with hook 'cron_test' for 2016-05-31 10:20:32 GMT.\n\n# Schedule new cron event and pass arguments\n$ wp cron event schedule cron_test '+1 hour' --0=first-argument --1=second-argument\nSuccess: Scheduled event with hook 'cron_test' for 2016-05-31 11:21:35 GMT.",
        "available": "",
        "synopsis": "wp cron event schedule <hook> [<next-run>] [<recurrence>] [--<field>=<value>]"
    },
    "embed-cache-trigger": {
        "title": "embed cache trigger",
        "excerpt": "Triggers the caching of all oEmbed results for a given post.",
        "options": "<dl><dt>&lt;post_id&gt;<\/dt><dd><p>ID of the post to do the caching for.<\/p><\/dd><\/dl>",
        "options_extra": "<p>oEmbed caches for a post are stored in the post's metadata.<\/p>",
        "has_child": 0,
        "examples": "# Triggers cache for a post\n$ wp embed cache trigger 456\nSuccess: Caching triggered!",
        "available": "",
        "synopsis": "wp embed cache trigger <post_id>"
    },
    "embed-provider-list": {
        "title": "embed provider list",
        "excerpt": "Lists all available oEmbed providers.",
        "options": "<dl><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Display the value of a single field<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--force-regex]<\/dt><dd><p>Turn the asterisk-type provider URLs into regexes.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List format,endpoint fields of available providers.\n$ wp embed provider list --fields=format,endpoint\n+------------------------------+-----------------------------------------+\n| format                       | endpoint                                |\n+------------------------------+-----------------------------------------+\n| #https?:\/\/youtu\\.be\/.*#i     | https:\/\/www.youtube.com\/oembed          |\n| #https?:\/\/flic\\.kr\/.*#i      | https:\/\/www.flickr.com\/services\/oembed\/ |\n| #https?:\/\/wordpress\\.tv\/.*#i | https:\/\/wordpress.tv\/oembed\/            |",
        "available": "<p>These fields will be displayed by default for each provider:<\/p>\n<ul>\n<li>format<\/li>\n<li>endpoint<\/li>\n<\/ul>\n<p>This field is optionally available:<\/p>\n<ul>\n<li>regex<\/li>\n<\/ul>",
        "synopsis": "wp embed provider list [--field=<field>] [--fields=<fields>] [--format=<format>] [--force-regex]"
    },
    "language-theme-list": {
        "title": "language theme list",
        "excerpt": "Lists all available languages for one or more themes.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to list languages for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, available languages for all themes will be listed.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Display the value of a single field.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter results by key=value pairs.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List language,english_name,status fields of available languages.\n$ wp language theme list --fields=language,english_name,status\n+----------------+-------------------------+-------------+\n| language       | english_name            | status      |\n+----------------+-------------------------+-------------+\n| ar             | Arabic                  | uninstalled |\n| ary            | Moroccan Arabic         | uninstalled |\n| az             | Azerbaijani             | uninstalled |",
        "available": "<p>These fields will be displayed by default for each translation:<\/p>\n<ul>\n<li>theme<\/li>\n<li>language<\/li>\n<li>english_name<\/li>\n<li>native_name<\/li>\n<li>status<\/li>\n<li>update<\/li>\n<li>updated<\/li>\n<\/ul>",
        "synopsis": "wp language theme list [<theme>...] [--all] [--field=<field>] [--<field>=<value>] [--fields=<fields>] [--format=<format>]"
    },
    "network-meta-delete": {
        "title": "network meta delete",
        "excerpt": "Delete a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>[&lt;key&gt;]<\/dt><dd><p>The name of the meta field to delete.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The value to delete. If omitted, all rows with key will deleted.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all meta for the object.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta delete <id> [<key>] [<value>] [--all]"
    },
    "network-meta-update": {
        "title": "network meta update",
        "excerpt": "Update a meta field.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>The ID of the object.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>The name of the meta field to update.<\/p><\/dd><dt>[&lt;value&gt;]<\/dt><dd><p>The new value. If omitted, the value is read from STDIN.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>The serialization format for the value. [Default: plaintext]<div><span>Options:<\/span><ul><li><code>plaintext<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp network meta update <id> <key> [<value>] [--format=<format>]"
    },
    "option-get-autoload": {
        "title": "option get-autoload",
        "excerpt": "Gets the 'autoload' value for an option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The name of the option to get 'autoload' of.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp option get-autoload <key>"
    },
    "option-set-autoload": {
        "title": "option set-autoload",
        "excerpt": "Sets the 'autoload' value for an option.",
        "options": "<dl><dt>&lt;key&gt;<\/dt><dd><p>The name of the option to set 'autoload' for.<\/p><\/dd><dt>&lt;autoload&gt;<\/dt><dd><p>Should this option be automatically loaded.<div><span>Options:<\/span><ul><li><code>'yes'<\/code><\/li><li><code>'no'<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp option set-autoload <key> <autoload>"
    },
    "plugin-auto-updates": {
        "title": "plugin auto-updates",
        "excerpt": "Manages plugin auto-updates.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# Enable the auto-updates for a plugin\n$ wp plugin auto-updates enable hello\nPlugin auto-updates for 'hello' enabled.\nSuccess: Enabled 1 of 1 plugin auto-updates.\n\n# Disable the auto-updates for a plugin\n$ wp plugin auto-updates disable hello\nPlugin auto-updates for 'hello' disabled.\nSuccess: Disabled 1 of 1 plugin auto-updates.\n\n# Get the status of plugin auto-updates\n$ wp plugin auto-updates status hello\nAuto-updates for plugin 'hello' are disabled.",
        "available": "",
        "synopsis": ""
    },
    "plugin-is-installed": {
        "title": "plugin is-installed",
        "excerpt": "Checks if a given plugin is installed.",
        "options": "<dl><dt>&lt;plugin&gt;<\/dt><dd><p>The plugin to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when installed, 1 when uninstalled.<\/p>",
        "has_child": 0,
        "examples": "# Check whether plugin is installed; exit status 0 if installed, otherwise 1\n$ wp plugin is-installed hello\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp plugin is-installed <plugin>"
    },
    "user-check-password": {
        "title": "user check-password",
        "excerpt": "Checks if a user's password is valid or not.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email or user ID of the user to check credentials for.<\/p><\/dd><dt>&lt;user_pass&gt;<\/dt><dd><p>A string that contains the plain text password for the user.<\/p><\/dd><dt>[--escape-chars]<\/dt><dd><p>Escape password with <code>wp_slash()<\/code> to mimic the same behavior as <code>wp-login.php<\/code>.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Check whether given credentials are valid; exit status 0 if valid, otherwise 1\n$ wp user check-password admin adminpass\n$ echo $?\n1\n\n# Bash script for checking whether given credentials are valid or not\nif ! $(wp user check-password admin adminpass); then\nnotify-send \"Invalid Credentials\";\nfi",
        "available": "",
        "synopsis": "wp user check-password <user> <user_pass> [--escape-chars]"
    },
    "user-reset-password": {
        "title": "user reset-password",
        "excerpt": "Resets the password for one or more users.",
        "options": "<dl><dt>&lt;user&gt;...<\/dt><dd><p>one or more user logins or IDs.<\/p><\/dd><dt>[--skip-email]<\/dt><dd><p>Don't send an email notification to the affected user(s).<\/p><\/dd><dt>[--show-password]<\/dt><dd><p>Show the new password(s).<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output only the new password(s).<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Reset the password for two users and send them the change email.\n$ wp user reset-password admin editor\nReset password for admin.\nReset password for editor.\nSuccess: Passwords reset for 2 users.\n\n# Reset and display the password.\n$ wp user reset-password editor --show-password\nReset password for editor.\nPassword: N6hAau0fXZMN#rLCIirdEGOh\nSuccess: Password reset for 1 user.\n\n# Reset the password for one user, displaying only the new password, and not sending the change email.\n$ wp user reset-password admin --skip-email --porcelain\nyV6BP*!d70wg\n\n# Reset password for all users.\n$ wp user reset-password $(wp user list --format=ids)\nReset password for admin.\nReset password for editor.\nReset password for subscriber.\nSuccess: Passwords reset for 3 users.\n\n# Reset password for all users with a particular role.\n$ wp user reset-password $(wp user list --format=ids --role=administrator)\nReset password for admin.\nSuccess: Password reset for 1 user.",
        "available": "",
        "synopsis": "wp user reset-password <user>... [--skip-email] [--show-password] [--porcelain]"
    },
    "config-shuffle-salts": {
        "title": "config shuffle-salts",
        "excerpt": "Refreshes the salts defined in the wp-config.php file.",
        "options": "<dl><dt>[&lt;keys&gt;...]<\/dt><dd><p>One ore more keys to shuffle. If none are provided, this falls back to the default WordPress Core salt keys.<\/p><\/dd><dt>[--force]<\/dt><dd><p>If an unknown key is requested to be shuffled, add it instead of throwing a warning.<\/p><\/dd><dt>[--config-file=&lt;path&gt;]<\/dt><dd><p>Specify the file path to the config file to be modified. Defaults to the root of the WordPress installation and the filename &quot;wp-config.php&quot;.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry API download without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get new salts for your wp-config.php file\n$ wp config shuffle-salts\nSuccess: Shuffled the salt keys.\n\n# Add a cache key salt to the wp-config.php file\n$ wp config shuffle-salts WP_CACHE_KEY_SALT --force",
        "available": "",
        "synopsis": "wp config shuffle-salts [<keys>...] [--force] [--config-file=<path>] [--insecure]"
    },
    "embed-provider-match": {
        "title": "embed provider match",
        "excerpt": "Gets the matching provider for a given URL.",
        "options": "<dl><dt>&lt;url&gt;<\/dt><dd><p>URL to retrieve provider for.<\/p><\/dd><dt>[--discover]<\/dt><dd><p>Whether to use oEmbed discovery or not. Defaults to true.<\/p><\/dd><dt>[--limit-response-size=&lt;size&gt;]<\/dt><dd><p>Limit the size of the resulting HTML when using discovery. Default 150 KB (the standard WordPress limit). Not compatible with 'no-discover'.<\/p><\/dd><dt>[--link-type=&lt;json|xml&gt;]<\/dt><dd><p>Whether to accept only a certain link type when using discovery. Defaults to any (json or xml), preferring json. Not compatible with 'no-discover'.<div><span>Options:<\/span><ul><li><code>json<\/code><\/li><li><code>xml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get the matching provider for the URL.\n$ wp embed provider match https:\/\/www.youtube.com\/watch?v=dQw4w9WgXcQ\nhttps:\/\/www.youtube.com\/oembed",
        "available": "",
        "synopsis": "wp embed provider match <url> [--discover] [--limit-response-size=<size>] [--link-type=<json|xml>]"
    },
    "language-core-update": {
        "title": "language core update",
        "excerpt": "Updates installed languages for core.",
        "options": "<dl><dt>[--dry-run]<\/dt><dd><p>Preview which translations would be updated.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp language core update\nUpdating 'Japanese' translation for WordPress 4.9.2...\nDownloading translation from https:\/\/downloads.wordpress.org\/translation\/core\/4.9.2\/ja.zip...\nTranslation updated successfully.\nSuccess: Updated 1\/1 translation.",
        "available": "",
        "synopsis": "wp language core update [--dry-run]"
    },
    "language-plugin-list": {
        "title": "language plugin list",
        "excerpt": "Lists all available languages for one or more plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to list languages for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, available languages for all plugins will be listed.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Display the value of a single field.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter results by key=value pairs.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List language,english_name,status fields of available languages.\n$ wp language plugin list --fields=language,english_name,status\n+----------------+-------------------------+-------------+\n| language       | english_name            | status      |\n+----------------+-------------------------+-------------+\n| ar             | Arabic                  | uninstalled |\n| ary            | Moroccan Arabic         | uninstalled |\n| az             | Azerbaijani             | uninstalled |",
        "available": "<p>These fields will be displayed by default for each translation:<\/p>\n<ul>\n<li>plugin<\/li>\n<li>language<\/li>\n<li>english_name<\/li>\n<li>native_name<\/li>\n<li>status<\/li>\n<li>update<\/li>\n<li>updated<\/li>\n<\/ul>",
        "synopsis": "wp language plugin list [<plugin>...] [--all] [--field=<field>] [--<field>=<value>] [--fields=<fields>] [--format=<format>]"
    },
    "menu-item-add-custom": {
        "title": "menu item add-custom",
        "excerpt": "Adds a custom menu item.",
        "options": "<dl><dt>&lt;menu&gt;<\/dt><dd><p>The name, slug, or term ID for the menu.<\/p><\/dd><dt>&lt;title&gt;<\/dt><dd><p>Title for the link.<\/p><\/dd><dt>&lt;link&gt;<\/dt><dd><p>Target URL for the link.<\/p><\/dd><dt>[--description=&lt;description&gt;]<\/dt><dd><p>Set a custom description for the menu item.<\/p><\/dd><dt>[--attr-title=&lt;attr-title&gt;]<\/dt><dd><p>Set a custom title attribute for the menu item.<\/p><\/dd><dt>[--target=&lt;target&gt;]<\/dt><dd><p>Set a custom link target for the menu item.<\/p><\/dd><dt>[--classes=&lt;classes&gt;]<\/dt><dd><p>Set a custom link classes for the menu item.<\/p><\/dd><dt>[--position=&lt;position&gt;]<\/dt><dd><p>Specify the position of this menu item.<\/p><\/dd><dt>[--parent-id=&lt;parent-id&gt;]<\/dt><dd><p>Make this menu item a child of another menu item.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new menu item id.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu item add-custom sidebar-menu Apple http:\/\/apple.com\nSuccess: Menu item added.",
        "available": "",
        "synopsis": "wp menu item add-custom <menu> <title> <link> [--description=<description>] [--attr-title=<attr-title>] [--target=<target>] [--classes=<classes>] [--position=<position>] [--parent-id=<parent-id>] [--porcelain]"
    },
    "menu-location-assign": {
        "title": "menu location assign",
        "excerpt": "Assigns a location to a menu.",
        "options": "<dl><dt>&lt;menu&gt;<\/dt><dd><p>The name, slug, or term ID for the menu.<\/p><\/dd><dt>&lt;location&gt;<\/dt><dd><p>Location's slug.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu location assign primary-menu primary\nSuccess: Assigned location primary to menu primary-menu.",
        "available": "",
        "synopsis": "wp menu location assign <menu> <location>"
    },
    "menu-location-remove": {
        "title": "menu location remove",
        "excerpt": "Removes a location from a menu.",
        "options": "<dl><dt>&lt;menu&gt;<\/dt><dd><p>The name, slug, or term ID for the menu.<\/p><\/dd><dt>&lt;location&gt;<\/dt><dd><p>Location's slug.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp menu location remove primary-menu primary\nSuccess: Removed location from menu.",
        "available": "",
        "synopsis": "wp menu location remove <menu> <location>"
    },
    "scaffold-child-theme": {
        "title": "scaffold child-theme",
        "excerpt": "Generates child theme based on an existing theme.",
        "options": "<dl><dt>&lt;slug&gt;<\/dt><dd><p>The slug for the new child theme.<\/p><\/dd><dt>--parent_theme=&lt;slug&gt;<\/dt><dd><p>What to put in the 'Template:' header in 'style.css'.<\/p><\/dd><dt>[--theme_name=&lt;title&gt;]<\/dt><dd><p>What to put in the 'Theme Name:' header in 'style.css'.<\/p><\/dd><dt>[--author=&lt;full-name&gt;]<\/dt><dd><p>What to put in the 'Author:' header in 'style.css'.<\/p><\/dd><dt>[--author_uri=&lt;uri&gt;]<\/dt><dd><p>What to put in the 'Author URI:' header in 'style.css'.<\/p><\/dd><dt>[--theme_uri=&lt;uri&gt;]<\/dt><dd><p>What to put in the 'Theme URI:' header in 'style.css'.<\/p><\/dd><dt>[--activate]<\/dt><dd><p>Activate the newly created child theme.<\/p><\/dd><dt>[--enable-network]<\/dt><dd><p>Enable the newly created child theme for the entire network.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a child theme folder with <code>functions.php<\/code> and <code>style.css<\/code> files.<\/p>",
        "has_child": 0,
        "examples": "# Generate a 'sample-theme' child theme based on TwentySixteen\n$ wp scaffold child-theme sample-theme --parent_theme=twentysixteen\nSuccess: Created '\/var\/www\/example.com\/public_html\/wp-content\/themes\/sample-theme'.",
        "available": "",
        "synopsis": "wp scaffold child-theme <slug> --parent_theme=<slug> [--theme_name=<title>] [--author=<full-name>] [--author_uri=<uri>] [--theme_uri=<uri>] [--activate] [--enable-network] [--force]"
    },
    "scaffold-theme-tests": {
        "title": "scaffold theme-tests",
        "excerpt": "Generates files needed for running PHPUnit tests in a theme.",
        "options": "<dl><dt>[&lt;theme&gt;]<\/dt><dd><p>The name of the theme to generate test files for.<\/p><\/dd><dt>[--dir=&lt;dirname&gt;]<\/dt><dd><p>Generate test files for a non-standard theme path. If no theme slug is specified, the directory name is used.<\/p><\/dd><dt>[--ci=&lt;provider&gt;]<\/dt><dd><p>Choose a configuration file for a continuous integration provider. [Default: circle]<div><span>Options:<\/span><ul><li><code>circle<\/code><\/li><li><code>gitlab<\/code><\/li><li><code>bitbucket<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>The following files are generated by default:<\/p>\n<ul>\n<li><code>phpunit.xml.dist<\/code> is the configuration file for PHPUnit.<\/li>\n<li><code>.circleci\/config.yml<\/code> is the configuration file for CircleCI. Use <code>--ci=&lt;provider&gt;<\/code> to select a different service.<\/li>\n<li><code>bin\/install-wp-tests.sh<\/code> configures the WordPress test suite and a test database.<\/li>\n<li><code>tests\/bootstrap.php<\/code> is the file that makes the current theme active when running the test suite.<\/li>\n<li><code>tests\/test-sample.php<\/code> is a sample file containing the actual tests.<\/li>\n<li><code>.phpcs.xml.dist<\/code> is a collection of PHP_CodeSniffer rules.<\/li>\n<\/ul>\n<p>Learn more from the <a href=\"https:\/\/make.wordpress.org\/cli\/handbook\/plugin-unit-tests\/\">plugin unit tests documentation<\/a>.<\/p>\n<h2>ENVIRONMENT<\/h2>\n<p>The <code>tests\/bootstrap.php<\/code> file looks for the WP_TESTS_DIR environment\nvariable.<\/p>",
        "has_child": 0,
        "examples": "# Generate unit test files for theme 'twentysixteenchild'.\n$ wp scaffold theme-tests twentysixteenchild\nSuccess: Created test files.",
        "available": "",
        "synopsis": "wp scaffold theme-tests [<theme>] [--dir=<dirname>] [--ci=<provider>] [--force]"
    },
    "scaffold-underscores": {
        "title": "scaffold underscores",
        "excerpt": "Generates starter code for a theme based on _s.",
        "options": "<dl><dt>&lt;slug&gt;<\/dt><dd><p>The slug for the new theme, used for prefixing functions.<\/p><\/dd><dt>[--activate]<\/dt><dd><p>Activate the newly downloaded theme.<\/p><\/dd><dt>[--enable-network]<\/dt><dd><p>Enable the newly downloaded theme for the entire network.<\/p><\/dd><dt>[--theme_name=&lt;title&gt;]<\/dt><dd><p>What to put in the 'Theme Name:' header in 'style.css'.<\/p><\/dd><dt>[--author=&lt;full-name&gt;]<\/dt><dd><p>What to put in the 'Author:' header in 'style.css'.<\/p><\/dd><dt>[--author_uri=&lt;uri&gt;]<\/dt><dd><p>What to put in the 'Author URI:' header in 'style.css'.<\/p><\/dd><dt>[--sassify]<\/dt><dd><p>Include stylesheets as SASS.<\/p><\/dd><dt>[--woocommerce]<\/dt><dd><p>Include WooCommerce boilerplate files.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>See the <a href=\"https:\/\/underscores.me\/\">Underscores website<\/a> for more details.<\/p>",
        "has_child": 0,
        "examples": "# Generate a theme with name \"Sample Theme\" and author \"John Doe\"\n$ wp scaffold _s sample-theme --theme_name=\"Sample Theme\" --author=\"John Doe\"\nSuccess: Created theme 'Sample Theme'.",
        "available": "",
        "synopsis": "wp scaffold underscores <slug> [--activate] [--enable-network] [--theme_name=<title>] [--author=<full-name>] [--author_uri=<uri>] [--sassify] [--woocommerce] [--force]"
    },
    "site-switch-language": {
        "title": "site switch-language",
        "excerpt": "Activates a given language.",
        "options": "<dl><dt>&lt;language&gt;<\/dt><dd><p>Language code to activate.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp site switch-language ja\nSuccess: Language activated.",
        "available": "",
        "synopsis": "wp site switch-language <language>"
    },
    "user-session-destroy": {
        "title": "user session destroy",
        "excerpt": "Destroy a session for the given user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>User ID, user email, or user login.<\/p><\/dd><dt>[&lt;token&gt;]<\/dt><dd><p>The token of the session to destroy. Defaults to the most recently created session.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Destroy all of the user's sessions.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Destroy the most recent session of the given user.\n$ wp user session destroy admin\nSuccess: Destroyed session. 3 sessions remaining.\n\n# Destroy a specific session of the given user.\n$ wp user session destroy admin e073ad8540a9c2...\nSuccess: Destroyed session. 2 sessions remaining.\n\n# Destroy all the sessions of the given user.\n$ wp user session destroy admin --all\nSuccess: Destroyed all sessions.\n\n# Destroy all sessions for all users.\n$ wp user list --field=ID | xargs -n 1 wp user session destroy --all\nSuccess: Destroyed all sessions.\nSuccess: Destroyed all sessions.",
        "available": "",
        "synopsis": "wp user session destroy <user> [<token>] [--all]"
    },
    "core-verify-checksums": {
        "title": "core verify-checksums",
        "excerpt": "Verifies WordPress files against WordPress.org's checksums.",
        "options": "<dl><dt>[--include-root]<\/dt><dd><p>Verify all files and folders in the root directory, and warn if any non-WordPress items are found.<\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>Verify checksums against a specific version of WordPress.<\/p><\/dd><dt>[--locale=&lt;locale&gt;]<\/dt><dd><p>Verify checksums against a specific locale of WordPress.<\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Downloads md5 checksums for the current version from WordPress.org, and\ncompares those checksums against the currently installed files.<\/p>\n<p>For security, avoids loading WordPress when verifying checksums.<\/p>\n<p>If you experience issues verifying from this command, ensure you are\npassing the relevant <code>--locale<\/code> and <code>--version<\/code> arguments according to\nthe values from the <code>Dashboard-&gt;Updates<\/code> menu in the admin area of the\nsite.<\/p>",
        "has_child": 0,
        "examples": "# Verify checksums\n$ wp core verify-checksums\nSuccess: WordPress installation verifies against checksums.\n\n# Verify checksums for given WordPress version\n$ wp core verify-checksums --version=4.0\nSuccess: WordPress installation verifies against checksums.\n\n# Verify checksums for given locale\n$ wp core verify-checksums --locale=en_US\nSuccess: WordPress installation verifies against checksums.\n\n# Verify checksums for given locale\n$ wp core verify-checksums --locale=ja\nWarning: File doesn't verify against checksum: wp-includes\/version.php\nWarning: File doesn't verify against checksum: readme.html\nWarning: File doesn't verify against checksum: wp-config-sample.php\nError: WordPress installation doesn't verify against checksums.",
        "available": "",
        "synopsis": "wp core verify-checksums [--include-root] [--version=<version>] [--locale=<locale>] [--insecure]"
    },
    "cron-event-unschedule": {
        "title": "cron event unschedule",
        "excerpt": "Unschedules all cron events for a given hook.",
        "options": "<dl><dt>&lt;hook&gt;<\/dt><dd><p>Name of the hook for which all events should be unscheduled.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Unschedule a cron event on given hook.\n$ wp cron event unschedule cron_test\nSuccess: Unscheduled 2 events with hook 'cron_test'.",
        "available": "",
        "synopsis": "wp cron event unschedule <hook>"
    },
    "language-core-install": {
        "title": "language core install",
        "excerpt": "Installs a given language.",
        "options": "<dl><dt>&lt;language&gt;...<\/dt><dd><p>Language code to install.<\/p><\/dd><dt>[--activate]<\/dt><dd><p>If set, the language will be activated immediately after install.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Downloads the language pack from WordPress.org.<\/p>",
        "has_child": 0,
        "examples": "# Install the Japanese language.\n$ wp language core install ja\nDownloading translation from https:\/\/downloads.wordpress.org\/translation\/core\/4.9.8\/ja.zip...\nUnpacking the update...\nInstalling the latest version...\nTranslation updated successfully.\nLanguage 'ja' installed.\nSuccess: Installed 1 of 1 languages.",
        "available": "",
        "synopsis": "wp language core install <language>... [--activate]"
    },
    "language-theme-update": {
        "title": "language theme update",
        "excerpt": "Updates installed languages for one or more themes.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to update languages for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, languages for all themes will be updated.<\/p><\/dd><dt>[--dry-run]<\/dt><dd><p>Preview which translations would be updated.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp language theme update --all\nUpdating 'Japanese' translation for Twenty Fifteen 1.5...\nDownloading translation from https:\/\/downloads.wordpress.org\/translation\/theme\/twentyfifteen\/1.5\/ja.zip...\nTranslation updated successfully.\nSuccess: Updated 1\/1 translation.",
        "available": "",
        "synopsis": "wp language theme update [<theme>...] [--all] [--dry-run]"
    },
    "media-fix-orientation": {
        "title": "media fix-orientation",
        "excerpt": "Fix image orientation for one or more attachments.",
        "options": "<dl><dt>[&lt;attachment-id&gt;...]<\/dt><dd><p>One or more IDs of the attachments to regenerate.<\/p><\/dd><dt>[--dry-run]<\/dt><dd><p>Check images needing orientation without performing the operation.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Fix orientation for all images.\n$ wp media fix-orientation\n1\/3 Fixing orientation for \"Landscape_4\" (ID 62).\n2\/3 Fixing orientation for \"Landscape_3\" (ID 61).\n3\/3 Fixing orientation for \"Landscape_2\" (ID 60).\nSuccess: Fixed 3 of 3 images.\n\n# Fix orientation dry run.\n$ wp media fix-orientation 63 --dry-run\n1\/1 \"Portrait_6\" (ID 63) will be affected.\nSuccess: 1 of 1 image will be affected.\n\n# Fix orientation for specific images.\n$ wp media fix-orientation 63\n1\/1 Fixing orientation for \"Portrait_6\" (ID 63).\nSuccess: Fixed 1 of 1 images.",
        "available": "",
        "synopsis": "wp media fix-orientation [<attachment-id>...] [--dry-run]"
    },
    "scaffold-plugin-tests": {
        "title": "scaffold plugin-tests",
        "excerpt": "Generates files needed for running PHPUnit tests in a plugin.",
        "options": "<dl><dt>[&lt;plugin&gt;]<\/dt><dd><p>The name of the plugin to generate test files for.<\/p><\/dd><dt>[--dir=&lt;dirname&gt;]<\/dt><dd><p>Generate test files for a non-standard plugin path. If no plugin slug is specified, the directory name is used.<\/p><\/dd><dt>[--ci=&lt;provider&gt;]<\/dt><dd><p>Choose a configuration file for a continuous integration provider. [Default: circle]<div><span>Options:<\/span><ul><li><code>circle<\/code><\/li><li><code>gitlab<\/code><\/li><li><code>bitbucket<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>The following files are generated by default:<\/p>\n<ul>\n<li><code>phpunit.xml.dist<\/code> is the configuration file for PHPUnit.<\/li>\n<li><code>.circleci\/config.yml<\/code> is the configuration file for CircleCI. Use <code>--ci=&lt;provider&gt;<\/code> to select a different service.<\/li>\n<li><code>bin\/install-wp-tests.sh<\/code> configures the WordPress test suite and a test database.<\/li>\n<li><code>tests\/bootstrap.php<\/code> is the file that makes the current plugin active when running the test suite.<\/li>\n<li><code>tests\/test-sample.php<\/code> is a sample file containing the actual tests.<\/li>\n<li><code>.phpcs.xml.dist<\/code> is a collection of PHP_CodeSniffer rules.<\/li>\n<\/ul>\n<p>Learn more from the <a href=\"https:\/\/make.wordpress.org\/cli\/handbook\/plugin-unit-tests\/\">plugin unit tests documentation<\/a>.<\/p>\n<h2>ENVIRONMENT<\/h2>\n<p>The <code>tests\/bootstrap.php<\/code> file looks for the WP_TESTS_DIR environment\nvariable.<\/p>",
        "has_child": 0,
        "examples": "# Generate unit test files for plugin 'sample-plugin'.\n$ wp scaffold plugin-tests sample-plugin\nSuccess: Created test files.",
        "available": "",
        "synopsis": "wp scaffold plugin-tests [<plugin>] [--dir=<dirname>] [--ci=<provider>] [--force]"
    },
    "core-multisite-convert": {
        "title": "core multisite-convert",
        "excerpt": "Transforms an existing single-site installation into a multisite installation.",
        "options": "<dl><dt>[--title=&lt;network-title&gt;]<\/dt><dd><p>The title of the new network.<\/p><\/dd><dt>[--base=&lt;url-path&gt;]<\/dt><dd><p>Base path after the domain name that each site url will start with. [Default: \/]<\/p><\/dd><dt>[--subdomains]<\/dt><dd><p>If passed, the network will use subdomains, instead of subdirectories. Doesn't work with 'localhost'.<\/p><\/dd><dt>[--skip-config]<\/dt><dd><p>Don't add multisite constants to wp-config.php.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates the multisite database tables, and adds the multisite constants\nto wp-config.php.<\/p>\n<p>For those using WordPress with Apache, remember to update the <code>.htaccess<\/code>\nfile with the appropriate multisite rewrite rules.<\/p>\n<p><a href=\"https:\/\/wordpress.org\/support\/article\/create-a-network\/\">Review the multisite documentation<\/a>\nfor more details about how multisite works.<\/p>",
        "has_child": 0,
        "examples": "$ wp core multisite-convert\nSet up multisite database tables.\nAdded multisite constants to wp-config.php.\nSuccess: Network installed. Don't forget to set up rewrite rules.",
        "available": "",
        "synopsis": "wp core multisite-convert [--title=<network-title>] [--base=<url-path>] [--subdomains] [--skip-config]"
    },
    "core-multisite-install": {
        "title": "core multisite-install",
        "excerpt": "Installs WordPress multisite from scratch.",
        "options": "<dl><dt>[--url=&lt;url&gt;]<\/dt><dd><p>The address of the new site.<\/p><\/dd><dt>[--base=&lt;url-path&gt;]<\/dt><dd><p>Base path after the domain name that each site url in the network will start with. [Default: \/]<\/p><\/dd><dt>[--subdomains]<\/dt><dd><p>If passed, the network will use subdomains, instead of subdirectories. Doesn't work with 'localhost'.<\/p><\/dd><dt>--title=&lt;site-title&gt;<\/dt><dd><p>The title of the new site.<\/p><\/dd><dt>--admin_user=&lt;username&gt;<\/dt><dd><p>The name of the admin user. [Default: admin]<\/p><\/dd><dt>[--admin_password=&lt;password&gt;]<\/dt><dd><p>The password for the admin user. Defaults to randomly generated string.<\/p><\/dd><dt>--admin_email=&lt;email&gt;<\/dt><dd><p>The email address for the admin user.<\/p><\/dd><dt>[--skip-email]<\/dt><dd><p>Don't send an email notification to the new admin user.<\/p><\/dd><dt>[--skip-config]<\/dt><dd><p>Don't add multisite constants to wp-config.php.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates the WordPress tables in the database using the URL, title, and\ndefault admin user details provided. Then, creates the multisite tables\nin the database and adds multisite constants to the wp-config.php.<\/p>\n<p>For those using WordPress with Apache, remember to update the <code>.htaccess<\/code>\nfile with the appropriate multisite rewrite rules.<\/p>",
        "has_child": 0,
        "examples": "$ wp core multisite-install --title=\"Welcome to the WordPress\" \\\n> --admin_user=\"admin\" --admin_password=\"password\" \\\n> --admin_email=\"user@example.com\"\nSingle site database tables already present.\nSet up multisite database tables.\nAdded multisite constants to wp-config.php.\nSuccess: Network installed. Don't forget to set up rewrite rules.",
        "available": "",
        "synopsis": "wp core multisite-install [--url=<url>] [--base=<url-path>] [--subdomains] --title=<site-title> --admin_user=<username> [--admin_password=<password>] --admin_email=<email> [--skip-email] [--skip-config]"
    },
    "language-core-activate": {
        "title": "language core activate",
        "excerpt": "Activates a given language.",
        "options": "<dl><dt>&lt;language&gt;<\/dt><dd><p>Language code to activate.<\/p><\/dd><\/dl>",
        "options_extra": "<p><strong>Warning: <code>wp language core activate<\/code> is deprecated. Use <code>wp site switch-language<\/code> instead.<\/strong><\/p>",
        "has_child": 0,
        "examples": "$ wp language core activate ja\nSuccess: Language activated.",
        "available": "",
        "synopsis": "wp language core activate <language>"
    },
    "language-plugin-update": {
        "title": "language plugin update",
        "excerpt": "Updates installed languages for one or more plugins.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to update languages for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, languages for all plugins will be updated.<\/p><\/dd><dt>[--dry-run]<\/dt><dd><p>Preview which translations would be updated.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp language plugin update --all\nUpdating 'Japanese' translation for Akismet 3.1.11...\nDownloading translation from https:\/\/downloads.wordpress.org\/translation\/plugin\/akismet\/3.1.11\/ja.zip...\nTranslation updated successfully.\nSuccess: Updated 1\/1 translation.",
        "available": "",
        "synopsis": "wp language plugin update [<plugin>...] [--all] [--dry-run]"
    },
    "language-theme-install": {
        "title": "language theme install",
        "excerpt": "Installs a given language for a theme.",
        "options": "<dl><dt>[&lt;theme&gt;]<\/dt><dd><p>Theme to install language for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, languages for all themes will be installed.<\/p><\/dd><dt>&lt;language&gt;...<\/dt><dd><p>Language code to install.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. Used when installing languages for all themes. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>summary<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Downloads the language pack from WordPress.org.<\/p>",
        "has_child": 0,
        "examples": "# Install the Japanese language for Twenty Seventeen.\n$ wp language theme install twentyseventeen ja\nDownloading translation from https:\/\/downloads.wordpress.org\/translation\/theme\/twentyseventeen\/1.3\/ja.zip...\nUnpacking the update...\nInstalling the latest version...\nTranslation updated successfully.\nLanguage 'ja' installed.\nSuccess: Installed 1 of 1 languages.",
        "available": "",
        "synopsis": "wp language theme install [<theme>] [--all] <language>... [--format=<format>]"
    },
    "scaffold-package-tests": {
        "title": "scaffold package-tests",
        "excerpt": "Generate files for writing Behat tests for your command.",
        "options": "<dl><dt>&lt;dir&gt;<\/dt><dd><p>Directory path to an existing package to generate tests for.<\/p><\/dd><dt>[--ci=&lt;provider&gt;]<\/dt><dd><p>Create a configuration file for a specific CI provider. [Default: travis]<div><span>Options:<\/span><ul><li><code>travis<\/code><\/li><li><code>circle<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>WP-CLI makes use of a Behat-based testing framework, which you should use\ntoo. This command generates all of the files you need. Functional tests\nare an integral ingredient of high-quality, maintainable commands.\nBehat is a great choice as a testing framework because:<\/p>\n<ul>\n<li>It\u2019s easy to write new tests, which means they\u2019ll actually get written.<\/li>\n<li>The tests interface with your command in the same manner as your users\ninterface with your command, and they describe how the command is\nexpected to work in human-readable terms.<\/li>\n<\/ul>\n<p>Behat tests live in the <code>features\/<\/code> directory of your project. When you\nuse this command, it will generate a default test that looks like this:<\/p>\n<pre><code>Feature: Test that WP-CLI loads.\n\n  Scenario: WP-CLI loads for your tests\n    Given a WP install\n\n    When I run `wp eval 'echo \"Hello world.\";'`\n    Then STDOUT should contain:\n      \"\"\"\n      Hello world.\n      \"\"\"<\/code><\/pre>\n<p>Functional tests typically follow this pattern:<\/p>\n<ul>\n<li><strong>Given<\/strong> some background,<\/li>\n<li><strong>When<\/strong> a user performs a specific action,<\/li>\n<li><strong>Then<\/strong> the end result should be X (and Y and Z).<\/li>\n<\/ul>\n<p>View all defined Behat steps available for use with <code>behat -dl<\/code>:<\/p>\n<pre><code>Given \/^an empty directory$\/\nGiven \/^an empty cache\/\nGiven \/^an? ([^\\s]+) file:$\/\nGiven \/^\"([^\"]+)\" replaced with \"([^\"]+)\" in the ([^\\s]+) file$\/<\/code><\/pre>\n<p>The files generated by this command include:<\/p>\n<ul>\n<li><code>.travis.yml<\/code> is the configuration file for Travis CI.<\/li>\n<li><code>bin\/install-package-tests.sh<\/code> will configure your environment to run\nthe tests.<\/li>\n<li><code>bin\/test.sh<\/code> is a test runner that respects contextual Behat tags.<\/li>\n<li><code>features\/load-wp-cli.feature<\/code> is a basic test to confirm WP-CLI can\nload.<\/li>\n<li><code>features\/bootstrap<\/code>, <code>features\/steps<\/code>, <code>features\/extra<\/code> are Behat\nconfiguration files.<\/li>\n<\/ul>\n<p>After running <code>bin\/install-package-tests.sh<\/code>, you can run the tests with\n<code>.\/vendor\/bin\/behat<\/code>. If you find yourself using Behat on a number of\nprojects and don't want to install a copy with each one, you can\n<code>composer global require behat\/behat<\/code> to install Behat globally on your\nmachine. Make sure <code>~\/.composer\/vendor\/bin<\/code> has also been added to your\n<code>$PATH<\/code>. Once you've done so, you can run the tests for a project by\ncalling <code>behat<\/code>.<\/p>\n<p>For Travis CI, specially-named files in the package directory can be\nused to modify the generated <code>.travis.yml<\/code>, where <code>&lt;tag&gt;<\/code> is one of\n'cache', 'env', 'matrix', 'before_install', 'install', 'before_script', 'script':<\/p>\n<ul>\n<li><code>travis-&lt;tag&gt;.yml<\/code> - contents used for <code>&lt;tag&gt;:<\/code> (if present following ignored)<\/li>\n<li><code>travis-&lt;tag&gt;-append.yml<\/code> - contents appended to generated <code>&lt;tag&gt;:<\/code><\/li>\n<\/ul>\n<p>You can also append to the generated <code>.travis.yml<\/code> with the file:<\/p>\n<ul>\n<li><code>travis-append.yml<\/code> - contents appended to generated <code>.travis.yml<\/code><\/li>\n<\/ul>\n<h2>ENVIRONMENT<\/h2>\n<p>The <code>features\/bootstrap\/FeatureContext.php<\/code> file expects the\nWP_CLI_BIN_DIR environment variable.<\/p>\n<p>WP-CLI Behat framework uses Behat ~2.5, which is installed with Composer.<\/p>",
        "has_child": 0,
        "examples": "# Generate files for writing Behat tests.\n$ wp scaffold package-tests \/path\/to\/command\/dir\/\nSuccess: Created package test files.",
        "available": "",
        "synopsis": "wp scaffold package-tests <dir> [--ci=<provider>] [--force]"
    },
    "language-core-uninstall": {
        "title": "language core uninstall",
        "excerpt": "Uninstalls a given language.",
        "options": "<dl><dt>&lt;language&gt;...<\/dt><dd><p>Language code to uninstall.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp language core uninstall ja\nSuccess: Language uninstalled.",
        "available": "",
        "synopsis": "wp language core uninstall <language>..."
    },
    "language-plugin-install": {
        "title": "language plugin install",
        "excerpt": "Installs a given language for a plugin.",
        "options": "<dl><dt>[&lt;plugin&gt;]<\/dt><dd><p>Plugin to install language for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, languages for all plugins will be installed.<\/p><\/dd><dt>&lt;language&gt;...<\/dt><dd><p>Language code to install.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. Used when installing languages for all plugins. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>summary<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "<p>Downloads the language pack from WordPress.org.<\/p>",
        "has_child": 0,
        "examples": "# Install the Japanese language for Akismet.\n$ wp language plugin install akismet ja\nDownloading translation from https:\/\/downloads.wordpress.org\/translation\/plugin\/akismet\/4.0.3\/ja.zip...\nUnpacking the update...\nInstalling the latest version...\nTranslation updated successfully.\nLanguage 'ja' installed.\nSuccess: Installed 1 of 1 languages.",
        "available": "",
        "synopsis": "wp language plugin install [<plugin>] [--all] <language>... [--format=<format>]"
    },
    "maintenance-mode-status": {
        "title": "maintenance-mode status",
        "excerpt": "Displays maintenance mode status.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp maintenance-mode status\nMaintenance mode is active.",
        "available": "",
        "synopsis": ""
    },
    "plugin-verify-checksums": {
        "title": "plugin verify-checksums",
        "excerpt": "Verifies plugin files against WordPress.org's checksums.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to verify.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, all plugins will be verified.<\/p><\/dd><dt>[--strict]<\/dt><dd><p>If set, even &quot;soft changes&quot; like readme.txt changes will trigger checksum errors.<\/p><\/dd><dt>[--version=&lt;version&gt;]<\/dt><dd><p>Verify checksums against a specific plugin version.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a specific format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>json<\/code><\/li><li><code>csv<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--insecure]<\/dt><dd><p>Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.<\/p><\/dd><dt>[--exclude=&lt;name&gt;]<\/dt><dd><p>Comma separated list of plugin names that should be excluded from verifying.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Verify the checksums of all installed plugins\n$ wp plugin verify-checksums --all\nSuccess: Verified 8 of 8 plugins.\n\n# Verify the checksums of a single plugin, Akismet in this case\n$ wp plugin verify-checksums akismet\nSuccess: Verified 1 of 1 plugins.",
        "available": "",
        "synopsis": "wp plugin verify-checksums [<plugin>...] [--all] [--strict] [--version=<version>] [--format=<format>] [--insecure] [--exclude=<name>]"
    },
    "scaffold-package-github": {
        "title": "scaffold package-github",
        "excerpt": "Generate GitHub configuration files for your command.",
        "options": "<dl><dt>&lt;dir&gt;<\/dt><dd><p>Directory path to an existing package to generate GitHub configuration for.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite files that already exist.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a variety of files to better manage your project on GitHub. These\nfiles include:<\/p>\n<ul>\n<li><code>.github\/ISSUE_TEMPLATE<\/code> - Text displayed when a user opens a new issue.<\/li>\n<li><code>.github\/PULL_REQUEST_TEMPLATE<\/code> - Text displayed when a user submits a pull request.<\/li>\n<li><code>.github\/settings.yml<\/code> - Configuration file for the <a href=\"https:\/\/probot.github.io\/apps\/settings\/\">Probot settings app<\/a>.<\/li>\n<\/ul>",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp scaffold package-github <dir> [--force]"
    },
    "scaffold-package-readme": {
        "title": "scaffold package-readme",
        "excerpt": "Generate a README.md for your command.",
        "options": "<dl><dt>&lt;dir&gt;<\/dt><dd><p>Directory path to an existing package to generate a readme for.<\/p><\/dd><dt>[--force]<\/dt><dd><p>Overwrite the readme if it already exists.<\/p><\/dd><dt>[--branch=&lt;branch&gt;]<\/dt><dd><p>Name of default branch of the underlying repository. Defaults to master.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Creates a README.md with Using, Installing, and Contributing instructions\nbased on the composer.json file for your WP-CLI package. Run this command\nat the beginning of your project, and then every time your usage docs\nchange.<\/p>\n<p>These command-specific docs are generated based composer.json -&gt; 'extra'\n-&gt; 'commands'. For instance, this package's composer.json includes:<\/p>\n<pre><code>{\n  \"name\": \"wp-cli\/scaffold-package-command\",\n   \/\/ [...]\n   \"extra\": {\n       \"commands\": [\n           \"scaffold package\",\n           \"scaffold package-tests\",\n           \"scaffold package-readme\"\n       ]\n   }\n}<\/code><\/pre>\n<p>You can also customize the rendering of README.md generally with\ncomposer.json -&gt; 'extra' -&gt; 'readme'. For example, runcommand\/hook's\ncomposer.json includes:<\/p>\n<pre><code>{\n    \"extra\": {\n        \"commands\": [\n            \"hook\"\n        ],\n        \"readme\": {\n            \"shields\": [\n                \"[![Build Status](https:\/\/travis-ci.org\/runcommand\/reset-password.svg?branch=master)](https:\/\/travis-ci.org\/runcommand\/reset-password)\"\n            ],\n            \"sections\": [\n                \"Using\",\n                \"Installing\",\n                \"Support\"\n            ],\n            \"support\": {\n                \"body\": \"https:\/\/raw.githubusercontent.com\/runcommand\/runcommand-theme\/master\/bin\/readme-partials\/support-open-source.md\"\n            },\n            \"show_powered_by\": false\n        }\n    }\n}<\/code><\/pre>\n<p>In this example:<\/p>\n<ul>\n<li>&quot;shields&quot; supports arbitrary images as shields to display.<\/li>\n<li>&quot;sections&quot; permits defining arbitrary sections (instead of default Using, Installing and Contributing).<\/li>\n<li>&quot;support&quot; -&gt; &quot;body&quot; uses a remote Markdown file as the section contents. This can also be a local file path, or a string.<\/li>\n<li>&quot;show_powered_by&quot; shows or hides the Powered By mention at the end of the readme.<\/li>\n<\/ul>",
        "has_child": 0,
        "examples": "",
        "available": "",
        "synopsis": "wp scaffold package-readme <dir> [--force] [--branch=<branch>]"
    },
    "language-theme-uninstall": {
        "title": "language theme uninstall",
        "excerpt": "Uninstalls a given language for a theme.",
        "options": "<dl><dt>[&lt;theme&gt;]<\/dt><dd><p>Theme to uninstall language for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, languages for all themes will be uninstalled.<\/p><\/dd><dt>&lt;language&gt;...<\/dt><dd><p>Language code to uninstall.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. Used when installing languages for all themes. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>summary<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp language theme uninstall twentyten ja\nSuccess: Language uninstalled.",
        "available": "",
        "synopsis": "wp language theme uninstall [<theme>] [--all] <language>... [--format=<format>]"
    },
    "language-plugin-uninstall": {
        "title": "language plugin uninstall",
        "excerpt": "Uninstalls a given language for a plugin.",
        "options": "<dl><dt>[&lt;plugin&gt;]<\/dt><dd><p>Plugin to uninstall language for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, languages for all plugins will be uninstalled.<\/p><\/dd><dt>&lt;language&gt;...<\/dt><dd><p>Language code to uninstall.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. Used when installing languages for all plugins. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>summary<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp language plugin uninstall hello-dolly ja\nSuccess: Language uninstalled.",
        "available": "",
        "synopsis": "wp language plugin uninstall [<plugin>] [--all] <language>... [--format=<format>]"
    },
    "maintenance-mode-activate": {
        "title": "maintenance-mode activate",
        "excerpt": "Activates maintenance mode.",
        "options": "",
        "options_extra": "<p>[--force]\n: Force maintenance mode activation operation.<\/p>",
        "has_child": 0,
        "examples": "$ wp maintenance-mode activate\nEnabling Maintenance mode...\nSuccess: Activated Maintenance mode.",
        "available": "",
        "synopsis": "wp maintenance-mode activate [--force]"
    },
    "theme-auto-updates-enable": {
        "title": "theme auto-updates enable",
        "excerpt": "Enables the auto-updates for a theme.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to enable auto-updates for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, auto-updates will be enabled for all themes.<\/p><\/dd><dt>[--disabled-only]<\/dt><dd><p>If set, filters list of themes to only include the ones that have auto-updates disabled.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Enable the auto-updates for a theme\n$ wp theme auto-updates enable twentysixteen\nTheme auto-updates for 'twentysixteen' enabled.\nSuccess: Enabled 1 of 1 theme auto-updates.",
        "available": "",
        "synopsis": "wp theme auto-updates enable [<theme>...] [--all] [--disabled-only]"
    },
    "theme-auto-updates-status": {
        "title": "theme auto-updates status",
        "excerpt": "Shows the status of auto-updates for a theme.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to show the status of the auto-updates of.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, the status of auto-updates for all themes will be shown.<\/p><\/dd><dt>[--enabled-only]<\/dt><dd><p>If set, filters list of themes to only include the ones that have auto-updates enabled.<\/p><\/dd><dt>[--disabled-only]<\/dt><dd><p>If set, filters list of themes to only include the ones that have auto-updates disabled.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Only show the provided field.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get the status of theme auto-updates\n$ wp theme auto-updates status twentysixteen\n+---------------+----------+\n| name          | status   |\n+---------------+----------+\n| twentysixteen | disabled |\n+---------------+----------+\n\n# Get the list of themes that have auto-updates enabled\n$ wp theme auto-updates status --all --enabled-only --field=name\ntwentysixteen\ntwentyseventeen",
        "available": "",
        "synopsis": "wp theme auto-updates status [<theme>...] [--all] [--enabled-only] [--disabled-only] [--field=<field>] [--format=<format>]"
    },
    "user-application-password": {
        "title": "user application-password",
        "excerpt": "Creates, updates, deletes, lists and retrieves application passwords.",
        "options": "",
        "options_extra": "",
        "has_child": 1,
        "examples": "# List user application passwords and only show app name and password hash\n$ wp user application-password list 123 --fields=name,password\n+--------+------------------------------------+\n| name   | password                           |\n+--------+------------------------------------+\n| myapp  | $P$BVGeou1CUot114YohIemgpwxQCzb8O\/ |\n+--------+------------------------------------+\n\n# Get a specific application password and only show app name and created timestamp\n$ wp user application-password get 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --fields=name,created\n+--------+------------+\n| name   | created    |\n+--------+------------+\n| myapp  | 1638395611 |\n+--------+------------+\n\n# Create user application password\n$ wp user application-password create 123 myapp\nSuccess: Created application password.\nPassword: ZG1bxdxdzjTwhsY8vK8l1C65\n\n# Only print the password without any chrome\n$ wp user application-password create 123 myapp --porcelain\nZG1bxdxdzjTwhsY8vK8l1C65\n\n# Update an existing application password\n$ wp user application-password update 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --name=newappname\nSuccess: Updated application password.\n\n# Delete an existing application password\n$ wp user application-password delete 123 6633824d-c1d7-4f79-9dd5-4586f734d69e\nSuccess: Deleted 1 of 1 application password.\n\n# Check if an application password for a given application exists\n$ wp user application-password exists 123 myapp\n$ echo $?\n1\n\n# Bash script for checking whether an application password exists and creating one if not\nif ! wp user application-password exists 123 myapp; then\nPASSWORD=$(wp user application-password create 123 myapp --porcelain)\nfi",
        "available": "",
        "synopsis": ""
    },
    "language-core-is-installed": {
        "title": "language core is-installed",
        "excerpt": "Checks if a given language is installed.",
        "options": "<dl><dt>&lt;language&gt;<\/dt><dd><p>The language code to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when installed, 1 when uninstalled.<\/p>",
        "has_child": 0,
        "examples": "# Check whether the German language is installed; exit status 0 if installed, otherwise 1.\n$ wp language core is-installed de_DE\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp language core is-installed <language>"
    },
    "maintenance-mode-is-active": {
        "title": "maintenance-mode is-active",
        "excerpt": "Detects maintenance mode status.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp maintenance-mode is-active\n$ echo $?\n1",
        "available": "",
        "synopsis": ""
    },
    "plugin-auto-updates-enable": {
        "title": "plugin auto-updates enable",
        "excerpt": "Enables the auto-updates for a plugin.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to enable auto-updates for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, auto-updates will be enabled for all plugins.<\/p><\/dd><dt>[--disabled-only]<\/dt><dd><p>If set, filters list of plugins to only include the ones that have auto-updates disabled.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Enable the auto-updates for a plugin\n$ wp plugin auto-updates enable hello\nPlugin auto-updates for 'hello' enabled.\nSuccess: Enabled 1 of 1 plugin auto-updates.",
        "available": "",
        "synopsis": "wp plugin auto-updates enable [<plugin>...] [--all] [--disabled-only]"
    },
    "plugin-auto-updates-status": {
        "title": "plugin auto-updates status",
        "excerpt": "Shows the status of auto-updates for a plugin.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to show the status of the auto-updates of.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, the status of auto-updates for all plugins will be shown.<\/p><\/dd><dt>[--enabled-only]<\/dt><dd><p>If set, filters list of plugins to only include the ones that have auto-updates enabled.<\/p><\/dd><dt>[--disabled-only]<\/dt><dd><p>If set, filters list of plugins to only include the ones that have auto-updates disabled.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Only show the provided field.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><li><code>count<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get the status of plugin auto-updates\n$ wp plugin auto-updates status hello\n+-------+----------+\n| name  | status   |\n+-------+----------+\n| hello | disabled |\n+-------+----------+\n\n# Get the list of plugins that have auto-updates enabled\n$ wp plugin auto-updates status --all --enabled-only --field=name\nakismet\nduplicate-post",
        "available": "",
        "synopsis": "wp plugin auto-updates status [<plugin>...] [--all] [--enabled-only] [--disabled-only] [--field=<field>] [--format=<format>]"
    },
    "post-meta-clean-duplicates": {
        "title": "post meta clean-duplicates",
        "excerpt": "Cleans up duplicate post meta values on a post.",
        "options": "<dl><dt>&lt;id&gt;<\/dt><dd><p>ID of the post to clean.<\/p><\/dd><dt>&lt;key&gt;<\/dt><dd><p>Meta key to clean up.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete duplicate post meta.\nwp post meta clean-duplicates 1234 enclosure\nSuccess: Cleaned up duplicate 'enclosure' meta values.",
        "available": "",
        "synopsis": "wp post meta clean-duplicates <id> <key>"
    },
    "theme-auto-updates-disable": {
        "title": "theme auto-updates disable",
        "excerpt": "Disables the auto-updates for a theme.",
        "options": "<dl><dt>[&lt;theme&gt;...]<\/dt><dd><p>One or more themes to disable auto-updates for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, auto-updates will be disabled for all themes.<\/p><\/dd><dt>[--enabled-only]<\/dt><dd><p>If set, filters list of themes to only include the ones that have auto-updates enabled.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Disable the auto-updates for a theme\n$ wp theme auto-updates disable twentysixteen\nTheme auto-updates for 'twentysixteen' disabled.\nSuccess: Disabled 1 of 1 theme auto-updates.",
        "available": "",
        "synopsis": "wp theme auto-updates disable [<theme>...] [--all] [--enabled-only]"
    },
    "language-theme-is-installed": {
        "title": "language theme is-installed",
        "excerpt": "Checks if a given language is installed.",
        "options": "<dl><dt>&lt;theme&gt;<\/dt><dd><p>Theme to check for.<\/p><\/dd><dt>&lt;language&gt;...<\/dt><dd><p>The language code to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when installed, 1 when uninstalled.<\/p>",
        "has_child": 0,
        "examples": "# Check whether the German language is installed for Twenty Seventeen; exit status 0 if installed, otherwise 1.\n$ wp language theme is-installed twentyseventeen de_DE\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp language theme is-installed <theme> <language>..."
    },
    "maintenance-mode-deactivate": {
        "title": "maintenance-mode deactivate",
        "excerpt": "Deactivates maintenance mode.",
        "options": "",
        "options_extra": "",
        "has_child": 0,
        "examples": "$ wp maintenance-mode deactivate\nDisabling Maintenance mode...\nSuccess: Deactivated Maintenance mode.",
        "available": "",
        "synopsis": ""
    },
    "plugin-auto-updates-disable": {
        "title": "plugin auto-updates disable",
        "excerpt": "Disables the auto-updates for a plugin.",
        "options": "<dl><dt>[&lt;plugin&gt;...]<\/dt><dd><p>One or more plugins to disable auto-updates for.<\/p><\/dd><dt>[--all]<\/dt><dd><p>If set, auto-updates will be disabled for all plugins.<\/p><\/dd><dt>[--enabled-only]<\/dt><dd><p>If set, filters list of plugins to only include the ones that have auto-updates enabled.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Disable the auto-updates for a plugin\n$ wp plugin auto-updates disable hello\nPlugin auto-updates for 'hello' disabled.\nSuccess: Disabled 1 of 1 plugin auto-updates.",
        "available": "",
        "synopsis": "wp plugin auto-updates disable [<plugin>...] [--all] [--enabled-only]"
    },
    "language-plugin-is-installed": {
        "title": "language plugin is-installed",
        "excerpt": "Checks if a given language is installed.",
        "options": "<dl><dt>&lt;plugin&gt;<\/dt><dd><p>Plugin to check for.<\/p><\/dd><dt>&lt;language&gt;...<\/dt><dd><p>The language code to check.<\/p><\/dd><\/dl>",
        "options_extra": "<p>Returns exit code 0 when installed, 1 when uninstalled.<\/p>",
        "has_child": 0,
        "examples": "# Check whether the German language is installed for Akismet; exit status 0 if installed, otherwise 1.\n$ wp language plugin is-installed akismet de_DE\n$ echo $?\n1",
        "available": "",
        "synopsis": "wp language plugin is-installed <plugin> <language>..."
    },
    "user-application-password-get": {
        "title": "user application-password get",
        "excerpt": "Gets a specific application password.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to get the application password for.<\/p><\/dd><dt>&lt;uuid&gt;<\/dt><dd><p>The universally unique ID of the application password.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for the application password.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Get a specific application password and only show app name and created timestamp\n$ wp user application-password get 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --fields=name,created\n+--------+------------+\n| name   | created    |\n+--------+------------+\n| myapp  | 1638395611 |\n+--------+------------+",
        "available": "",
        "synopsis": "wp user application-password get <user> <uuid> [--field=<field>] [--fields=<fields>] [--format=<format>]"
    },
    "user-application-password-list": {
        "title": "user application-password list",
        "excerpt": "Lists all application passwords associated with a user.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to get application passwords for.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Filter the list by a specific field.<\/p><\/dd><dt>[--field=&lt;field&gt;]<\/dt><dd><p>Prints the value of a single field for each application password.<\/p><\/dd><dt>[--fields=&lt;fields&gt;]<\/dt><dd><p>Limit the output to specific fields.<\/p><\/dd><dt>[--format=&lt;format&gt;]<\/dt><dd><p>Render output in a particular format. [Default: table]<div><span>Options:<\/span><ul><li><code>table<\/code><\/li><li><code>csv<\/code><\/li><li><code>json<\/code><\/li><li><code>count<\/code><\/li><li><code>yaml<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--orderby=&lt;fields&gt;]<\/dt><dd><p>Set orderby which field. [Default: created]<div><span>Options:<\/span><ul><li><code>uuid<\/code><\/li><li><code>app_id<\/code><\/li><li><code>name<\/code><\/li><li><code>password<\/code><\/li><li><code>created<\/code><\/li><li><code>last_used<\/code><\/li><li><code>last_ip<\/code><\/li><\/ul><\/div><\/p><\/dd><dt>[--order=&lt;order&gt;]<\/dt><dd><p>Set ascending or descending order. [Default: desc]<div><span>Options:<\/span><ul><li><code>asc<\/code><\/li><li><code>desc<\/code><\/li><\/ul><\/div><\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# List user application passwords and only show app name and password hash\n$ wp user application-password list 123 --fields=name,password\n+--------+------------------------------------+\n| name   | password                           |\n+--------+------------------------------------+\n| myapp  | $P$BVGeou1CUot114YohIemgpwxQCzb8O\/ |\n+--------+------------------------------------+",
        "available": "",
        "synopsis": "wp user application-password list <user> [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>] [--orderby=<fields>] [--order=<order>]"
    },
    "user-application-password-create": {
        "title": "user application-password create",
        "excerpt": "Creates a new application password.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to create a new application password for.<\/p><\/dd><dt>&lt;app-name&gt;<\/dt><dd><p>Unique name of the application to create an application password for.<\/p><\/dd><dt>[--app-id=&lt;app-id&gt;]<\/dt><dd><p>Application ID to attribute to the application password.<\/p><\/dd><dt>[--porcelain]<\/dt><dd><p>Output just the new password.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Create user application password\n$ wp user application-password create 123 myapp\nSuccess: Created application password.\nPassword: ZG1bxdxdzjTwhsY8vK8l1C65\n\n# Only print the password without any chrome\n$ wp user application-password create 123 myapp --porcelain\nZG1bxdxdzjTwhsY8vK8l1C65\n\n# Create user application with a custom application ID for internal tracking\n$ wp user application-password create 123 myapp --app-id=42 --porcelain\nZG1bxdxdzjTwhsY8vK8l1C65",
        "available": "",
        "synopsis": "wp user application-password create <user> <app-name> [--app-id=<app-id>] [--porcelain]"
    },
    "user-application-password-delete": {
        "title": "user application-password delete",
        "excerpt": "Delete an existing application password.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to delete the application password for.<\/p><\/dd><dt>[&lt;uuid&gt;...]<\/dt><dd><p>Comma-separated list of UUIDs of the application passwords to delete.<\/p><\/dd><dt>[--all]<\/dt><dd><p>Delete all of the user's application password.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Delete an existing application password\n$ wp user application-password delete 123 6633824d-c1d7-4f79-9dd5-4586f734d69e\nSuccess: Deleted 1 of 1 application password.\n\n# Delete all of the user's application passwords\n$ wp user application-password delete 123 --all\nSuccess: Deleted all application passwords.",
        "available": "",
        "synopsis": "wp user application-password delete <user> [<uuid>...] [--all]"
    },
    "user-application-password-exists": {
        "title": "user application-password exists",
        "excerpt": "Checks whether an application password for a given application exists.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to check the existence of an application password for.<\/p><\/dd><dt>&lt;app-name&gt;<\/dt><dd><p>Name of the application to check the existence of an application password for.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Check if an application password for a given application exists\n$ wp user application-password exists 123 myapp\n$ echo $?\n1\n\n# Bash script for checking whether an application password exists and creating one if not\nif ! wp user application-password exists 123 myapp; then\nPASSWORD=$(wp user application-password create 123 myapp --porcelain)\nfi",
        "available": "",
        "synopsis": "wp user application-password exists <user> <app-name>"
    },
    "user-application-password-update": {
        "title": "user application-password update",
        "excerpt": "Updates an existing application password.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to update the application password for.<\/p><\/dd><dt>&lt;uuid&gt;<\/dt><dd><p>The universally unique ID of the application password.<\/p><\/dd><dt>[--&lt;field&gt;=&lt;value&gt;]<\/dt><dd><p>Update the <field> with a new <value>. Currently supported fields: name.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Update an existing application password\n$ wp user application-password update 123 6633824d-c1d7-4f79-9dd5-4586f734d69e --name=newappname\nSuccess: Updated application password.",
        "available": "",
        "synopsis": "wp user application-password update <user> <uuid> [--<field>=<value>]"
    },
    "user-application-password-record-usage": {
        "title": "user application-password record-usage",
        "excerpt": "Record usage of an application password.",
        "options": "<dl><dt>&lt;user&gt;<\/dt><dd><p>The user login, user email, or user ID of the user to update the application password for.<\/p><\/dd><dt>&lt;uuid&gt;<\/dt><dd><p>The universally unique ID of the application password.<\/p><\/dd><\/dl>",
        "options_extra": "",
        "has_child": 0,
        "examples": "# Record usage of an application password\n$ wp user application-password record-usage 123 6633824d-c1d7-4f79-9dd5-4586f734d69e\nSuccess: Recorded application password usage.",
        "available": "",
        "synopsis": "wp user application-password record-usage <user> <uuid>"
    }
}